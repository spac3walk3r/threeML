{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8e7d453b",
   "metadata": {},
   "source": [
    "# Spectrum Plugins\n",
    "\n",
    "The **SpectrumLike** plugin is designed to handle binned photon/particle spectra. It comes in three basic classes:\n",
    "\n",
    "* **SpectrumLike**: Generic binned spectral\n",
    "* **DispersionSpectrumLike**: Generic binned spectra with energy dispersion\n",
    "* **OGIPLike**: binned spectra with dispersion from OGIP PHA files\n",
    "\n",
    "The functionality of all three plugins is the same."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52ad3760",
   "metadata": {},
   "source": [
    "## SpectrumLike\n",
    "\n",
    "The most basic spectrum plugin is **SpectrumLike** which handles spectra with and without backgrounds. There are six basic features of a spectrum:\n",
    "\n",
    "* the energy boundries of the bins,\n",
    "* the data in these energy bins,\n",
    "* the statistical properties of the total spectrum\n",
    "    * Possion (counts are meausred in an on/off fashion),\n",
    "    * Gaussian (counts are the result of a masking process or a fit),\n",
    "* the exposure,\n",
    "* the background (and its associated statistical properties),\n",
    "* and any known systematic errors associated with the total or background spectrum.\n",
    "\n",
    "Let's start by examining an observation where the total counts are Poisson distributed and the measured background ground has been observed by viewing an off-source region and hence is also Poisson.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bdfa2290",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:03.972838Z",
     "iopub.status.busy": "2022-09-27T11:52:03.972364Z",
     "iopub.status.idle": "2022-09-27T11:52:04.040228Z",
     "shell.execute_reply": "2022-09-27T11:52:04.039448Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fdd448e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:04.044280Z",
     "iopub.status.busy": "2022-09-27T11:52:04.043958Z",
     "iopub.status.idle": "2022-09-27T11:52:07.209476Z",
     "shell.execute_reply": "2022-09-27T11:52:07.208632Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from threeML import *\n",
    "from threeML.io.package_data import get_path_of_data_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e71b37a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:07.213901Z",
     "iopub.status.busy": "2022-09-27T11:52:07.213442Z",
     "iopub.status.idle": "2022-09-27T11:52:07.244978Z",
     "shell.execute_reply": "2022-09-27T11:52:07.244222Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ec068f2",
   "metadata": {},
   "source": [
    "We will construct a simulated spectrum over the energy range 10-1000 keV. The spectrum will have logrithmic energy boundaries.\n",
    "\n",
    "We will simulate a blackbody source spectrum on top of powerlaw background."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "855ce8c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:07.248533Z",
     "iopub.status.busy": "2022-09-27T11:52:07.248150Z",
     "iopub.status.idle": "2022-09-27T11:52:09.671612Z",
     "shell.execute_reply": "2022-09-27T11:52:09.670868Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:07 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:07\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=705565;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=114139;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=959487;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=9596;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=510204;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=717880;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:08 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:08\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=963091;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=5367;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=622255;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=895414;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=497246;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=507997;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=722575;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=406816;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=34630;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=915237;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=498674;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=275053;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:09 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:09\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=643009;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=963427;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=777439;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=495378;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=840247;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=844128;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Blackbody(K=9e-2, kT=20)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-1.5, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f311966",
   "metadata": {},
   "source": [
    "### The count spectrum\n",
    "\n",
    "Let's examine a few properties about the count spectrum including the contents stored in the plugin, viewing the count distribution, masking channels, and rebinnined the spectrum.\n",
    "\n",
    "\n",
    "We can examine the contents of our plugin with the display function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8f219d74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:09.674976Z",
     "iopub.status.busy": "2022-09-27T11:52:09.674397Z",
     "iopub.status.idle": "2022-09-27T11:52:09.684002Z",
     "shell.execute_reply": "2022-09-27T11:52:09.683334Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>n. channels</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total rate</th>\n",
       "      <td>1913.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total bkg. rate</th>\n",
       "      <td>257.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bkg. exposure</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bkg. is poisson</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exposure</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is poisson</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>background</th>\n",
       "      <td>profiled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>significance</th>\n",
       "      <td>37.807452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg area ratio</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg exposure ratio</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg scale factor</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                0\n",
       "n. channels                    50\n",
       "total rate                 1913.0\n",
       "total bkg. rate             257.0\n",
       "bkg. exposure                 1.0\n",
       "bkg. is poisson              True\n",
       "exposure                      1.0\n",
       "is poisson                   True\n",
       "background               profiled\n",
       "significance            37.807452\n",
       "src/bkg area ratio            1.0\n",
       "src/bkg exposure ratio        1.0\n",
       "src/bkg scale factor          1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f5b9b59",
   "metadata": {},
   "source": [
    "These properties are accessible from the object. For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a436119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:09.687013Z",
     "iopub.status.busy": "2022-09-27T11:52:09.686583Z",
     "iopub.status.idle": "2022-09-27T11:52:09.691411Z",
     "shell.execute_reply": "2022-09-27T11:52:09.690718Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "37.80745249795284\n",
      "[ 30  23  38  23  30  31  55  42  56  69  80  73  68  74  81  85 110 101\n",
      "  80 100 109  83  75  85  62  59  37  30  19  17  20  12   8   4   5   4\n",
      "   4   1   1   2   6   2   2   3   1   1   2   4   3   3]\n"
     ]
    }
   ],
   "source": [
    "print(spectrum_generator.exposure)\n",
    "print(spectrum_generator.significance)\n",
    "print(spectrum_generator.observed_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aeb8215",
   "metadata": {},
   "source": [
    "To view the count spectrum, we call the *view_count_spectrum* method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "45a4aa9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:09.694489Z",
     "iopub.status.busy": "2022-09-27T11:52:09.694266Z",
     "iopub.status.idle": "2022-09-27T11:52:10.375536Z",
     "shell.execute_reply": "2022-09-27T11:52:10.374774Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "611d1d9e",
   "metadata": {},
   "source": [
    "It is even possible see which channels are above a given significance threshold. Red regions are below the supplied significance regions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "26ace878",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:10.379251Z",
     "iopub.status.busy": "2022-09-27T11:52:10.378820Z",
     "iopub.status.idle": "2022-09-27T11:52:11.050540Z",
     "shell.execute_reply": "2022-09-27T11:52:11.049725Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:10 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> channels below the significance threshold shown in red                      </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#3042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">3042</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                                             </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                    </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:10\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m channels below the significance threshold shown in red                     \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=144964;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=572101;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#3042\u001b\\\u001b[2m3042\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251m                                                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m                    \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum(significance_level=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48d5fd06",
   "metadata": {},
   "source": [
    "**Note:** In 3ML, the **Significance** module is used to compute significnaces. When total counts ($N_{\\rm on}$) are Poisson distributed and the background or off-source counts ($N_{\\rm off}$) are also Poisson distributed, the significance in $\\sigma$ is calculated via the likelihood ratio derived in [Li & Ma (1980)](http://adsabs.harvard.edu/abs/1983ApJ...272..317L):\n",
    "\n",
    "$$ \\sigma = \\sqrt{-2 \\log \\lambda} = \\sqrt{2} \\left( N_{\\rm on} \\log \\left[ \\frac{1+\\alpha}{\\alpha} \\frac{N_{\\rm on}}{N_{\\rm on}+N_{\\rm off}} \\right] + N_{\\rm off} \\log \\left[ (1 + \\alpha)\\frac{N_{\\rm off}}{N_{\\rm on}+N_{\\rm off}} \\right] \\right)$$\n",
    "\n",
    "In the case that the background is Gaussian distributed, an equivalent likelihood ratio is used (see Vianello *in prep*).\n",
    "\n",
    "#### Selection\n",
    "\n",
    "Many times, there are channels that we are not valid for analysis due to poor instrument characteristics, overflow, or systematics. We then would like to mask or exclude these channels before fitting the spectrum. We provide several ways to do this and it is useful to consult the docstring. However, we review the process here.\n",
    "\n",
    "**NOTE to Xspec users: while XSpec uses integers and floats to distinguish between energies and channels\n",
    "specifications, 3ML does not, as it would be error-prone when writing scripts. Read the following documentation\n",
    "to know how to achieve the same functionality.**\n",
    "\n",
    "##### Energy selections:\n",
    "They are specified as 'emin-emax'. Energies are in keV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "79929739",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:11.054077Z",
     "iopub.status.busy": "2022-09-27T11:52:11.053821Z",
     "iopub.status.idle": "2022-09-27T11:52:11.910614Z",
     "shell.execute_reply": "2022-09-27T11:52:11.909855Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:11 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">10</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">12.5</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">0</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:11\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range \u001b[0m\u001b[1;37m10\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m12.5\u001b[0m\u001b[1;38;5;251m translates to channels \u001b[0m\u001b[1;37m0\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=355276;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=938048;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">56.0</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">100.0</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">18</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">24</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                               </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range \u001b[0m\u001b[1;37m56.0\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m100.0\u001b[0m\u001b[1;38;5;251m translates to channels \u001b[0m\u001b[1;37m18\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m24\u001b[0m\u001b[1;38;5;251m                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=744543;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=151229;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "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+umna+PGjXr55Zf1+uuv64033tCbb76pPn36aOLEiRo/frxKS0utrBkA0tbObGlrBzOyPKMKAABSXcy75krSgAEDdNVVV+nyyy/XsmXL9PLLL+v999/XI488ooqKCh155JGaOHGijj32WLlclgwJAGlpq1vyOTvuxzOqAAAglVmaCp1Op4477jgdd9xx2rZtm1577TUtWLBA77//vpYvX65evXrpxRdftHJIAEgru2dCDUmuCM+h8owqAABIdXGbniwsLNR5552no446Svfdd59Wr16tnTt3xms4AEgrrlDk51B5RhUAAKS6uATRpqYmvf7663r55Zf16aefyjRN5ebmaty4cfEYDgAAZJB186s0ZFJ/u8sAAMTA0iD64YcfasGCBXr77bfl8/lkmqaGDh2qiRMn6oQTTlDPnj2tHA4AAGSgSoIoAKS8mIPoli1b9Morr+iVV17R5s2bZZqmCgoKNHnyZE2cOFEDBgywoEwAAAAAQLrodhB94403tGDBAn344YcKhUJyOBwaOXIku+MCAOJuafVGjS4dYHcZAACgm7qdFn/zm99IkvbZZx9NmDBBEyZMUJ8+fSwrDADQfQFH5LNGo51DGgy59MyXa9Urt4fOGXhY/AqM0dLqKoIoAAAprNtB9MQTT9TEiRN1xBFHWFkPACAGDrP1n6ai754bqc00DDUGW+QKsKoFAADET7ffafzqV7+ysg4AgAWKG6Vad/RzRKOdQxoMmXI7s9TTlRWX+gAAACQLd80NBAKaN2+evF6vvvjiC/l8Pr311luSpPXr1+ull17S2WefrX79+lk1JADgO/L9rR/RRDuHtNkX0GnDh6qgV771xQEAAPyHJUHU5/Ppxhtv1Mcff6zevXvL7Xarubm5rX2fffbRggULlJ+fr/LyciuGBBBH3X2+MBBlKSgAAACwmyVvG5944gmtXr1al112mZ5//nlNnDhxj/a8vDwNHz5cy5cvt2I4AHHy3ecLw30oSpv5nfsAAAAA4VgyI/rmm29qxIgROv/88yVJhtH+4aTvfe97Wr9+vRXDAYiTWJ8vlFpDaHGj5aUBAAAgjVgSRLds2aLjjjsuap8ePXqosZF3p0Ayi/X5QgDIFOvmV2nIpP52lwEAKcuSpbk9evRQXV1d1D5ff/21evfubcVwAAAAtqqcX2V3CQCQ0iwJogcffLCWLVum+vr6sO3V1dV67733NGzYMCuGA4CUtsVtdwUAAAD2siSI/vCHP1R9fb2uv/56rV69WsFgUJLU3NysFStW6Kc//amCwaDOPfdcK4YDgJRWQxAFAAAZzpJnRIcPH67rrrtOf/rTn3TNNde0XR8/frwkyeFw6IYbbtDgwYOtGA4AAKS5gC8Ysc00pUBzIGK7M8cZduNEAEDysCSIStIZZ5yh4cOH64UXXtAnn3yinTt3yu1266CDDtKZZ56p/fff36qhgLTHOZ4AMt28SxZHbZ97wZsR20qGFMgzc2TUMMpmQwBgL8uCqCQNGDBA06dPj9geDAbldDqtHBJIK989xzOSaG3fvg8ApBJnjlMlQwpUs64upvvUrKtT0BeUKzfy25xKgigA2MqSIDpv3jydddZZUfsEg0Hdfvvt+s1vfmPFkEBa4hxPAJnMMAx5Zo5UMMqyXEmaP32ZJs0e1e56wBfscCYVAJAcLAmif/rTn1RYWKixY8eGbQ+FQrr99tu1ZMkSK4YD0hbneALIdIZhRJ3JbO2jDvsAAJKbJU+UHXrooZo5c6Y+/PDDdm27Q+jixYt15plnWjEcMlwJs30AAABASrMkiP7ud79Tv3799Itf/ELr169vux4KhXTHHXdo0aJFOuOMM6I+Pwp0Vh+CKGCrpdUb7S4BAACkOEuCqNvt1r333qu8vDz97Gc/09dffy3TNPWb3/xGb775pk4//XRdf/31VgwFALDZ0uoqu0sAAAApzrLDHoqKivT73/9eoVBIN954o37961/rrbfe0qRJk3TDDTdYNQwAAAAAIMVZeupgv379NGvWLG3fvl1LlizRpEmT9LOf/czKIQAAAAAAKa5bW85VVFREbT/ooIP02WefqaioaI++hmHooosu6s6QAAAAAIA00a0g+uijj3aq32OPPbbH5wRRAACQzEzT7PAc09Z+UqA5ELHdmeOUYUQ5FBoAMly3gujs2bOtrgMAAH22c6v+VbNJLcHoQaChxa+KT1eEbctyOnV0ST8N6lUUjxKRxkzT1Os/X67ayrpO9Z97wZsR20qGFMgzcyRhFAAi6FYQHT58uMVlAAAg/atmk+p8uzrsZ8pUY8AfvjHQeh+CKLoq6At2OoR2pGZdnYK+oFy53XqrBQBpj78dAQBJY/dMqCGppys7Yj9Dhtxh2psCfpnfug/QXWc9crxcOc6I7fOnL9Ok2aPaXQ/4gpp3yeJ4lgYAaYEgCgBIOj1d2Zp64BER22etWhy2veLTFZFnSoEucOU4o85mGoaY7QSAGFh6fAsAAAAAAB3hV3kA0EUljXZXAKAjgQ52vg23621HrwEAWIcgCgBd1MfmIEoQBjrWmec0o+16CwCIL5bmAkg5mR7E7A7CQLJy5jhVMqQg5vuUDCmQM8pGRQCA2DEjCiDlEMQAhGMYhjwzRyrYiSW2kXa9lVoDLed/AkB8WRpE6+vrtXTpUo0fP97K2wIAAHSKYRid2s2WXW8BwF6WLs2trq7W7373OytvCQAAAABIM136VWB1dXXU9tra2piKAQAA6MjgSf3tLgEAEKMuBdFzzjkn6jMTpmnyTAUAAIirIQRRAEh5XQqi+fn5uvTSSzV8+PCw7VVVVbrtttssKAsAAAAAkK66FEQPPPBA1dfXa//99w/bHgwGZZqmJYUli7q6Ov32t7/VypUrVVJSohtuuEFHHHGE3WUBQLdl+vE3AADAfl3arOiMM87Q3nvvHbG9tLRUt9xyS8xFJZP77rtPhYWFevHFF3XFFVfo17/+tXbu3Gl3WQDQbRx/AwAA7NalGdExY8ZEbc/Pz9eECRNiKiiZNDU16e2339ZTTz2l3NxcHXvssRo4cKDeeecdnXrqqXaXBwAAAAApKa0O0GpqatJTTz2ltWvX6pNPPlF9fb1uvfXWsOHY7/fr4Ycf1sKFC1VfX6+ysjJNmzZNI0eObOvz5ZdfqkePHurTp0/btYEDB+rzzz9PyNcDAAAAAOnI0nNE7bZjxw5VVFSoqqpKgwYNitr3rrvu0ty5c3XSSSfp2muvlcPh0E033aRVq1a19dm1a5fcbvcer3O73dq1a1dc6gcAAACATBDzjOjYsWP1xBNPqF+/flbUE5OioiI999xzKioq0rp163TZZZeF7bd27Vq98cYbuuKKK3TeeedJkk455RRNnTpVc+bM0Zw5cyRJPXr0UGPjng9TNTY2qkePHvH9QgCkvIBD2lAYvq3FGbktkFa/HgQAAAgv5rc8ybRLbnZ2toqKijrst3jxYjmdTk2ePLntWk5OjiZOnKg1a9aourpakrTvvvtq165dqqmpaev3+eefR9w1GAAc//kr0ZTU4gj/oSht5nfuAwAAkI4y8nfv69ev17777ttu2e1BBx0kSfrss88kST179tSxxx6rRx55RD6fT8uWLdOGDRt07LHHJrxmAKmhuFHKCUpZocgfUvT2nGDrfQAAANJVWm1W1Flbt24NO3O6+1ptbW3btRtuuEF33nmnJk2apJKSEt12223q1atXt8eura3V1q1bw7ZVVVV1+74AkkO+v/UjmjV9pLJtiakHQHwMntTf7hIAIKVlZBD1+XzKyspqdz07O7utfbeCggLdc889lo394osvqqKiwrL7AYCVvipx6Zkv18rlivzjoaHFr4pPV0Rsz3I6dXRJPw3q1fGjEkCqGkIQBYCYZGQQzcnJUUtLS7vrfr+/rT1eJk+erNGjR4dtq6qq0syZM+M2NgB0JOiQGoMtcikUsY8pU42BKNO+AelfNZvSOogurd6o0aUD7C4DAICUlZFBtKioaI8NiHbbvWS2uLg4bmMXFxfH9f4AEAtnSHI7s6LOiBoy5HZlh21rCvhbN2oKBuNUYXJYWl1FEAUAIAYZGUQHDRqkjz76SI2NjXtsWLR27dq2dgDIRH1rAjrt8KEq6JUfsc+sVYs19cAjwrZVfLoi+mwpAACALNg19/zzz49p8x47jB07VsFgUC+++GLbNb/frwULFmjo0KEqLS21sToAAAAASG8xz4j+5Cc/saIOyzz77LNqaGhoW2a7dOlSbdmyRZI0ZcoU5eXlaejQoRo3bpwefPBB1dXVqW/fvnr11Ve1efNm3XzzzXaWDwAAAABpL65Lc03T1Jdffqns7OyEzTI+/fTT2rx5c9vnS5Ys0ZIlSyRJJ598svLy8iRJM2bMUGlpqV577TU1NDRo4MCBuvvuuzV8+PCE1AkAAAAAmcqSILp48WK98847uvbaa5Wf3/pc0TfffKNbbrml7WzMsWPH6pe//KWcTqcVQ0Y0d+7cTvXLycnRlVdeqSuvvDKu9QAAgORj9zmg6+ZXcQQMgIwW8zOikvTCCy9o/fr1bSFUkh544AFt3LhRI0aMUFlZmRYtWqQFCxZYMRwAAEBM7A6BlfOrbB0fAOxmyYzoxo0bdfTRR7d93tTUpHfffVcnnHCCfv3rXysQCOjSSy/VggULdNppp1kxZNrwer3yer2SpIaGBpurAQAAAID4sySI7ty5U4WFhW2fr1q1SsFgUCeeeGLrIC6XjjzySL3++utWDJdWPB6PPB6PJKmyslLl5eU2VwQAAAAA8WXJ0ly3262dO3e2ff7RRx/J4XBo2LBhbddcLpeam5utGA4AAAAAkMIsCaL77befli1bph07dqi+vl5er1cHHnjgHs+Mbt68WXvttZcVwwEAAAAAUpglQXTKlCmqra3VlClTdPbZZ2vr1q0644wz9uizdu1aDRo0yIrhAAAZbnQpu40CAJDKLHlGdOzYsbr++uv18ssvS5JOOOEETZgwoa195cqVamxs1FFHHWXFcACADDe6dIDdJQAAgBhYEkQl6Ywzzmg3C7rb8OHDOboFAAAAACDJoqW5ADJHSaPdFQBYWr3R7hIAAIgJQRRAl/QhiAK2W1pdZXcJAADExLKlueger9crr9crSWpoaLC5GgAAAACIP4KozTwejzwejySpsrJS5eXlNlcEAAAAAPHF0lwAAAAAQEIRRAEAAAAACUUQBQAAAAAkVFyDqGma2rRpk6qrq+M5DAAAAAAghVgSRBcvXqw777xT9fX1bde++eYbTZ06VT/+8Y917rnn6rbbblMwGLRiOAAAUhrngAIAMp0lQfSFF17Q+vXrlZ+f33btgQce0MaNGzVixAiVlZVp0aJFWrBggRXDAQCQ0jgHFACQ6SwJohs3btRBBx3U9nlTU5PeffddnXDCCbrvvvv0t7/9Tf379yeIAgCAjBHwBRVoDoT9ME1FbGttN+0uHwDiypJzRHfu3KnCwsK2z1etWqVgMKgTTzyxdRCXS0ceeaRef/11K4YDAABIevMuWRy1fe4Fb0ZsKxlSIM/MkTIMw+qyACApWDIj6na7tXPnzrbPP/roIzkcDg0bNqztmsvlUnNzsxXDAQAQE57RRLw4c5wqGVIQ831q1tUp6GNvDQDpy5IZ0f3220/Lli3TtGnT5HA45PV6deCBB+7xzOjmzZu11157WTFcWvF6vfJ6vZKkhoYGm6sBgMywtLpKo0sH2F0G0pBhGPLMHNlhiJw/fZkmzR7V7nrAF+xwJhUA0oElQXTKlCn69a9/rSlTprTNfE6bNm2PPmvXrtWBBx5oxXBpxePxyOPxSJIqKytVXl5uc0UAkNk+27lV/6rZpJYoO703tPhV8emKiO1ZTqeOLumnQb2K4lEikpxhGHLlRn+LZRjqsA8ApDNL/gYcO3asrr/+er388suSpBNOOEETJkxoa1+5cqUaGxt11FFHWTEcAABx86+aTarz7Yrax5SpxoA/codA630IogAAhGdJEK2urtZJJ52kM844I2z78OHD9c9//pOlpwCApLd7JtSQ1NOVHbaPIUPuCG1NAb/Mb90HAAC0Z0kQPffcc3XxxRfroosuitjn2Wef1SOPPKJFixZZMSQAAHHV05WtqQceEbZt1qrFEdsqPl0RfbYUAABYs2uuaZodnnfFeVgAAAAAAMmiINoZNTU16tmzZ6KGAwAAAAAkqW4vza2oqNjj848++ihsv1AopC1btuiNN97Q0KFDuzscAAAAACBNdDuIPvroo23/bhiGVq5cqZUrV0bsX1xcrMsvv7y7wwEAAAAA0kS3g+js2bMltT77ed1112nChAkaP358u34Oh0O9evXSfvvtJ4cjYSuBgbRV0mh3BQAAAEBsuh1Ehw8f3vbvU6dO1YgRI/a4BiA++hBEAcRoi5u/SwAA9rJkivLiiy8mhAIAOmVp9Ua7S8h4NW67KwAAZDrWygIAEmppdZXdJQAAAJt1e2nud7W0tOjtt9/WunXr1NDQoFAoFLbfLbfcYtWQacHr9crr9UqSGhoabK4GAAAAAOLPkiC6efNm3XDDDfr6669lmmbEfoZhEES/w+PxyOPxSJIqKytVXl5uc0UAAAAAEF+WBNH7779fX331lU4++WRNnDhRJSUlcjqdVtwaAAAA37FufpWGTOpvdxkA0G2WBNGPPvpIRxxxhH7+859bcTsAAABEUUkQBZDiLAmioVBIBxxwgBW3AgAgo322c6v+VbNJLcFgxD4NLX5VfLoibFsgEFB1qUvZkgbUxadGAABiZUkQHTp0qKqq2AURAIBY/atmk+p8u6L2MWWqMeAP2xYIBhV0GgpG3rIBAADbWXJ8y09+8hN9+OGHWrRokRW3AwAgY+2eCTUkuV3ZYT8MGRHb3M4sOYOmnOE3rwcAIClYMiP67rvvasSIEbrttts0bNgwHXjggXK725+WbRiGLrroIiuGBAAgrfV0ZWvqgUeEbZu1anHEtrqd9XppzVvKzWHTQABA8rIkiD766KNt/75y5UqtXLkybD+CKACkvtGlbJACAABiY0kQnT17thW3AQCkgNGlA+wuAQAApDhLgujw4cOtuA0AAAAAIANYslkRAAAAAACdZcmMaEVFRaf68YwoAEgljXZXAAAAYC/LNysKxzAMmaZJEAUASX0IogAAIMPFdbOihoYGffrpp3r22Wd15JFH6swzz7RiOAAAkl5TwK+KT1eEbWtoidzWFPDHsywkibJbDrG7BACwVdw3Kzr22GN10kknadq0aRozZowVw6UVr9crr9crqTW4AwBSW5bTKQUkU1JjhFBpyozYtsd9kLaMowqlLXZXAQD2sSSIdqRfv34aM2aM/ud//kcnnnhiIoZMGR6PRx6PR5JUWVmp8vJymysCAMTi6JJ++lfNJrUEgxH7GDLkdmVHbM9yOnV0Sb94lAcAQFJISBCVpIKCAn3xxReJGg4AAFsM6lWkQb2KovaZtWqxph54RIIqAgAg+STk+Ba/36/3339feXl5iRgOAAAAAJDELJkRffXVV8NeDwaDqq2t1RtvvKEvvvhCU6ZMsWI4AAAAAEAKsySI3nXXXTIMo9110zQltR7fcuKJJ+onP/mJFcMBAAAAAFKYJUH0lltuCXvd4XAoPz9fBx54oIqLi60YCgAAAACQ4iwJohMmTLDiNgAAAACADJCwXXMBAEiUpoBfFZ+uiNje0BK5vamD8z0BAEDsLA2iq1ev1iuvvKLPPvtMjY2NcrvdOuCAA3TKKafosMMOs3IoAADayXI6pYBkSmqMEihNmVHb2+4FAADiwrIgev/99+vZZ5/dY4Mi0zRVWVmpl19+WT/4wQ909dVXWzUcAADtHF3ST/+q2aSWYDBqP0OG3K7siO1ZTqeOLulndXlAlwR8kf8cm6YUaA5EbHfmOMNuJAkAycKSIPrKK6/omWeeUb9+/TR16lSNGDFChYWF2r59uz766CM9+uijeuaZZzRo0CCNHz/eiiEBAGhnUK8iDepV1GG/WasWa+qBRySgIqD75l2yOGr73AvejNhWMqRAnpkjCaMAkpbDipu88MILKikp0V//+ld5PB4VFRXJMAwVFhbqxBNP1F//+lcVFxfr+eeft2I4AACAtOTMcapkSEHM96lZV6dglBlVALCbJTOin3/+uSZNmqS8vLyw7Xl5eTr++OM1f/58K4YDAABIS4ZhyDNzZIchcv70ZZo0e1S76wFfsMOZVABIBgnbNZelIQAAAB0zDEOu3Ohv0QxDHfYBgGRmyd9g+++/vxYvXqxLL71UPXv2bNfe1NSkxYsXa//997diOAAAEMH8b9bri1KXnFEevmlxShsKI7c7TKm4UcrnJBsAQJxY8ozo5MmTVVNToyuuuEKLFi1SXV2dJKmurk6LFi3SFVdcoZqaGp1++ulWDAcAACJoDrYo6DTU4lDEDylyW4tD8jmlWre9XwcAIL1ZMiN66qmnav369Zo3b55uu+02Sf89vkWSTNPUWWedpQkTJlgxHAAAiCDXmSVn0Iw6I9osKSsUvi3gaD2HNRTHJ2q2uKU+jfG7PwAg+Vn2cMH06dM1duxYvfLKK/rss8/U2Ngot9utAw44QOPHj9ewYcOsGgoAAEQwaZ8D9NKqL5Wb44zYZ00fqWxb+LYNhf+dNY2XGoIoAGQ8S59yHzZsGIGzi7xer7xerySpoaHB5moAAAAAIP7Ybs1mHo9HHo9HklRZWany8nKbKwIAAACA+LJk8c3q1av1wAMPaOvWrWHba2tr9cADD2jNmjVWDAcAAAAASGGWBNGnn35aS5cuVVFRUdj24uJiLVu2THPnzrViOAAAAABACrMkiK5bt06HHXZY1D7Dhg3T2rVrrRgOAABbjS7tb3cJAACkNEuCaF1dnYqLi6P2KSws1Pbt260YDgAAW40uHWB3CRltC2ecAkDKsySI5uXlacuWLVH7VFdXq0ePHlYMBwAAMlgNQRQAUp4lu+YOHTpUS5Ys0bRp01RaWtquvbq6Wm+//bYOP/xwK4YDACS5poBfFZ+uCNvW0BK5rSngj2dZAAAgSVgSRM855xwtW7ZMV111laZNm6YjjzxSxcXFqq2t1fLly/X3v/9dfr9f5557rhXDAQCSVJbTKQUkU1JjhFBpyozYtsd9gBS1M1va6pZCRuQ+LU5pQ2HkdocpFTdK+fxuBkCasiSIDh8+XFdddZX+8pe/6He/+50kyTAMmabZ9u/XXHONhg8fbsVwAIAkdXRJP/2rZpNagsGIfQwZcruyI7ZnOZ06uqRfPMoDEmKrW/J14ncpLR08IFXrJogCSF+WBFFJOvvss3X44YfrhRde0Lp169TQ0KC8vDwddNBBOv300zVw4ECrhgIAJKlBvYo0qFf4o7x2m7VqsaYeeESCKgISb/dMqCHJFQrfp1lSVoS2gKN1VUG0GVUASHWWBVFJKisr0w033GDlLQEAAFKSKySVbQvftqZP5LYNhR3PlgJAquOvOQAAAABAQnUriP70pz/VJ5980q0Bd+3apX/84x+aN29et14PAAAAAEht3VqaW1dXpyuuuELDhg3TKaecojFjxigvLy/qa9asWaOFCxfqzTfflM/n04wZM7pVMAAAAAAgtXUriP7973/XK6+8ooqKCt19992655571K9fPw0ePFh77bWX8vLy5Pf7tXPnTm3atEmVlZVqamqSw+HQiSeeGPG8UQAAAABA+uv2ZkUTJkzQ+PHj9d5772nBggVauXKlFi5c2K6fw+HQwIEDNWbMGE2cOFHFxcUxFQwAAAB7rZtfpSGT+ttdBoAUFtOuuYZh6JhjjtExxxwjSdq4caNqamq0c+dOZWdnq6CgQPvvv3+Hy3YBAACQOioJogBiZOnxLQMGDNCAAQOsvCUAAAAAIM1wfAsAAClmdCkzUQCA1EYQBQAgxYwuHWB3CQAAxIQgCgAA0EVb3HZXAACpjSAKAADQRTUEUQCIiaWbFaHrvF6vvF6vJKmhocHmagAAAAAg/giiNvN4PPJ4PJKkyspKlZeX21wRAABIdx9v3KZDBhTaXQaADMbSXAAAgAyzq6yn3SUAyHCWzYgGAgHNmzdPXq9XX3zxhXw+n9566y1J0vr16/XSSy/p7LPPVr9+/awaEgAAAOiWLW6pT6PdVQCZy5Ig6vP5dOONN+rjjz9W79695Xa71dzc3Na+zz77aMGCBcrPz2fpKQAAAGxXQxAFbGXJ0twnnnhCq1ev1mWXXabnn39eEydO3KM9Ly9Pw4cP1/Lly60YDgAAIKMNntTf7hIAICaWBNE333xTI0aM0Pnnny/DMGQYRrs+3/ve91RdXW3FcAAAABltCEEUQIqzJIhu2bJFgwcPjtqnR48eamxk/QMAAAAAZDpLgmiPHj1UV1cXtc/XX3+t3r17WzEcAAAAACCFWRJEDz74YC1btkz19fVh26urq/Xee+9p2LBhVgwHAAAAAEhhlgTRH/7wh6qvr9f111+v1atXKxgMSpKam5u1YsUK/fSnP1UwGNS5555rxXAAAAAAgBRmyfEtw4cP13XXXac//elPuuaaa9qujx8/XpLkcDh0ww03dPgcKQAASG07s6WtbinUft/CNi1OaUNh5HaHKRU3Svl+6+sDACQHS4KoJJ1xxhkaPny4XnjhBX3yySfauXOn3G63DjroIJ155pnaf//9rRoKAAAkqa1uyefsuF9LB2uyat0EUQBIZ5YFUUkaMGCApk+fbuUtAQBACtk9E2pIcoXC92mWlBWhLeCQTEWfUQUApD5Lgmh1dbXy8vLkdrsj9mlqalJ9fb1KS0utGBIAACQxV0gq2xa+bU2fyG0bCjueLQUApD5L/qo/99xz9cwzz0Tt88wzz7BZEQAAkkaX9re7BAAAbGVJEDVNU6ZpdtgHAABIo0sH2F0CYKuPN0aYEgeQMRK2+KWmpkY9e/ZM1HAAAAARbYn8NBESYFcZ7wmBTNftZ0QrKir2+Pyjjz4K2y8UCmnLli164403NHTo0O4OBwAAYJkat9Sn0e4qACBzdTuIPvroo23/bhiGVq5cqZUrV0bsX1xcrMsvv7y7wwEAgAwScEQ+a5RzSAEg9XU7iM6ePVtS67Of1113nSZMmKDx48e36+dwONSrVy/tt99+cjjYBg8AAETm+M+WEqai757LOaQAkNq6HUSHDx/e9u9Tp07ViBEj9rgGAADQVcWNrSEy2jminEMaX6ZpKugLdtBHCjQHIrY7c5wyDP4jAIjMknNEL774YituAwAAMly+v+OZTM4hjR/TNPX6z5ertrKuw75zL3gzYlvJkAJ5Zo4kjAKIyJIg+m3BYFA7duxQS0tL2PbS0lKrhwQAAIAFgr5gp0JoR2rW1SnoC8qVa/lbTQBpwrK/HSorK/Xggw/q//7v/xQIhF+qYRiG3nrrLauGBAAAQJyc9cjxcuU4w7bNn75Mk2aPanc94Atq3iWL412aPt64TYcMiLJjFYCkZ0kQXb9+va6++mo5nU6NHDlSy5Yt06BBg1RYWKhPP/1UdXV1Gj58uPbee28rhgMAAECcuXKcEWc0DUO2znbuKuspRX+MFUCSs+Qpiscee0yS9Ne//lV33XWXJOm4447TPffco7lz5+r000/X559/rqlTp1oxHAAAAJDR1s2vsrsEICaWBNHVq1dr9OjRGjBgQNs102zdfz0nJ0fXXXediouL9dBDD1kxHAAAAJDRKgmiSHGWBNHGxkZ973vfa/vc5XJp165d/x3E4dDw4cO1YsUKK4YDAACAjfIn97W7BAApzpIgWlBQoPr6+rbPCwsL9eWXX+7Rx+/3q7m52YrhAAAAUlpJo90VxCb/NIIogNhY8pT5gAED9MUXX7R9fuihh+rtt9/Wxx9/rEMOOUQbN27UW2+9pf79+1sxHAAAQErrk+JBNJntzJa2uqVQB0eYtjhbz50Nx2FKxY0dn2kLoPssCaLHHHOMHnjgAdXW1qq4uFjnn3++lixZoquvvlr5+flqaGhQKBTSj370IyuGAwAAMUj12Tggmq1uyRf+1Jl2WqKsDax1E0SBeLIkiJ5++ukaN26c8vPzJUmDBg3SfffdpyeeeEJff/21Bg8erClTpuiYY46xYjgAABADZuMyQ8AX5XwTtxRobn/ue9TXpIjdM6GGJFcocr9mSVlh2gMOyVTHM6oAYmNJEHW5XCos3HNtw6GHHqpZs2ZZcXsAAAB0Us+RhdrrjH5avn1nxD45Zfl6d/P2sG39fj9CoeaQGnINFcSpxkRwhaSybZHb1/QJ376hMPpMKQBrJOwk4q+//loVFRWaMWNGooZMCV6vV16vV5LU0NBgczUAAGQ2K54vDNgYYpw5Tu3944EK5XW8NtW5V3bEtpxcl7bt5VBB+KwKADGLexCtrq7WY489ptdee03BYJAg+h0ej0cej0eSVFlZqfLycpsrAgAgc1n1fKHUuuFNohmGoeJD91LAkGRKzlD4IrY3+FXSPz9sW9BhSA7JZG0qgDiKKYiuWrVKDz/8sCorK+V0OnXYYYfpiiuu0H777afm5mb9/e9/1/PPP6+WlhYVFxfrggsusKpuAAAAy8X6fOFuu3ddtYMhQzKkLFMqqwsfJpc7pQPqwifpDYVSSzwLBADFEEQrKyt1ww03qKXlv39VLVu2TJWVlXrggQd06623auPGjW276J522mnKzo68BAQAACBZdPf5QgBA53Q7iP7P//yPWlpadNlll2nixImSpPnz5+uhhx7S1Vdfre3bt+vCCy/Uj370I+Xk5FhWMAAAsRpdyrnWsdjiZuddAEBsuh1EP/74Yx1++OF7LLf90Y9+pA8++EArV67UFVdcoXPPPdeSIgEAsNLo0gF2l5DSagiiAIAYdXtft+3bt+vAAw9sd33w4MGSpPHjx3e/KgAAAABA2up2EA0Gg+rRo0e767m5uZKk3r17d78qAAAAAEDa4rheAAAAAEBCxXR8y8KFC7VmzZo9rn311VeSpJ/97Gft+huGoVmzZsUyJAAAAAAgxcUURL/66qu24Pld77//frtrhsHByAAAAACQ6bodRJ9++mkr6wAAAAAAZIhuB9G9997byjoAAAAAABkipqW5AAAAQDgBXzByo1sKNAciNjtznDzSBaQ5gigAAAAs03NkofY6o5+Wb98ZsU9OWb7e3bw9YntWllND999LvfyEUSBdEUQBAABgCWeOU3v/eKBCec6O++6VHbEtJKkm1ySIAmmMIAoAAABLGIah4kP3UsCQZErOkBm23/YGv0r657e7boZM1X7RIBlSiNPugbRGEAUAAIBlDBmSIWWZUlld+BnN5U7pgLr2STPQHFB1nT/qbCmA9EAQBQAAAJKIaZoKRtvsSZJpsuETUhtBFAAAAEgSpmnq9Z8vV21lXYd9517wZsS2kiEF8swcSRhF0mL1PQAAAJAkgr5gp0JoR2rW1XU4qwrYiRlRAAAAJB0zZEZeehrlHNJQyCE5DEmpPxN41iPHy5UTfgfi+dOXadLsUe2uB3xBzbtkcbxLA2JGEAUAAEDSqf2iQdV1/rBt0c4hdTZny9XDpcJ9eirVw6grxylXbvi364ahiG1AKuBPLwAAAJKCM8eprCynQpJkRD9rNFpboDkgI2Aq1YMokM4IogAAAEgKhmFo6P57qSbXjHqOaLRzSKtXbVOoOaSi3nlxrBRArAiiAAAASBq9/IZ6+aPPZEY7h/SDGz+SJI1+8gQpNy4lArAAQRQAAKSdgEPaUBi5vcUZvj3AeQIAkBAEUQAAkDYcZus/TUktHYTKaO277wMAiA+CKAAASBvFjVKtWwp1sEdNs6SsUPg2h9l6HwBA/BBEAQBA2sj3t350ZE0fqWxb/OsBAITHkxAAAAAAgIRiRhQAAADtRNvwydwZuY0NnwB0BkEUAAAAbTq74VNHm0Gx4ROAaAiiAAAAaNPZDZ8ibfYkseETgI4RRAEAANCmMxs+bXOy2ROA2LCKHwAAAACQUARRAAAAAEBCEUQBAAAAAAlFEAUAAECXZPVkmxEAsSGIAgAAoEuyehBEAcSGIAoAAICMU8LxMoCtCKIAAADIOH0IooCtCKIAAAAAgIQiiAIAAAAAEoogCgAAAABIKIIoAAAAACChCKIAAAAAgIQiiAIAAAAAEoog2oHnn39el156qcaNG6dHHnnE7nIAAAAAIOURRDtQVFSkiy++WMcff7zdpQAAkBZKOL8RADIeQbQDxx13nI499ljl5eXZXQoAAGmhD0E0ZlvcdlcA2Iv/B1Kfy+4COqOpqUlPPfWU1q5dq08++UT19fW69dZbNWHChHZ9/X6/Hn74YS1cuFD19fUqKyvTtGnTNHLkSBsqBwAAsF6Nm0CPzMb/A6kvJWZEd+zYoYqKClVVVWnQoEFR+951112aO3euTjrpJF177bVyOBy66aabtGrVqgRVCwCIZnRpf7tLAAAANkuJGdGioiI999xzKioq0rp163TZZZeF7bd27Vq98cYbuuKKK3TeeedJkk455RRNnTpVc+bM0Zw5c9r6XnXVVVq9enXY+/z4xz9WeXm59V8IAECjSwfYXQIAALBZSgTR7OxsFRUVddhv8eLFcjqdmjx5ctu1nJwcTZw4UQ8++KCqq6tVWloqSfrzn/8ct3oBAAAAAJGlxNLczlq/fr323Xdfud17Pr180EEHSZI+++yzLt8zEAjI5/MpFAopGAzK5/MpGAxaUi8AAAAAZKKUmBHtrK1bt4adOd19rba2tsv3fPzxx1VRUdH2+RNPPBFxo6TOqK2t1datW8O2VVVVdeueAAAAAJBK0iqI+nw+ZWVltbuenZ3d1t5Vl1xyiS655JKYa9vtxRdf3CPYAgCAruEc0tj12NAkDci1uwwAGSytgmhOTo5aWlraXff7/W3tdps8ebJGjx4dtq2qqkozZ85McEUAAKQWjmyI3SEDCu0uAUCGS6sgWlRUpJqamnbXdy+FLS4uTnRJ7RQXFydFHQAAALDPuvlVGjKJ46yQudIqiA4aNEgfffSRGhsb99iwaO3atW3tAACgYwGHtCHCpFmLM3JbIK22QQTip5IgigyXVj8uxo4dq2AwqBdffLHtmt/v14IFCzR06NC2o1sAAEB4DrP1n6akFkf4D0VpM79zHwAAwkmZGdFnn31WDQ0Nbctsly5dqi1btkiSpkyZory8PA0dOlTjxo3Tgw8+qLq6OvXt21evvvqqNm/erJtvvtnO8gEASAnFjVKtWwoZkfs0S8oKRW53mK33AYBIWJqMlAmiTz/9tDZv3tz2+ZIlS7RkyRJJ0sknn6y8vDxJ0owZM1RaWqrXXntNDQ0NGjhwoO6++24NHz7cjrIBAEgp+f7Wj2jW9JHKtiWmHgDhDU7xEMfSZKRMEJ07d26n+uXk5OjKK6/UlVdeGeeKAAAAAHsQ4pDqUiaIpiuv1yuv1ytJamhosLkaAAAAAKlgizu1j7MiiNrM4/HI4/FIkiorK1VeXm5zRQAAAACSXU2KB9G02jUXAAAAAJD8CKIAAAAAgIQiiAIAAAAAEoogCgAAAABIKIIoAAAAACChCKIAAABdVJLCO1Umgx4bmuwuAYDNCKIAAABdlMpHJiSDQwYU2l0CYLt186vsLsFWBFEAAAAgw2R6CEoGlRn+38BldwGZzuv1yuv1SpIaGhpsrgYAAACZoHJ+lYZM6m93GchgBFGbeTweeTweSVJlZaXKy8ttrggAAAAA4ouluQAAAACAhCKIAgAAAAASiiAKAAAAAEgogigAAABSCueQAqmPIAoAAICUwjmkQOojiAIAAADoko83brO7BKQ4jm8BAAAA0CW7ynpKwfjce2e2tNUthYzIfVqc0oYoE+MOUypulPL91tcHaxBEAQAAACSNrW7J5+y4X0sHaztr3QTRZEYQBQAAAJA0ds+EGpJcofB9miVlRWgLOCRT0WdUYT+CqM28Xq+8Xq8kqaGhweZqAAAAgOTgCkllER5FXdMnctuGwo5nS2E/gqjNPB6PPB6PJKmyslLl5eU2VwQAAAAA8cXvCgAAAJBx1s2vsrsEwFZb3PaOTxAFAABAxqkkiCLD1RBEAQAAAACZhCAKAAAAAEgogigAAAAAIKEIogAAAACQYPmT+9pdgq0IogAAAACQYPmnZXYQ5RxRAAAAoIvWza/SkEn97S4DaWpntrTVLYWMyH1anNKGwsjtDlMqbpTy/dbXZwVmRAEAAIAu4vgXxNNWt+RzSi2OyB9S9HafU6q1+YiWaJgRBQAAAIAksnsm1JDkCoXv0ywpK0JbwCGZij6jajeCKAAAAADLmKapoC/YQR8p0BwI2xYKOSSHodYYltlcIalsW/i2NX0it20o/O+sabIiiNrM6/XK6/VKkhoaGmyuBgAAAOg+0zT1+s+Xq7ayrsO+cy94M+z1fr8foZx9eqpwn54ijKYvgqjNPB6PPB6PJKmyslLl5eU2VwQAAAB0T9AX7FQI7UigOSAzZIogGlnLroBSOc6lbuUAAABAEoplaWqgg9elkrMeOV6uHGfYtvnTl2nS7FHtrgd8QS3fvjPepaWFliaCKAAAADJISaPdFSQvK5ampgtXjlOu3PBxwzAUsQ2ZIckfYQUAAECy6UMQjaizS1P3One/qO0lQwrkjDCbCKQDfg0BAAAAxEG0pakfuQM6afKgiK915jhlGDwfmao6szxb7szeOZggCgAAAMRBtKWpUoClqWmqs8uzy+Ydl9E7B/OnHwAAIAkFHK1nAYbT4ozcFuDBK8BW7BzcOQRRAACAJOIwW/9pKvqB9B0dVr/7PgDsE3V5tiOgc548od31TNk5mCAKAACQRIobpVq3FIoyCdIsKSsUud1htt4HgL2SeXm23eeQEkQBAACSSL6/9SOaNX2ksm2JqQdAerL7HFKeIgAAAABSzBa33RUAsSGIAgAAACmmhiCKFEcQBQAAAIAuWje/yu4SUhpBFAAAAAC6qJIgGhM2K7KZ1+uV1+uVJDU0NNhcDQAAAADEH0HUZh6PRx6PR5JUWVmp8vJymysCAAAAgPgiiAIAAABpKOALRmwzTSnQHIjY7sxxyjCiHGYLxIggCgAAAKSheZcsjto+94I3I7aVDCmQZ+ZIwijihs2KAAAAgDThzHGqZEhBh/32One/qO016+oUjDKjCsSKGVEAAAAgTRiGIc/MkR2GyI/cAZ00eVC76wFfsMOZVMAKBFEAAAAgjRiGIVduR2/zA53oA8QPf/oAAAAAIA0FHNKGwvBt5s7IbcFQ/GMiQRQAAAAA0ojDbP2nKaklyq5AkdrMBGxSRRAFAAAAgDRS3CjVuqVQB3kyKxT+ejBkWl/UdxBEAQAAALQT7RxSucOfQxr1NUiYfH/rRzTbnFLZtvBtzb7IZ8xahSAKAAAAoE3PkYXa64x+Wr59Z8Q+OWX5enfz9rBt/X4/QqHmkBpyDRXEqUakPoIoAAAAAEmt55Du/eOBCuU5O+67V3bEtpxcl7bt5VBB+KwKEEQBAAAAtDIMQ8WH7qWAIcmUnBGeFdze4FdJ//ywbUGHITkks6MHFJHRCKIAACDjlDTaXQGQvAwZkiFlmVJZXfgwudwpHVAXfsvVDYVSSzwLRFogiAIAgIzThyAKII52P2f7+d4OOSIdkRLhHM9QyCFnc+Rlz+mCIAoAAAAAFtrrjH7K2idXQaehYJQVymHP8TRaZ6QlyRHheJV0QBAFAAAAAAs5cv+TMM3WJc6RhDvHMxQyFdzuV6g5pKLeefEpMAkQRG3m9Xrl9XolSQ0NDTZXAwAAAMAqzpAZ8TnbSOd4BppDWn7jR5Kk0U+eIOXGs0L7EERt5vF45PF4JEmVlZUqLy+3uSIAAAAgvvIn97W7BNgswqOzAAAAABAf+acRRDMdQRQAAAAAkFAszQUAAACAJBTwBSM3uqVAcyBiszPHKcOIsmWvzQiiAAAAAJCE5l2yOGJb2bzjNPeCNyO2lwwpkGfmyKQNoyzNBQAAAIAk4cxxqmRIQcz3qVlXp2C0GVWbMSMKAAAAAEnCMAx5Zo7sMER+5AjonCdPaHc94AtGnUlNFgRRAAAAAEgihmHIldtRVAt0ok/yYmkuAAAAgJRivr/N7hIQI4IoAAAAgJSy4Xcf210CYpS6c7kAAABABFGPvZBkmuGPvgiFHJLDkJScO40CXdHd4186+v/HCgRRAAAApJ3ObNYS7uiLfr8foZx9eqpwn54ijCKZ1b/0lXRqWdQ+sRz/cvGPz+x2bZ3B0lwAAACkBauOvQg0B2SGzNgLAuKo/sWvwl636v+DeGNGFAAAAGmhs8deSNL86cs0afaoPa4FfEEt374zXuUBCRHr8S+S1Ozzx6O0PRBEAQAAkDY6d+yFZBhK6aMvgGhiPf7FZcT/GVGW5gIAAADIOOvmV9ldQkYjiAIAAADIOJUEUVuxHgEAAAD4DjNkRjzaQop8/Esijr0A0gFBFAAAAPiO6lXb9MGNH0XtE+3oCwDRsTQXAAAAUOuxF9l5WZbcq2RIgZw5TkvuBaQjZkQBAAAAte40WnRgbwUMyRk0dUyEoy2k8Me/fJszxynDMOJRJpAWCKIAAADAfxgyJENyOAy5ciMvHuT4l/RlmmanzqLlOeHY8H8PAAAAAKg1hL7+8+WqrazrVP9Izwn3+/0IC6tKTwRRm3m9Xnm9XklSQ0ODzdUAAAAAmSvoC3Y6hO517n7a/vQXEdtduS4ZDpZnR0IQtZnH45HH45EkVVZWqry83OaKAAAAAJz1yPFyRdlw6iN3QCdNHhS27fO9HQq6DBkhgmgkBFEAAAAA+A5XjrOD54ADEdsdDoknRaMjiAIAAAAW2pktbXVL0SbDzJ3ShsLI7Q5TKm6U8v3W1wckA4IoAAAAYKGtbsnXiSNEWyJvyitJqnUTRJG+CKIAAACAhXbPhBqSXKHI/bIitAUckqnoM6pAqiOIAgAAAHHgCkll28K3bXNGbttQ2PFsKZDq+CMOAAAAAEgogigAAAAAJFhWz8xenEoQBQAAAIAEy+qR2UE0s796AAAAIEkFHJGPeGlxcvwLUhtBFAAAAEgiDrP1n6aib1rE8S9IZQRRAAAAIIkUN7aGyGjHtzSL41+Q2giiAAAAQBLJ93c8k7mmD8e/ILXxRxQAAAAAkFAEUQAAAAAJlelHl4AgCgAAACDBMv3oEhBEAQAAAAAJxq8iAAAAgDQU7RxSc2fktgBTVUgAgigAAACQRqw6h3T3fYB4IIgCAAAAaaQz55BKkc8hlVpDaHGjtXUB30YQBQAAANJIZ84h3eaMfA4pkAisAAcAAAAAJBRBFAAAAAAyTP1LX9k6PkEUAAAAADJM/YsEUQAAAABABiGIAgAAAAASiiAKAAAAAEgogigAAAAAIKEIogAAAACAhCKIAgAAAAASiiAKAAAAAEgogigAAAAAIKFcdheQ6bxer7xerySpoaHB5moAAAAAawQc0obC8G0tzvBtoZBDzubs+BaGpEAQtZnH45HH45EkVVZWqry83OaKAAAAgO5zmK3/NCW1RFl/GbbNMCTjP/cJWV0ZkglBFAAAAIBlihulWrcUMiL3aZaUFSZohkKmgtv9CjWHVNQ7L241wn4EUQAAAACWyfe3fkSzpo9Utq399UBzSMtv/EiSNPrJE6TcOBSIpMBmRQAAAACAhCKIAgAAAAASiiAKAAAAAEgonhEFAAAAkHQCvmDENtOUAs2BsG2hkENyGGrbfhdJiSAKAAAAIOnMu2Rx1Pa5F7wZ9nq/349Qzj49VbhPTxFGkxdLcwEAAAAkBWeOUyVDCmK+T6A5IDNkxl4Q4oYZUQAAAABJwTAMeWaOVDDKslxJmj99mSbNHtXuesAX1PLtO+NVHixEEAUAAACQNAzDkCs3ekwxDHXYB8mNpbkAAAAAkGAljXZXYC+CKAAAAAAkWJ8MD6LMZwMAAABIO2bIjHjEixT+CJhoR8bAWgRRAAAAIMGyerqkerurSG/Vq7bpgxs/iton0hEwiD+W5gIAAAAJltWD+aB4cOY4lZ2XFfN9SoYUyJnjtKAiRML/AQAAAADSgmEYKjqwtwKG5AyaOubJEyL2jXQEjNQaaA3DiFeZEEEUAAAAQBoxZEiG5HAYcuVGXgDKETD2YmkuAAAAACChCKIAAAAAkGIGT+pvdwkxIYgCAAAAQIoZQhAFAAAAAKDzeDoXAAAAAP5jZ7a01S2FOtg019wpbSgM3xZguq9DBFEAAAAA+I+tbsnXySNEWzoInA4z9nrSFUEUAAAAAP5j90yoIckVit43K0q7w5SKGy0rK+0QRAEAAADgO1whqWxb5PZtzujtiI7VywAAAACQYew+/oUgCgAAAAAZxu7jXwiiAAAAAICEIogCAAAAGSarJ1vFwF4EUQAAACDDZPUgiMJeBFEAAAAAQEIRRAEAAAAACUUQBQAAAAAkFEEUAAAAAJBQBFEAAAAAQEIRRAEAAAAACUUQBQAAANAlPTY02V0CUhxBFAAAAECXHDKg0O4SkOIIogAAAACAhCKIAgAAAAASiiAKAAAAAEgogigAAAAAIKEIogAAAACAhCKIAgAAAAASiiAKAAAAAEgogigAAAAAIKEIogAAAACAhHLZXUCy8/v9+sMf/qAPPvhADQ0NGjBggK6++modcsghdpcGAAAAACmJGdEOBINB7b333vrzn/+sBQsW6Oyzz9att96qpqYmu0sDAAAAgJREEO1Ajx49NHXqVJWWlsrhcOjEE0+Uy+XSpk2b7C4NAAAAAFJSyizNbWpq0lNPPaW1a9fqk08+UX19vW699VZNmDChXV+/36+HH35YCxcuVH19vcrKyjRt2jSNHDky5jo2bdqk+vp69e3bN+Z7AQAAAEAmSpkZ0R07dqiiokJVVVUaNGhQ1L533XWX5s6dq5NOOknXXnutHA6HbrrpJq1atSqmGnw+n2bOnKkLLrhAeXl5Md0LAAAAADJVysyIFhUV6bnnnlNRUZHWrVunyy67LGy/tWvX6o033tAVV1yh8847T5J0yimnaOrUqZozZ47mzJnT1veqq67S6tWrw97nxz/+scrLy9s+DwQC+tWvfqW+fftq6tSp1n1hAAAAAJBhUiaIZmdnq6ioqMN+ixcvltPp1OTJk9uu5eTkaOLEiXrwwQdVXV2t0tJSSdKf//znTo0dCoU0c+ZMGYahGTNmyDCM7n0RAAAAAIDUCaKdtX79eu27775yu917XD/ooIMkSZ999llbEO2se++9V1u3btW9994rlyu2b1ltba22bt0atu2zzz6TJFVVVcU0hl0aGptUu6Va2dlZdpcCoJv8/hZt+Owz5bl72l0KuikRfxfX+6Ut2+N2e3QC/w1i589p0Jbqb9pd37FLCjgkV0jasrPrr+/sPWL9b2j362MV6/ixfv+j3aOzr290+LUllN3V0lOC39+iyspK9e/fX7m5uXEZwzBN04zLneNo99LccJsVXXTRRdprr730xz/+cY/rGzdu1IUXXqgbb7xRp59+eqfH2rx5s8455xxlZ2fL6XS2XZ81a5aGDRvW5dofeeQRVVRUdPl1AAAAAJBI99xzj44++ui43DvtZkR9Pp+ystr/Fjg7O7utvSv23ntvLVmyxJLaJGny5MkaPXp02LZPPvlEf/jDH3TzzTd3uCETUtf999+va665xu4yklI6fW+S+Wuxs7ZEjh3vsay+v1X3q6qq0syZM/WLX/xC/fv3t6AyJKNk/jvGbun0vUnmr4WfJcl5f6t/lvTo0cOCqsJLuyCak5OjlpaWdtf9fn9bu52Ki4tVXFwctc+gQYM0ePDgBFWERMvLy+O/bwTp9L1J5q/FztoSOXa8x7L6/lbfr3///kn7ZxCxS+a/Y+yWTt+bZP5a+FmSnPe3+n7xzE4pc3xLZxUVFYV9BnP3tY5CIAAAAAAgvtIuiA4aNEhffvmlGhsb97i+du3atnbATh6Px+4SklY6fW+S+Wuxs7ZEjh3vsay+fzL/mUHy4c9LZOn0vUnmr4WfJcl5/2T+M/NdaRdEx44dq2AwqBdffLHtmt/v14IFCzR06NAu75gLWC2V/oJItHT63iTz18Kbh+S8fzL/mUHy4c9LZOn0vUnmr4WfJcl5/2T+M/NdKfWM6LPPPquGhoa2ZbZLly7Vli1bJElTpkxRXl6ehg4dqnHjxunBBx9UXV2d+vbtq1dffVWbN2/WzTffbGf5AAAAAAClWBB9+umntXnz5rbPlyxZ0raj7cknn6y8vDxJ0owZM1RaWqrXXntNDQ0NGjhwoO6++24NHz7cjrIBAAAAAN+SkueIpqva2lq9+OKLmjx5MpsqAQC6hZ8lAIBYJeJnCUEUAAAAAJBQabdZEQAAAAAguRFEAQAAAAAJRRAFAAAAACQUQRQAAAAAkFAEUQAAAABAQhFEAQAAAAAJRRAFAAAAACQUQRQAAAAAkFAEUQAAAABAQhFEAQAAAAAJRRAFAAAAACSUy+4C0DXPP/+8XnrpJf373//Wj3/8Y11yySV2lwQASCF+v19/+MMf9MEHH6ihoUEDBgzQ1VdfrUMOOcTu0gAAKeSee+7R0qVL1dzcrNLSUl122WUaPXp0p19vmKZpxrE+WOztt9+WYRjyer3ab7/9CKIAgC7ZtWuXnn76aU2YMEElJSV666239Mc//lFPP/20evbsaXd5AIAUUVVVpX322UfZ2dn65JNPdMMNN+ipp55S7969O/V6luammOOOO07HHnus8vLy7C4FAJCCevTooalTp6q0tFQOh0MnnniiXC6XNm3aZHdpAIAU0r9/f2VnZ0uSDMNQS0uLamtrO/16lubGUVNTk5566imtXbtWn3zyierr63XrrbdqwoQJ7fr6/X49/PDDWrhwoerr61VWVqZp06Zp5MiRNlQOAEgW8f5ZsmnTJtXX16tv377x/DIAADaK18+SP/zhD1qwYIH8fr++//3va+DAgZ2uiRnRONqxY4cqKipUVVWlQYMGRe171113ae7cuTrppJN07bXXyuFw6KabbtKqVasSVC0AIBnF82eJz+fTzJkzdcEFF7DSBgDSWLx+ltxwww167bXXdN9992nkyJEyDKPTNRFE46ioqEjPPfec/vnPf+qKK66I2G/t2rV64403dNlll+nKK6/U5MmT9cc//lF777235syZk8CKAQDJJl4/SwKBgH71q1+pb9++mjp1ahy/AgCA3eKZS5xOp4444gitWLFC7777bqdrIojGUXZ2toqKijrst3jxYjmdTk2ePLntWk5OjiZOnKg1a9aouro6nmUCAJJYPH6WhEIhzZw5U4ZhaMaMGV36DTYAIPUkIpcEg0F99dVXna6JIJoE1q9fr3333Vdut3uP6wcddJAk6bPPPmu7FggE5PP5FAqFFAwG5fP5FAwGE1ovACD5dOVnyb333qutW7fq9ttvl8vFdhEAgFad/VnS0NCg119/XU1NTQoEAnrrrbf00UcfadiwYZ0ei58+SWDr1q1hf0Ox+9q3d596/PHHVVFR0fb5E088EfFBYwBA5ujsz5LNmzdr/vz5ys7O3uM33rNmzerSGwgAQPrp7M8SwzA0f/583XfffTJNU3379tUvf/lLHXDAAZ0eiyCaBHw+n7Kystpd370dss/na7t2ySWXcHYoAKCdzv4s2XvvvbVkyZKE1gYASA2d/Vnidrs1e/bsmMZiaW4SyMnJUUtLS7vrfr+/rR0AgGj4WQIAiFUif5YQRJNAUVGRtm7d2u767mvFxcWJLgkAkGL4WQIAiFUif5YQRJPAoEGD9OWXX6qxsXGP62vXrm1rBwAgGn6WAABilcifJQTRJDB27FgFg0G9+OKLbdf8fr8WLFigoUOHqrS01MbqAACpgJ8lAIBYJfJnCZsVxdmzzz6rhoaGtunspUuXasuWLZKkKVOmKC8vT0OHDtW4ceP04IMPqq6uTn379tWrr76qzZs36+abb7azfABAEuBnCQAgVsn2s8QwTdO09I7YwznnnKPNmzeHbXv66ae1zz77SGrdgerhhx/WwoUL1dDQoIEDB2ratGk66qijElkuACAJ8bMEABCrZPtZQhAFAAAAACQUz4gCAAAAABKKIAoAAAAASCiCKAAAAAAgoQiiAAAAAICEIogCAAAAABKKIAoAAAAASCiCKAAAAAAgoQiiAAAAAICEIogCAAAAABKKIAoAANrMnTtXJ5xwgr755pu2a6+88orGjBmjV155xcbK/mv+/PkaO3asNmzYYHcpAIBuIogCANLWN998ozFjxkT9OOecc+wuM2nU19fr8ccf16mnnqp99tknrmO9//77GjNmjG688cYO+/7mN7/RmDFj9Prrr0uSxo8fr9LSUs2ZMyeuNQIA4sdldwEAAMRb3759ddJJJ4Vty8vLS3A1yWvu3LnauXOnzjvvvLiPdeSRR6q0tFQrVqxQdXW1SktLw/ZraGjQ22+/rby8PI0ZM0aS5HK5dM4552j27NlavXq1Dj300LjXCwCwFkEUAJD2+vbtq0suucTuMpJaIBDQ/Pnzdeihh6pv375xH8/hcGjChAmqqKjQq6++qosuuihsP6/XK5/Pp1NPPVU5OTlt10888UQ98MADeuGFFwiiAJCCWJoLAMC3jBkzRtdee622bdumO++8U6eddpo8Ho8uv/xyffTRR2Ff09TUpEceeUQXXnihPB6PTj31VN14441atWpVu77XXnutxowZI5/Pp4ceekg//OEPNW7cOD3yyCNtfRYvXqzy8nJ5PB6dfvrpmjVrlurr63XOOefssZT4jjvu0JgxY7R27dqwdT388MMaM2aMvF5vh1/3+++/r61bt2rs2LEd9t1ty5Ytuuiii+TxeLRo0aK269u3b9f999+v8847TyeeeKJOO+00/eIXv9C///3vPV5/6qmnyjAMvfLKKzJNM+wYCxYskCRNnDhxj+sFBQUaMWKEFi1apKampk7XDABIDgRRAAC+o6GhQVdddZU2btyok08+WWPGjFFlZaV++tOftgtTO3fu1BVXXKGKigrl5+fr9NNP15gxY/Tpp59q+vTpevvtt8OO8ctf/lKvvvqqRowYoR/84Adtz2S+/PLL+uUvf6kvv/xSp5xyisaPH681a9bohhtuUCAQ2OMekydPbnvNdwWDQS1YsEC9e/duW9IazYoVKyRJBx98cMffIEkbN27UlVdeqS1btuiee+5pC7BfffWVpk2bpn/+85/63ve+p7POOkvf//739f777+uKK67YIzTvvffeOuKII/T111+HDfn//ve/tW7dOh1wwAE68MAD27UffPDB8vv9+vjjjztVMwAgebA0FwCQ9r766qs9Zhy/7eCDD9bRRx+9x7XPPvtMZ5xxhq677jo5HK2/sz388MM1a9YszZs3Tz/96U/b+v7xj3/U559/rptuukmTJk1qu759+3aVl5frnnvu0VFHHbXHslJJ2rp1qx599FH16tWr7Vp9fb3+9Kc/qUePHnrwwQfVr18/SVJ5ebl++tOfqrKyUnvvvXdb/2HDhmnAgAF64403dPXVV6tHjx5tbe+//75qamp09tlnKzs7u8Pv0erVq+VwODRo0KAO+65Zs0Y333yzXC6X7r///j1ec+edd2rbtm269957ddRRR7Vdv/DCC1VeXq5Zs2apoqKi7frEiRP1wQcfaMGCBTr88MP3GCfSbOhugwcPliR9/PHHe4wFAEh+zIgCANLeV199pYqKirAf//rXv9r179Gjhy6//PK2ECq17tTqdDq1bt26tmt1dXV66623dPjhh+8RQiVpr7320nnnnae6urq22cZvu/jii/cIoZL0zjvvaNeuXTr11FPbQqjUujnPtGnTwn5tkydPVlNTk9544409rs+fP1+SdNppp0X6tuyhpqZGeXl5HYbWd999V9dff73y8/P1l7/8ZY8Q+umnn+rjjz/WKaec0i4Y9uvXT5MmTdK///3vPWaVjzvuOPXu3VuLFy9WY2Nj2/VAIKCFCxcqOzs74kZThYWFklqXCAMAUgszogCAtHfUUUfp3nvv7XT/fffdVz179tzjmsvlUmFhoRoaGtqurVu3TsFgUC0tLWFnXL/88ktJUlVVlUaNGrVH20EHHdSu/+5zMQ877LB2bUOHDpXT6Wx3/ZRTTtHf/vY3zZ8/vy0Mb9u2TcuWLdMhhxyiAQMGdPDVttq5c6dKSkqi9nnrrbe0fPlylZWV6Z577tFee+21R/vuZbfbt28P+/344osv2v45cOBASWoLms8884y8Xq9OP/10SdLSpUtVV1cnj8ej/Pz8sPXsvr5jx45OfY0AgORBEAUA4DvcbnfY606nU6FQqO3znTt3Smpd1rp69eqI92tubm53bfds3rftnhH8bsCTWneZ7d27d7vr+fn5GjdunF599VX9+9//1sCBA/XKK68oGAx2ejZUknJycuT3+6P2WbNmjYLBoA477LCwNe7+frz77rt69913I95n165de3w+ceJEPfPMM1qwYEFbEO1oWa6ktnpzc3Oj1g0ASD4EUQAAuml3YD333HN11VVXdem1hmFEvN/27dvbtYVCIe3YsSPsrOXpp5+uV199VS+99JKmT5+ul19+WW63W+PGjet0Pb1791ZNTU3UPpdddpneeecdPfPMM3I6ne2+5t31T58+XVOmTOn02GVlZRoyZIg++eQTff7558rPz9f777+vffbZp91zo9+2O/gWFBR0eiwAQHLgGVEAALppyJAhMgxDa9asseR+ZWVlkhR2dvWTTz5RMBgM+7qDDz5YZWVlev311/X+++/ryy+/1EknndSlmcKBAwfK7/eruro6Yp/s7GzdeeedOuaYY/T000/rgQce2KN993Lj7nw/ds98vvzyy3rttdcUDAbbjneJZPdS393LfAEAqYMgCgBANxUVFWncuHH6+OOP9b//+79hz8Jcu3Zt2KW54Rx77LHq0aOHXn75ZX311Vdt1wOBgB5++OGor508ebJ27typ3/3ud5LUbvOkjgwfPryt3miys7M1c+ZMjRo1SnPnztX999/f1jZ06FANHTpUb7zxRrvNk6TWWd2VK1eGva/H41Fubq4WLlyoBQsWyOFwaPz48VFr+eSTT/aoHQCQOliaCwBIe9GOb5GkCy64oN3xKp11ww03aNOmTZozZ45ee+01HXzwwcrLy1NNTY3WrVunL7/8Us8991ynZifz8/N19dVX65577lF5eblOOOEEud1uvffee8rOzlZxcXHEGcKTTz5Zf/3rX1VbW6vBgweHPXczmmOPPVZ//vOf9cEHH3S4pDcrK0t33HGHfvWrX+mf//ynTNPUtddeK0n61a9+peuuu0633367nnnmGR1wwAHKycnRli1b9PHHH2vHjh3yer3t7ul2u3X88cfrtddeU11dnY4++miVlpZGrME0Ta1YsUL9+/ffY4dhAEBqIIgCANLe7uNbIjn77LO7HUR79eqlv/zlL5o3b57efPNNeb1ehUIhFRYWatCgQbrooovCbjIUyWmnnab8/Hw98cQTevXVV+V2uzV69GhdfvnlOvvss9W3b9+wr3O73TruuOO0cOHCLs+GStI+++yjkSNHatGiRZo+fXqHx7jsDqO//vWv9cwzz8g0TU2fPl3f+9739PDDD+vpp5/W22+/rVdeeUUOh0NFRUUaNmyYxo4dG/GeEydO1GuvvSZJOvXUU6OO/3//93+qrq7WNddc0+WvFQBgP8MMt44IAAAklS+//FLnn3++xo0bp9tvvz1sn4suukibN2/WvHnzIu78G82KFSt0/fXX6xe/+IVOPvnkWEuOqzvuuEP/+te/9L//+78Rj3cBACQvnhEFACCJ1NfXtztGxefztW0MdNxxx4V93XvvvafPP/9cHo+nWyFUko444ggdffTRevzxx/c4pibZbNq0SW+++aYuvPBCQigApCiW5gIAkERWrlypu+++WyNHjlSfPn20Y8cOffjhh9q8ebMOP/xwnXDCCXv0f/7557VlyxbNnz9f2dnZuuCCC2Ia/9prr9Xrr7+umpqaqM9o2mnLli2aOnWqzjzzTLtLAQB0E0tzAQBIIps2bdLDDz+sjz/+WHV1dZKkvn376oQTTtAPf/jDds+ynnPOOaqpqVG/fv10+eWXa9SoUTZUDQBA1xBEAQAAAAAJxTOiAAAAAID/b7+OBQAAAAAG+VvPYldZtBJRAAAAViIKAADASkQBAABYiSgAAAArEQUAAGAlogAAAKxEFAAAgJWIAgAAsAr7kps2r4aCzgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"10-12.5\", \"56.0-100.0\")\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0036e72",
   "metadata": {},
   "source": [
    "which will set the energy range 10-12.5 keV and 56-100 keV to be\n",
    " used in the analysis. Note that there is no difference in saying 10 or 10.0.\n",
    "\n",
    "##### Channel selections:\n",
    "\n",
    "They are specified as 'c[channel min]-c[channel max]'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7e24673",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:11.913927Z",
     "iopub.status.busy": "2022-09-27T11:52:11.913676Z",
     "iopub.status.idle": "2022-09-27T11:52:12.567798Z",
     "shell.execute_reply": "2022-09-27T11:52:12.567017Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range c10-c12 translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">10</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">12</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                  </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range c10-c12 translates to channels \u001b[0m\u001b[1;37m10\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m12\u001b[0m\u001b[1;38;5;251m                                 \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=315905;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=137559;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range c20-c50 translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">20</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">50</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                  </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range c20-c50 translates to channels \u001b[0m\u001b[1;37m20\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m50\u001b[0m\u001b[1;38;5;251m                                 \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=968631;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=189395;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"c10-c12\", \"c20-c50\")\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f793bf8e",
   "metadata": {},
   "source": [
    "This will set channels 10-12 and 20-50 as active channels to be used in the analysis\n",
    "\n",
    "##### Mixed channel and energy selections:\n",
    "\n",
    "You can also specify mixed energy/channel selections, for example to go from 0.2 keV to channel 10 and from channel 20 to 1000 keV:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "871d4ac9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:12.571673Z",
     "iopub.status.busy": "2022-09-27T11:52:12.571171Z",
     "iopub.status.idle": "2022-09-27T11:52:13.235911Z",
     "shell.execute_reply": "2022-09-27T11:52:13.235077Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:12 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">0.2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-c10 translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">0</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">10</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                   </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:12\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range \u001b[0m\u001b[1;37m0.2\u001b[0m\u001b[1;38;5;251m-c10 translates to channels \u001b[0m\u001b[1;37m0\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m10\u001b[0m\u001b[1;38;5;251m                                  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=500559;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=835297;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range c20-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1000</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">20</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">49</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                 </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range c20-\u001b[0m\u001b[1;37m1000\u001b[0m\u001b[1;38;5;251m translates to channels \u001b[0m\u001b[1;37m20\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m49\u001b[0m\u001b[1;38;5;251m                                \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=24843;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=704530;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"0.2-c10\", \"c20-1000\")\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ccdaed6",
   "metadata": {},
   "source": [
    "##### Use all measurements (i.e., reset to initial state):\n",
    "\n",
    "Use 'all' to select all measurements, as in:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "decc4283",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:13.239392Z",
     "iopub.status.busy": "2022-09-27T11:52:13.239142Z",
     "iopub.status.idle": "2022-09-27T11:52:13.858600Z",
     "shell.execute_reply": "2022-09-27T11:52:13.857866Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"all\")\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab6ba24",
   "metadata": {},
   "source": [
    "##### Exclude measurements:\n",
    "\n",
    "Excluding measurements work as selecting measurements, but with the \"exclude\" keyword set to the energies and/or channels to be excluded. To exclude between channel 10 and 20 keV and 50 keV to channel 120 do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2ca5e9f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:13.861912Z",
     "iopub.status.busy": "2022-09-27T11:52:13.861673Z",
     "iopub.status.idle": "2022-09-27T11:52:14.533700Z",
     "shell.execute_reply": "2022-09-27T11:52:14.532918Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:13 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range c2-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">20</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> translates to excluding channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">7</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1262</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:13\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range c2-\u001b[0m\u001b[1;37m20\u001b[0m\u001b[1;38;5;251m translates to excluding channels \u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m7\u001b[0m\u001b[1;38;5;251m                           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=946679;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=672805;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\u001b\\\u001b[2m1262\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">50</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-c40 translates to excluding channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">17</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">40</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                         </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1262</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range \u001b[0m\u001b[1;37m50\u001b[0m\u001b[1;38;5;251m-c40 translates to excluding channels \u001b[0m\u001b[1;37m17\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m40\u001b[0m\u001b[1;38;5;251m                        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=29567;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=83555;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\u001b\\\u001b[2m1262\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Now using </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">20</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> channels out of </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">50</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1267\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1267</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Now using \u001b[0m\u001b[1;37m20\u001b[0m\u001b[1;38;5;251m channels out of \u001b[0m\u001b[1;37m50\u001b[0m\u001b[1;38;5;251m                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=307319;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=900166;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1267\u001b\\\u001b[2m1267\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(exclude=[\"c2-20\", \"50-c40\"])\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6528d0dc",
   "metadata": {},
   "source": [
    "##### Select and exclude:\n",
    "\n",
    "Call this method more than once if you need to select and exclude. For example, to select between 0.2 keV and channel 10, but exclude channel 30-50 and energy, do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7c1fd80f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:14.536876Z",
     "iopub.status.busy": "2022-09-27T11:52:14.536631Z",
     "iopub.status.idle": "2022-09-27T11:52:15.411340Z",
     "shell.execute_reply": "2022-09-27T11:52:15.410611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:14 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">0.2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-c10 translates to channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">0</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">10</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                   </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1210</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:14\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range \u001b[0m\u001b[1;37m0.2\u001b[0m\u001b[1;38;5;251m-c10 translates to channels \u001b[0m\u001b[1;37m0\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m10\u001b[0m\u001b[1;38;5;251m                                  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=461719;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=631348;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1210\u001b\\\u001b[2m1210\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Range c30-c50 translates to excluding channels </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">30</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">-</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">50</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1262</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Range c30-c50 translates to excluding channels \u001b[0m\u001b[1;37m30\u001b[0m\u001b[1;38;5;251m-\u001b[0m\u001b[1;37m50\u001b[0m\u001b[1;38;5;251m                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=178696;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=36925;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1262\u001b\\\u001b[2m1262\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Now using </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">11</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> channels out of </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">50</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1267\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1267</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Now using \u001b[0m\u001b[1;37m11\u001b[0m\u001b[1;38;5;251m channels out of \u001b[0m\u001b[1;37m50\u001b[0m\u001b[1;38;5;251m                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=215299;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=160293;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1267\u001b\\\u001b[2m1267\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"0.2-c10\", exclude=[\"c30-c50\"])\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6443a6ea",
   "metadata": {},
   "source": [
    "### Rebinning\n",
    "\n",
    "We can rebin the spectra based off a minimum total or background rate requried. This is useful when using profile likelihoods, however, we do not change the underlying likelihood by binning up the data. For more information, consult the statistics section.\n",
    "\n",
    "To rebin a spectrum based off the total counts, we specify the minimum counts per bin we would like, say 100:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "01998c96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:15.414585Z",
     "iopub.status.busy": "2022-09-27T11:52:15.414220Z",
     "iopub.status.idle": "2022-09-27T11:52:19.031819Z",
     "shell.execute_reply": "2022-09-27T11:52:19.031071Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:18 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Now using </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">15</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> bins                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1673\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1673</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:18\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Now using \u001b[0m\u001b[1;37m15\u001b[0m\u001b[1;38;5;251m bins                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=220115;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=967407;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1673\u001b\\\u001b[2m1673\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.set_active_measurements(\"all\")\n",
    "\n",
    "spectrum_generator.rebin_on_source(100)\n",
    "\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "182ab004",
   "metadata": {},
   "source": [
    "We can remove the rebinning this way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "37d73e36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:19.035300Z",
     "iopub.status.busy": "2022-09-27T11:52:19.034818Z",
     "iopub.status.idle": "2022-09-27T11:52:19.039531Z",
     "shell.execute_reply": "2022-09-27T11:52:19.038922Z"
    }
   },
   "outputs": [],
   "source": [
    "spectrum_generator.remove_rebinning()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5ba7812",
   "metadata": {},
   "source": [
    "Instead, when using a profile likelihood which requires at least one background count per bin to be valid, we would call:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e336bc9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:19.042311Z",
     "iopub.status.busy": "2022-09-27T11:52:19.042082Z",
     "iopub.status.idle": "2022-09-27T11:52:19.875705Z",
     "shell.execute_reply": "2022-09-27T11:52:19.874972Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:19 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Now using </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">19</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> bins                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1673\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1673</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:19\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Now using \u001b[0m\u001b[1;37m19\u001b[0m\u001b[1;38;5;251m bins                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=156156;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=748951;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#1673\u001b\\\u001b[2m1673\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_generator.rebin_on_background(10)\n",
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fd6a9fd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:19.879490Z",
     "iopub.status.busy": "2022-09-27T11:52:19.878836Z",
     "iopub.status.idle": "2022-09-27T11:52:19.883026Z",
     "shell.execute_reply": "2022-09-27T11:52:19.882430Z"
    }
   },
   "outputs": [],
   "source": [
    "spectrum_generator.remove_rebinning()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edd9df3f",
   "metadata": {},
   "source": [
    "### Fitting\n",
    "\n",
    "To fit the data, we need to create a function, a PointSouce, a Model, and either a JointLikelihood or BayesianAnalysis object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d4fcc49c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:19.886615Z",
     "iopub.status.busy": "2022-09-27T11:52:19.886214Z",
     "iopub.status.idle": "2022-09-27T11:52:20.006458Z",
     "shell.execute_reply": "2022-09-27T11:52:20.005652Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=342350;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=157742;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mysource.spectrum.main.Blackbody.K</th>\n",
       "      <td>(9.2 +/- 0.6) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV3 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mysource.spectrum.main.Blackbody.kT</th>\n",
       "      <td>(1.99 +/- 0.04) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    result              unit\n",
       "parameter                                                                   \n",
       "mysource.spectrum.main.Blackbody.K   (9.2 +/- 0.6) x 10^-2  1 / (cm2 keV3 s)\n",
       "mysource.spectrum.main.Blackbody.kT   (1.99 +/- 0.04) x 10               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140584737124160\">\n",
       "<tr><td>1.00</td><td>-0.92</td></tr>\n",
       "<tr><td>-0.92</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.92\n",
       "-0.92  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>224.317561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>224.317561</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         224.317561\n",
       "total        224.317561"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>452.890442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>456.459169</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            452.890442\n",
       "BIC            456.459169"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb = Blackbody()\n",
    "\n",
    "pts = PointSource(\"mysource\", 0, 0, spectral_shape=bb)\n",
    "\n",
    "model = Model(pts)\n",
    "\n",
    "# MLE fitting\n",
    "\n",
    "jl = JointLikelihood(model, DataList(spectrum_generator))\n",
    "\n",
    "result = jl.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "832b8537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:20.009447Z",
     "iopub.status.busy": "2022-09-27T11:52:20.009214Z",
     "iopub.status.idle": "2022-09-27T11:52:21.053873Z",
     "shell.execute_reply": "2022-09-27T11:52:21.053139Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_fig1 = spectrum_generator.display_model(min_rate=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "41987e86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:21.057406Z",
     "iopub.status.busy": "2022-09-27T11:52:21.056797Z",
     "iopub.status.idle": "2022-09-27T11:52:31.354624Z",
     "shell.execute_reply": "2022-09-27T11:52:31.353795Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2ba2e179ec4447a3a499febf40cdfa6d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "29c079259b054de5a69b749458a4b687",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "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AAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLorACAAAAACyJwgoAAAAAsCQKKwAAAADAkiisAAAAAABLanZhDYVC2r59u0pLS4/bFwgE9Nlnn0UiFwAAAACgjXM05+Di4mLNmTNHhYWFMgxD559/vubNm6eOHTtKkg4fPqzbb79d77zzTktkBQAAAAC0Ic26w7po0SIlJSXpueee05IlS+T1ejV79uxj7raGw+GIhwQAAAAAtD3NKqyff/65br75ZvXo0UMDBw7Un/70J51xxhm65ZZbVFJSIkkyDKNFggIAAAAA2pZmFda6ujo5nc6v3myzac6cOTrnnHN06623as+ePREPCAAAAABom5pVWPv06aO8vLzjtv/sZz/T+eefr1/84hcRCwYAAAAAaNuaVVgvuugivfHGG43uu/POO3XJJZfwDCsAAAAAICKMMA0z6uTl5WnGjBlasmSJ0tPTzY4DAAAAAC2i2euwAgAAAADQGpq1DmtjRo0apWeffVa9e/eORJ6oddtttyknJ0d2u12SdMYZZ+iPf/yjyakAAAAAIHqdcmFlRPFX5syZo7Fjx5odAwAAAABiAkOCAQAAAACWdMp3WK2kpqZGzz33nHJycrRlyxZVVlZq3rx5mjBhwnHH+nw+Pfnkk3r99ddVWVmpAQMG6MYbb9Q555xz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\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = plot_spectra(jl.results, flux_unit=\"erg/(cm2 s keV)\")\n",
    "\n",
    "_ = plt.ylim(1e-20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab3598d6",
   "metadata": {},
   "source": [
    "Perhaps we want to fit a different model and compare the results. We change the spectral model and will overplot the fit's expected counts with the fit to the blackbody."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f6c84644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:31.357744Z",
     "iopub.status.busy": "2022-09-27T11:52:31.357501Z",
     "iopub.status.idle": "2022-09-27T11:52:31.461771Z",
     "shell.execute_reply": "2022-09-27T11:52:31.460598Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:31 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:31\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=365051;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=568569;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mysource.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(10.00000000 +/- 0.00000025) x 10^2</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mysource.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.333 +/- 0.011</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                    result  \\\n",
       "parameter                                                                    \n",
       "mysource.spectrum.main.Powerlaw.K      (10.00000000 +/- 0.00000025) x 10^2   \n",
       "mysource.spectrum.main.Powerlaw.index                     -1.333 +/- 0.011   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "mysource.spectrum.main.Powerlaw.K      1 / (cm2 keV s)  \n",
       "mysource.spectrum.main.Powerlaw.index                   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140584738388864\">\n",
       "<tr><td>1.00</td><td>0.00</td></tr>\n",
       "<tr><td>0.00</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.00\n",
       "0.00 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>690.331172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>690.331172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         690.331172\n",
       "total        690.331172"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>1384.917664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>1388.486391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC           1384.917664\n",
       "BIC           1388.486391"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "pl = Powerlaw()\n",
    "\n",
    "pts = PointSource(\"mysource\", 0, 0, spectral_shape=pl)\n",
    "\n",
    "model = Model(pts)\n",
    "\n",
    "# MLE fitting\n",
    "\n",
    "jl = JointLikelihood(model, DataList(spectrum_generator))\n",
    "\n",
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "\n",
    "    result = jl.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ddfa622d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:31.465031Z",
     "iopub.status.busy": "2022-09-27T11:52:31.464575Z",
     "iopub.status.idle": "2022-09-27T11:52:32.228053Z",
     "shell.execute_reply": "2022-09-27T11:52:32.227182Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 2 Axes>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spectrum_generator.display_model(\n",
    "    min_rate=10,\n",
    "    show_data=False,\n",
    "    show_residuals=True,\n",
    "    data_color=\"g\",\n",
    "    model_color=\"b\",\n",
    "    model_label=\"powerlaw\",\n",
    "    model_subplot=count_fig1.axes,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36087765",
   "metadata": {},
   "source": [
    "Examining the fit in count space lets us easily see that the fit with the powerlaw model is very poor. We can of course deterimine the fit quality numerically, but this is saved for another section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d62d640",
   "metadata": {},
   "source": [
    "## DispersionSpectrumLike\n",
    "\n",
    "Instruments that exhibit energy dispersion must have their spectra fit through a process called forward folding. Let $R(\\varepsilon,E)$ be our response converting between true (monte carlo) energy ($E$) and detector channel/energy ($\\varepsilon$), $f(E, \\vec{\\phi}_{\\rm s})$ be our photon model which is a function of $E$ and  source model parameters $\\vec{\\phi}_{\\rm s}$. Then, the source counts ($S_{c} (\\vec{\\phi}_{\\rm s})$) registered in the detector between channel (c) with energy boundaries $E_{{\\rm min}, c}$ and  $E_{{\\rm max}, c}$ (in the absence of background) are given by the convolution of the photon model with the response:\n",
    "\n",
    "$$S_{c} (\\vec{\\phi}_{\\rm s}) =\n",
    "  \\int_{0}^\\infty {\\rm d} E \\, f(E, \\vec{\\phi}_{\\rm s})\n",
    "  \\int_{E_{{\\rm min}, c}}^{E_{{\\rm max}, c}} {\\rm d} \\varepsilon\n",
    "  \\, R(\\varepsilon, E) $$\n",
    "\n",
    "Therefore, to fit the data in count space, we assume a photon model, fold it through the response, and calculate the predicted counts. This process is iterated on the source model parameters via likelihood minimization or posterior sampling until an optimal set of parameters is found.\n",
    "\n",
    "To handle dispersed spectra, 3ML provides the **DispersionSpectrumLike** plugin.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a76b4648",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:32.231815Z",
     "iopub.status.busy": "2022-09-27T11:52:32.231406Z",
     "iopub.status.idle": "2022-09-27T11:52:32.482362Z",
     "shell.execute_reply": "2022-09-27T11:52:32.481659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:32 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:32\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=195667;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=328455;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=838578;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=839228;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=722195;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=680958;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=546689;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=422632;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=218859;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=506891;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=200676;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=912746;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=527929;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=849543;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=634972;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=780524;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=895931;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=883089;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=134214;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=372615;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=870168;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=866058;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=456196;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=199494;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from threeML.plugins.DispersionSpectrumLike import DispersionSpectrumLike\n",
    "from threeML.utils.OGIP.response import OGIPResponse\n",
    "from threeML.io.package_data import get_path_of_data_file\n",
    "\n",
    "\n",
    "# we will use a demo response\n",
    "response = OGIPResponse(get_path_of_data_file(\"datasets/ogip_powerlaw.rsp\"))\n",
    "\n",
    "\n",
    "source_function = Broken_powerlaw(K=1e-2, alpha=0, beta=-2, xb=2000, piv=200)\n",
    "\n",
    "background_function = Powerlaw(K=10, index=-1.5, piv=100.0)\n",
    "\n",
    "dispersion_spectrum_generator = DispersionSpectrumLike.from_function(\n",
    "    \"test\",\n",
    "    source_function=source_function,\n",
    "    response=response,\n",
    "    background_function=background_function,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8c6b820",
   "metadata": {},
   "source": [
    "We can view the response and the count spectrum created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "59e42d0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:32.485570Z",
     "iopub.status.busy": "2022-09-27T11:52:32.485115Z",
     "iopub.status.idle": "2022-09-27T11:52:33.042881Z",
     "shell.execute_reply": "2022-09-27T11:52:33.041957Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "threeML_config.plugins.ogip.response_zero_color = \"k\"\n",
    "threeML_config.plugins.ogip.response_cmap = \"magma\"\n",
    "\n",
    "_ = dispersion_spectrum_generator.display_rsp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "372e1821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:33.046337Z",
     "iopub.status.busy": "2022-09-27T11:52:33.045820Z",
     "iopub.status.idle": "2022-09-27T11:52:34.025252Z",
     "shell.execute_reply": "2022-09-27T11:52:34.024476Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = dispersion_spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcfde456",
   "metadata": {},
   "source": [
    "All the functionality of **SpectrumLike** is inherited in **DispersionSpectrumLike**. Therefore, fitting, and examination of the data is the same.\n",
    "\n",
    "\n",
    "## OGIPLike\n",
    "\n",
    "Finally, many x-ray mission provide data in the form of fits files known and pulse-height analysis (PHA) data. The keywords for the information in the data are known as the Office of Guest Investigators Program (OGIP) standard. While these data are always a form of binned spectra, 3ML provide a convience plugin for reading OGIP standard PHA Type I (single spectrum) and Type II (multiple spectrum) files.\n",
    "\n",
    "The **OGIPLike** plugin inherits from **DispersionSpectrumLike** and thus needs either a full response or a redistribution matrix (RMF) and ancillary response (ARF) file. The plugin will prove the keywords in the data files to automatically figure out the correct likelihood for the observation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c61e423e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:34.028634Z",
     "iopub.status.busy": "2022-09-27T11:52:34.028118Z",
     "iopub.status.idle": "2022-09-27T11:52:34.083433Z",
     "shell.execute_reply": "2022-09-27T11:52:34.082813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">11:52:34 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m11:52:34\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=906418;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=463990;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=637074;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=88449;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=954067;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=290653;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ogip_data = OGIPLike(\n",
    "    \"ogip\",\n",
    "    observation=get_path_of_data_file(\"datasets/ogip_powerlaw.pha\"),\n",
    "    background=get_path_of_data_file(\"datasets/ogip_powerlaw.bak\"),\n",
    "    response=get_path_of_data_file(\"datasets/ogip_powerlaw.rsp\"),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "793861fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:34.086458Z",
     "iopub.status.busy": "2022-09-27T11:52:34.086037Z",
     "iopub.status.idle": "2022-09-27T11:52:34.096904Z",
     "shell.execute_reply": "2022-09-27T11:52:34.096291Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pha file</th>\n",
       "      <td>/home/runner/work/threeML/threeML/threeML/data...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bak file</th>\n",
       "      <td>/home/runner/work/threeML/threeML/threeML/data...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n. channels</th>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total rate</th>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total bkg. rate</th>\n",
       "      <td>0.1464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bkg. exposure</th>\n",
       "      <td>5000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bkg. is poisson</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exposure</th>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is poisson</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>background</th>\n",
       "      <td>profiled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>significance</th>\n",
       "      <td>31.103419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg area ratio</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg exposure ratio</th>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>src/bkg scale factor</th>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>response</th>\n",
       "      <td>/home/runner/work/threeML/threeML/threeML/data...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                        0\n",
       "pha file                /home/runner/work/threeML/threeML/threeML/data...\n",
       "bak file                /home/runner/work/threeML/threeML/threeML/data...\n",
       "n. channels                                                           128\n",
       "total rate                                                           1.74\n",
       "total bkg. rate                                                    0.1464\n",
       "bkg. exposure                                                      5000.0\n",
       "bkg. is poisson                                                      True\n",
       "exposure                                                            200.0\n",
       "is poisson                                                           True\n",
       "background                                                       profiled\n",
       "significance                                                    31.103419\n",
       "src/bkg area ratio                                                    1.0\n",
       "src/bkg exposure ratio                                               0.04\n",
       "src/bkg scale factor                                                 0.04\n",
       "response                /home/runner/work/threeML/threeML/threeML/data..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ogip_data.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bce0b5df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:52:34.099632Z",
     "iopub.status.busy": "2022-09-27T11:52:34.099274Z",
     "iopub.status.idle": "2022-09-27T11:52:34.834499Z",
     "shell.execute_reply": "2022-09-27T11:52:34.833816Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ogip_data.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43771d3c",
   "metadata": {},
   "source": [
    "When using PHA Type II data, a spectrum number must be supplied to indicate which spectrum from the file to use. Users can also follow the XSPEC convention of specifying the spectrum number in the filename (e.g. 'my_pha.fits{1}')"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00068831f9a14e9784a270105fa37380": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "083484cf24774866a938a240758f7167": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9997e6199c5f4a6fa8ed84ce0b5d1fb3",
       "placeholder": "​",
       "style": "IPY_MODEL_37d0548dee4b43f4819dd184b6fe303d",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:09&lt;00:00, 10.36it/s]"
      }
     },
     "104eb6bc605348beacde9f89e7858619": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "29c079259b054de5a69b749458a4b687": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9ab4096777af4e1780e2f65eb2815900",
        "IPY_MODEL_76ec76b00d554f1db9863581cb4c0758",
        "IPY_MODEL_083484cf24774866a938a240758f7167"
       ],
       "layout": "IPY_MODEL_80ac154a8b6f45e89250f9e7c8017479",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2ba2e179ec4447a3a499febf40cdfa6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_789852b763284bebadaa984af0804300",
        "IPY_MODEL_4bf60ad60c4f492988677a8422379144",
        "IPY_MODEL_9e42543892b14da1b56912ae947eb54d"
       ],
       "layout": "IPY_MODEL_43118a05b0a740ef959f9ba7ef3e0ce9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "37d0548dee4b43f4819dd184b6fe303d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "43118a05b0a740ef959f9ba7ef3e0ce9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "4830063b0dcc40188654e8b5d8cbfe7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4bf60ad60c4f492988677a8422379144": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b8d3aab3ab954b94aa941d5a21a534cc",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_104eb6bc605348beacde9f89e7858619",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "60d81b4b1a5c43e6bd96fd03cdaa81f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "616a3d7e5377443fbaa05825eb6f3090": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "76ec76b00d554f1db9863581cb4c0758": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_616a3d7e5377443fbaa05825eb6f3090",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e09d65695c444da5a367432233a857b4",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "789852b763284bebadaa984af0804300": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_00068831f9a14e9784a270105fa37380",
       "placeholder": "​",
       "style": "IPY_MODEL_60d81b4b1a5c43e6bd96fd03cdaa81f3",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "80ac154a8b6f45e89250f9e7c8017479": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "935e894a707a436982af75e5621932bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9997e6199c5f4a6fa8ed84ce0b5d1fb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9ab4096777af4e1780e2f65eb2815900": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_935e894a707a436982af75e5621932bd",
       "placeholder": "​",
       "style": "IPY_MODEL_4830063b0dcc40188654e8b5d8cbfe7c",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "9e42543892b14da1b56912ae947eb54d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b999448f131e4d16b6e054c6b58fdfba",
       "placeholder": "​",
       "style": "IPY_MODEL_f1db16374844498681bb22e445e0358c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:09&lt;00:00,  9.79s/it]"
      }
     },
     "b8d3aab3ab954b94aa941d5a21a534cc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b999448f131e4d16b6e054c6b58fdfba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e09d65695c444da5a367432233a857b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "f1db16374844498681bb22e445e0358c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
