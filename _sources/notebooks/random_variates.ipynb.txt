{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fa4ce75f",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0f7af4e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:23.309908Z",
     "iopub.status.busy": "2022-10-04T22:14:23.309578Z",
     "iopub.status.idle": "2022-10-04T22:14:23.373677Z",
     "shell.execute_reply": "2022-10-04T22:14:23.372921Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af9903df",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "117d86a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:23.377793Z",
     "iopub.status.busy": "2022-10-04T22:14:23.377497Z",
     "iopub.status.idle": "2022-10-04T22:14:26.397026Z",
     "shell.execute_reply": "2022-10-04T22:14:26.396213Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb3e700e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.400626Z",
     "iopub.status.busy": "2022-10-04T22:14:26.400148Z",
     "iopub.status.idle": "2022-10-04T22:14:26.430278Z",
     "shell.execute_reply": "2022-10-04T22:14:26.429587Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9096aa0",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6657a9e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.433745Z",
     "iopub.status.busy": "2022-10-04T22:14:26.433359Z",
     "iopub.status.idle": "2022-10-04T22:14:26.515767Z",
     "shell.execute_reply": "2022-10-04T22:14:26.515062Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91dfceed",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "68247457",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.519558Z",
     "iopub.status.busy": "2022-10-04T22:14:26.519147Z",
     "iopub.status.idle": "2022-10-04T22:14:26.568599Z",
     "shell.execute_reply": "2022-10-04T22:14:26.567983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.15 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-7 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.499 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.03 +/- 0.10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.15 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1          (-7 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.499 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.03 +/- 0.10               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140665962042608\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.03</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.03</td><td>-0.16</td></tr>\n",
       "<tr><td>0.03</td><td>-0.02</td><td>0.03</td><td>1.00</td><td>-0.12</td></tr>\n",
       "<tr><td>-0.08</td><td>0.00</td><td>-0.16</td><td>-0.12</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.03 -0.08\n",
       "-0.85  1.00 -0.00 -0.02  0.00\n",
       "-0.04 -0.00  1.00  0.03 -0.16\n",
       " 0.03 -0.02  0.03  1.00 -0.12\n",
       "-0.08  0.00 -0.16 -0.12  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>17.191769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>17.191769</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         17.191769\n",
       "total            17.191769"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>45.747175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>53.943653</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             45.747175\n",
       "BIC             53.943653"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aadab444",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad91bd94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.572046Z",
     "iopub.status.busy": "2022-10-04T22:14:26.571415Z",
     "iopub.status.idle": "2022-10-04T22:14:26.575546Z",
     "shell.execute_reply": "2022-10-04T22:14:26.574956Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "873540b5",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "44375b5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.578108Z",
     "iopub.status.busy": "2022-10-04T22:14:26.577870Z",
     "iopub.status.idle": "2022-10-04T22:14:26.582235Z",
     "shell.execute_reply": "2022-10-04T22:14:26.581574Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e63cb9e",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "005b7131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.585458Z",
     "iopub.status.busy": "2022-10-04T22:14:26.585242Z",
     "iopub.status.idle": "2022-10-04T22:14:26.590511Z",
     "shell.execute_reply": "2022-10-04T22:14:26.589840Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (2.9 +/- 0.4) x 10, hpd: (2.89 -0.5 +0.34) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e598cc97",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "139cd2c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.593245Z",
     "iopub.status.busy": "2022-10-04T22:14:26.593030Z",
     "iopub.status.idle": "2022-10-04T22:14:26.597687Z",
     "shell.execute_reply": "2022-10-04T22:14:26.597037Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21.27664999457337, 36.85762662102196)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5daa219d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.600260Z",
     "iopub.status.busy": "2022-10-04T22:14:26.600046Z",
     "iopub.status.idle": "2022-10-04T22:14:26.604583Z",
     "shell.execute_reply": "2022-10-04T22:14:26.603931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26.070904213546168, 31.49184189485098)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eed9d265",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b978eff3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.608125Z",
     "iopub.status.busy": "2022-10-04T22:14:26.607522Z",
     "iopub.status.idle": "2022-10-04T22:14:26.831284Z",
     "shell.execute_reply": "2022-10-04T22:14:26.830399Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69bf03b3",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "79d7f5d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.834840Z",
     "iopub.status.busy": "2022-10-04T22:14:26.834188Z",
     "iopub.status.idle": "2022-10-04T22:14:26.840539Z",
     "shell.execute_reply": "2022-10-04T22:14:26.839862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.46 +/- 0.06, hpd: 1.46 -0.05 +0.07"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "10bf5ce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:26.843445Z",
     "iopub.status.busy": "2022-10-04T22:14:26.842836Z",
     "iopub.status.idle": "2022-10-04T22:14:27.187306Z",
     "shell.execute_reply": "2022-10-04T22:14:27.186519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAMQCAYAAABfeTbWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAABBDklEQVR4nO3de5zVdb3o//fAMBNyCRoumTBLkcTxgl00jkqJogSpJNtLufeUmTpkSObleDkPbLfNnbmzbZmJop5DpRtwVyjnpGOetoloahqJh5uYusY2IDAochtYwPz+8MfaTYPKrLmszwzP5+OxHzXf9f2s9Z72eigvPmt9vyWNjY2NAQAAQLK6FXsAAAAA3ptwAwAASJxwAwAASJxwAwAASJxwAwAASJxwAwAASJxwAwAASJxwAwAASNw+G24NDQ2xfPnyaGhoKPYoAAAA72mfDbdsNhsXXXRRZLPZYo8CAADwnvbZcAMAAOgshBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDihBsAAEDiSos9AADAntTU1ERdXV1BaysrK2PGjBltPBFA8dhxAwCSVFdXF9lstsXrstlswcEHkCo7bgBAsjKZTNTW1rZozfjx49tpGoDiseMGAACQuBbtuL366qvxv/7X/4rly5fH+vXr4wMf+EBkMpk499xz4/jjj29y7muvvRa33XZbvPjii1FaWhrHHntsXHLJJdGvX78m5+3atStmz54dDzzwQKxfvz6GDBkS1dXVcfLJJ7f6lwMAAOgKWhRuq1evji1btsT48eNjwIAB0dDQEI8//nhce+21ceWVV8bEiRMjImLNmjUxderU6N27d1x00UWxdevWmD17drzyyitx5513Ro8ePfLPedddd8V9990Xp59+ehx66KGxYMGCuP7666OkpCTGjh3btr8tAABAJ9SicDv22GPj2GOPbXLs7/7u7+Kiiy6K+++/Px9u9957bzQ0NMTdd98dgwcPjoiIqqqquPzyy+Ph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wg0AACBxwg0AACBxbgcAAPD/W7lyZeRyuRZfoj+bzUYmk2mnqQDsuAEA5OVyuQ5dB7C3WrTjtnTp0qitrY2FCxfG6tWro2/fvnH44YfHhRdeGEOHDm1y7muvvRa33XZbvPjii1FaWhrHHntsXHLJJdGvX78m5+3atStmz54dDzzwQKxfvz6GDBkS1dXVcfLJJ7f6lwMAaKlCbqRdVVXVTtMAvKNF4fZv//Zv8eKLL8aJJ54YBx98cNTX18fcuXPjwgsvjOnTp8ewYcMiImLNmjUxderU6N27d1x00UWxdevWmD17drzyyitx5513Ro8ePfLPedddd8V9990Xp59+ehx66KGxYMGCuP7666OkpCTGjh3btr8tAABAJ9SicDvnnHPiW9/6VpPwOumkk+L888+P++67L6677rqIiLj33nujoaEh7r777hg8eHBEvPM3UZdffnk8/PDDMXHixIiIWLt2bcyZMycmTZoUl112WUREnHbaaTF16tS4/fbbY8yYMdG9e/c2+UUBAAA6qxZ9x+3II49sEm0REUOHDo0DDzwwstls/tjjjz8exx13XD7aIiKOPvroGDp0aDz22GP5YwsWLIgdO3bEpEmT8sdKSkrijDPOiLVr18bixYtb/AsBAAB0Na2+qmRjY2O8+eabceCBB0bEO7tob775ZowYMaLZuVVVVfH000/nf16xYkX07Nmz2VWYdn9OfMWKFTFy5MiCZ1u3bl3U19fv8bG/Dk0AAICUtTrcHn300Vi7dm189atfjYjIh1JFRUWzcysqKuLtt9+O7du3R1lZWdTX10f//v2jpKSk2XkR74RXa8ybNy9mzpzZqucAAAAotlaFWzabjVtuuSUOP/zw/P1Otm3bFhHR7COVERFlZWX5c8rKymLbtm3ve15rTJw4MY4//vh3nf2GG25o1fMDAAB0hILDrb6+Pq6++uro1atXfOc738lfRKS8vDwi9nw/k+3btzc5p7y8fK/OK9SAAQNiwIABrXoOAACAYivoBtybNm2Kq666KjZt2hQ333xzkzja/THHPX23rL6+Pvr27ZvfUauoqIj169dHY2Njs/MiQnQBAABEAeG2bdu2uOaaa+L111+P733ve/mLkuw2cODA6NevXyxfvrzZ2qVLl8bw4cPzPw8fPjwaGhqaXShkyZIl+ccBAAD2dS0Kt507d8a3v/3tWLx4cfzTP/1THHHEEXs874QTToinnnoq3njjjfyx559/Pl5//fU48cQT88dGjx4dpaWlMXfu3PyxxsbGePDBB2PgwIHv+vwAAAD7khZ9x+0nP/lJPPnkk3HcccfFxo0b4ze/+U2Tx8eNGxcREdXV1fG73/0uvvnNb8ZZZ50VW7dujVmzZsWwYcNiwoQJ+fMHDRoUZ599dsyaNSt27NgRVVVV8cQTT8SiRYviuuuuc/NtAACAaGG4vfzyyxER8dRTT8VTTz3V7PHd4TZ48OC49dZb47bbbos777wzSktL49hjj40pU6bkv9+22+TJk6NPnz4xb968qK2tjSFDhsS0adPilFNOKfR3AgAA6FJaFG633nrrXp970EEHxQ9+8IP3Pa9bt25RXV0d1dXVLRkFAABgn1HQVSUBAADoOMINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgccINAAAgcaXFHgAAdqupqYm6uroWr8tms5HJZNphIgBIgx03AJJRV1cX2Wy2xetyuVw7TAMA6bDjBkBSMplM1NbWtmhNVVVVO00DAGmw4wYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJA44QYAAJC40mIPAACwL1u5cmXkcrkYP358QesrKytjxowZbTwVkBrhBgBQRLlcruC12Wy2DScBUibcAACKLJPJRG1tbYvXFbpLB3Q+vuMGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQuNJiDwBAempqaqKurq7g9ZWVlTFjxow2nAgA9m123ABopq6uLrLZbEFrs9lsq6IPAGjOjhsAe5TJ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vvKVr8SQIUPy540YMSL+9V//Ne6444748Y9/HPvtt1+ceuqpTeIOAABgX9Zu4XbWWWfFWWedtVfnjhw5Mm6//fb2GgUAAKBT6/CLkwAAANAywg0AACBxwg0AACBxwg0AACBx7XZxEoD2VFNTE3V1dQWtzWazkclk2ngiAID2Y8cN6JTq6uoim80WtDaXy7XxNAAA7cuOG9BpZTKZqK2tbfG6qqqqdpgGAKD92HEDAABInB03AACStnLlysjlcjF+/PiC1ldWVsaMGTPaeCroWMINAICktea7yYV+HxpSI9wAAEheod9rLnSXDlLjO24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJE24AAACJKy32AMC+raamJurq6lq8LpvNRiaTaYeJAADSY8cNKKq6urrIZrMtXpfL5dphGgCANNlxA4ouk8lEbW1ti9ZUVVW10zQAAOmx4wYAAJA44QYAAJA44QYAAJA44QYAAJA4FycBAKDLWrlyZeRyuRg/fnxB6ysrK2PGjBltPBW0nHADAKDLas3tYwq5XQ20F+EGtFqhN9GOcCNtANpfIbediYiCd+mgPfiOG9Bqhd5EO8KNtAEA9oYdN6BNFPq3mW6kDQDw/uy4AQAAJE64AQAAJE64AQAAJE64AQAAJE64AQAAJE64AQAAJM7tAICIcBNtAPhbK1eujFwuV9CNuCsrK2PGjBntMBX7KjtuQES4iTYA/K1C//2WzWYL/stQeDd23IA8N9EGgKYK+XdjITt08H7suAEAACROuAEAACROuAEAACROuAEAACROuAEAACROuAEAACROuAEAACROuAEAACTODbghQTU1NVFXV1fQ2pUrV0ZExEc+8pEWrctms5HJZAp6TQAA2pcdN0hQXV1dZLPZgtZu2bIlcrlci9cVsgYAgI5hxw0Slclkora2tsXrqqqqClpbVVXV4tcCAKBj2HEDAABInHADAABInHADAABInHADAABInHADAABInHADAABInHADAABInHADAABInHADAABInHADAABIXGmxB4COUFNTE3V1dQWvr6ysjBkzZrThRAAAsPfsuLFPqKuri2w2W9DabDbbqugDAIDWsuPGPiOTyURtbW2L140cOTKy2WyMHz++RetWrlwZEREf+chHWvya2Ww2MplMi9cBANA12XGD95HL5Qpat2XLloLXFroOAICuyY4b7IVCduuqqqoK3uWrqqpq8RoAALouO24AAACJE24AAACJE24AAACJE24AAACJc3ESClKsG1oX+rourw8AdJSVK1dGLpdr8a2Ediv0z0l0bXbcKEixbmhd6Ou6vD4A0FFa8+eO1vw5ia7Njts+rrU7WB15Q+vWvK7L6wMAHakYf06KsFvXldlx28cVYwerWGsBAFJnt453k8SO2/bt2+Oee+6J3/zmN7Fx48Y4+OCD48ILL4xjjjmm2KN1mGJ9Zyyi8JtLt4YbUwMA7Fkxduvs1KUviR23G2+8Me6///445ZRT4hvf+EZ069Ytrrrqqli0aFGxR+swxfrOGAAAXUOhu3X+LNk5FH3HbcmSJfHb3/42Lr744jj33HMjIuKzn/1sfOUrX4np06fH9OnTizxhxynmd8YAAOj8CvnzZGf7Xl0xP6lWTEXfcXv88ceje/fuMXHixPyx8vLyOPXUU2Px4sXxxhtvFHG6zsF3xgAAKFRn+17dvvpJtZLGxsbGYg5w+eWXx9q1a+PnP/95k+PPP/98XHbZZXHjjTfG8ccfX9Bzr1u3Lurr6/f42Msvvxw33XRTTJs2LYkdp6lTp8aqVati//33b/Ha119/PUpLSzt0bTFeszVr95XXbM1a87bvWvO271rztu9a86b5mq1Za972Xbsvzbtq1aqIiILWFqo1r7n7z9s//vGP23qsVstkMvGBD3zgXR8veridd9550b9///jhD3/Y5Phrr70WX/7yl+OKK66Iz3/+8wU99//8n/8zZs6c2fohAQAA2tFdd90VI0aMeNfHi/4dt23btkWPHj2aHS8rK8s/XqiJEye+627dxo0bI5vNxiGHHJJ/rY6WzWbjhhtuSGbXj32H9x7F4H1HMXjfUQzedxTi/d4rRQ+38vLyPX6udvv27fnHCzVgwIAYMGDAuz5+9NFHF/zcbSmTybxnXUN78d6jGLzvKAbvO4rB+462VPSLk1RUVOzxe2i7j71XeAEAAOwL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+1i+fHmceeaZRZiSrmZP77uTTjopfvvb38avf/3r/K1Pdu3aFQ8//HD07ds3RowYUcyR6QSEWzv55S9/GZs2bYr6+vqIiHjyySfzf7t85plnRu/evWPGjBlRW1sbc+bMif333z8iIr7zne/E0qVL43Of+1xks9km927r2bNnfPrTn+74X4ZOo9D33X//7/89Bg4cGIcddlj0798/3njjjXjooYeivr4+vv3tbxfr16ETKeS9N3jw4D1eve/HP/5x9O/f3z/veF+F/jPv4osvjkMOOSRGjBgRvXr1ipdeeikeeuihGDRokFug8L4Kfd+NHj06PvnJT8a9994bb731VgwfPjyeeOKJWLRoUVx55ZUu0MT7Em7tZM6cObF69er8z/Pnz4/58+dHRMS4ceOid+/ee1z38ssvR0TEQw89FA899FCTxz784Q/7gwzvqdD33ec+97n4j//4j7j//vtj06ZN0adPnzjssMPiW9/6Vhx11FEdMjudW6HvPWiNQt93J510Ujz99NPxhz/8IRoaGqKioiJOP/30+MpXvhIf+tCHOmR2Oq9C33clJSXxz//8z3H33XfHf/zHf0RtbW0MHTo0pk2bFuPGjeuQ2encShrdsh0AACBprioJAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGAACQOOEGQHJWrVoVn/nMZ+K73/1usUcBgCQINwAAgMQJNwAAgMQJNwAAgMSVFnsAAGiJ1atXx8yZM+PZZ5+Nt956K/r37x/HHHNMnH/++TF48OBm5//5z3+OO+64IxYtWhTdunWLI444Ii6++OKYPXt21NbWxpw5c2L//fd/z9dctWpVfOELX4jx48fHl7/85Zg+fXosXLgwduzYEYcffnhMmTIlhg8f3mzdK6+8Ej/96U9j4cKFsXnz5qioqIjRo0fHeeedFx/84AebnHvOOedERMQ999wTd999dyxYsCDWr18fV111VXzsYx/Lv/7f//3fx/Tp0+PFF1+MiIhRo0bFpZdeGv369Yv/9//+X9x9992xbNmy6NatW5xwwgnxjW98I3r27Fno/9wAJEK4AdBpvP766zFlypR466234rjjjouDDjooXn311XjooYfiqaeeip/85CcxdOjQ/Pkvv/xyXHLJJdHQ0BCf+cxnYsiQIbFs2bK45JJL4uCDD27x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\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a2be2e65",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
