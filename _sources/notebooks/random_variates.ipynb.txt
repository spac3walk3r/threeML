{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b955c035",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8d34daf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:29.885825Z",
     "iopub.status.busy": "2022-10-04T16:26:29.885190Z",
     "iopub.status.idle": "2022-10-04T16:26:29.963212Z",
     "shell.execute_reply": "2022-10-04T16:26:29.962350Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d09beca3",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37a70f37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:29.967791Z",
     "iopub.status.busy": "2022-10-04T16:26:29.967437Z",
     "iopub.status.idle": "2022-10-04T16:26:33.608334Z",
     "shell.execute_reply": "2022-10-04T16:26:33.607008Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58a30d69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.614114Z",
     "iopub.status.busy": "2022-10-04T16:26:33.613823Z",
     "iopub.status.idle": "2022-10-04T16:26:33.647812Z",
     "shell.execute_reply": "2022-10-04T16:26:33.646996Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f47fe2a",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8ca90bbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.651746Z",
     "iopub.status.busy": "2022-10-04T16:26:33.651455Z",
     "iopub.status.idle": "2022-10-04T16:26:33.747875Z",
     "shell.execute_reply": "2022-10-04T16:26:33.746848Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a83442d0",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "389b6fe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.753179Z",
     "iopub.status.busy": "2022-10-04T16:26:33.752885Z",
     "iopub.status.idle": "2022-10-04T16:26:33.809619Z",
     "shell.execute_reply": "2022-10-04T16:26:33.808874Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.94 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.502 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 +/- 0.08</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.94 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1          (-1 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (3.2 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.502 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.04 +/- 0.08               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140258735907120\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.01</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.04</td><td>-0.16</td></tr>\n",
       "<tr><td>0.01</td><td>-0.02</td><td>-0.04</td><td>1.00</td><td>0.11</td></tr>\n",
       "<tr><td>-0.08</td><td>-0.00</td><td>-0.16</td><td>0.11</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.01 -0.08\n",
       "-0.85  1.00  0.00 -0.02 -0.00\n",
       "-0.05  0.00  1.00 -0.04 -0.16\n",
       " 0.01 -0.02 -0.04  1.00  0.11\n",
       "-0.08 -0.00 -0.16  0.11  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>25.932987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>25.932987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         25.932987\n",
       "total            25.932987"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>63.229610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>71.426089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             63.229610\n",
       "BIC             71.426089"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc9d48fe",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "77b8ae78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.813788Z",
     "iopub.status.busy": "2022-10-04T16:26:33.813074Z",
     "iopub.status.idle": "2022-10-04T16:26:33.817749Z",
     "shell.execute_reply": "2022-10-04T16:26:33.817045Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d741380f",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "610489af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.820813Z",
     "iopub.status.busy": "2022-10-04T16:26:33.820558Z",
     "iopub.status.idle": "2022-10-04T16:26:33.827797Z",
     "shell.execute_reply": "2022-10-04T16:26:33.827115Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14ce9cbe",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a760b761",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.831165Z",
     "iopub.status.busy": "2022-10-04T16:26:33.830552Z",
     "iopub.status.idle": "2022-10-04T16:26:33.836931Z",
     "shell.execute_reply": "2022-10-04T16:26:33.836185Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (3.2 +/- 0.4) x 10, hpd: (3.2 +/- 0.4) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "828c573d",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bae97ab8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.840293Z",
     "iopub.status.busy": "2022-10-04T16:26:33.839789Z",
     "iopub.status.idle": "2022-10-04T16:26:33.845337Z",
     "shell.execute_reply": "2022-10-04T16:26:33.844542Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24.414984475127095, 39.78736379455911)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "df6f1d51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.848441Z",
     "iopub.status.busy": "2022-10-04T16:26:33.847960Z",
     "iopub.status.idle": "2022-10-04T16:26:33.853589Z",
     "shell.execute_reply": "2022-10-04T16:26:33.852812Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29.708997570038168, 34.9124772956194)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a8699ad",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d8c7d3bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:33.857221Z",
     "iopub.status.busy": "2022-10-04T16:26:33.856952Z",
     "iopub.status.idle": "2022-10-04T16:26:34.113214Z",
     "shell.execute_reply": "2022-10-04T16:26:34.112243Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9525b5f5",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "11133f5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:34.117156Z",
     "iopub.status.busy": "2022-10-04T16:26:34.116605Z",
     "iopub.status.idle": "2022-10-04T16:26:34.125695Z",
     "shell.execute_reply": "2022-10-04T16:26:34.124894Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.51 -0.06 +0.05, hpd: 1.51 -0.05 +0.06"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "feeb6df7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T16:26:34.129250Z",
     "iopub.status.busy": "2022-10-04T16:26:34.128517Z",
     "iopub.status.idle": "2022-10-04T16:26:34.538987Z",
     "shell.execute_reply": "2022-10-04T16:26:34.538128Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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kwsuuCBHHHFEz71LAKA406dPT0tLS01jGxoaMmvWrB6eEcDWqUtRN2nSpOqTK1/L0KFDc8EFF7zhc/bv3z/Tpk3LtGnTujIVAGAb19LSkkqlUn3i9hvlu2iB7U2PPP0SAKA3NDY2prm5uUtjJk+e3EuzAdg69cjTLwEAAOgbog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgdX09AQCAnrR48eK0tbVl8uTJXR5bqVTS2NjYC7MC6D1W6gCAbUpbW1ufjAXoK1bqAIBtTmNjY5qbm7s8rqmpqRdmA9C7rNQBAAAUTNQBAAAUTNQBAAAUTNQBAAAUTNQBAAAUTNQBAAAUzFcaAMB2Yvr06WlpaenyuO58IbcvAgfofVbqAGA70dLSkkql0uVxffVl3r4IHOCNsVIHANuRWr6Uu7tfyO2LwAF6l5U6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgok6AACAgtV15eCnnnoq//Zv/5Ynnngiy5Yty5ve9KY0NjbmpJNOyiGHHNLh2KeffjqXXXZZHnnkkdTV1eWggw7KGWeckWHDhnU4buPGjZkzZ05uuummLFu2LGPGjMm0adNy+OGHd/vNAQAAbOu6FHXPPfdcVq1alcmTJ2fEiBFZs2ZN7rzzzpx//vk555xzMmXKlCTJCy+8kJkzZ2bIkCE59dRTs3r16syZMye///3vc+WVV2bgwIHVc1511VW57rrrcswxx2SvvfbK/Pnzc9FFF6Vfv36ZNGlSz75bAACAbUyXou6ggw7KQQcd1GHbhz70oZx66qm54YYbqlF37bXXZs2aNbn66qszevToJElTU1POPvvs3HrrrdXjlixZkrlz52bq1Kk566yzkiRHH310Zs6cmcsvvzwTJ07MgAEDuv0mAQAAtlXdvqduwIABGTVqVFasWFHdduedd+bggw+uBl2S7L///hk7dmzuuOOO6rb58+dn/fr1mTp1anVbv379cuyxx2bJkiV59NFHuzs9AACAbVqXVuo2Wb16ddauXZuVK1fmnnvuyf33359DDz00yaurby+++GL23HPPTuOamppy3333VX9etGhRdthhhzQ2NnY6btP+8ePH1zLFJMnSpUvT2tq62X2VSqXm8wIAAGwtaoq673znO5k3b16SpH///nnve99bvXxyU0TV19d3GldfX59XXnkl69aty6BBg9La2prhw4enX79+nY5LXo2y7pg3b15mz57drXMAAABszWqKuhNOOCETJ07M0qVLc8cdd2TDhg1pa2tLkqxduzZJOjwMZZNBgwZVjxk0aFDWrl37usd1x5QpUzo9lXOTSqWSiy++uFvnBwAA6Gs1RV1jY2P1ksnJkyfn7LPPznnnnZcrr7wygwcPTpJq5P2xdevWJUn1mMGDB7+h42o1YsSIjBgxolvnAAAA2JrVFHV/auLEibnkkkvyzDPPVC+d3Ny9bK2trdl5552rK3H19fVZsGBB2tvbO1yCuWmsIAMASrB48eK0tbVl8uTJNY1vaGjIrFmzenhWwPai20+/TP7rMskVK1Zk5MiRGTZsWJ544olOxz322GMZN25c9edx48ZlzZo1nR5asnDhwup+AICt3eauPHqjKpVKWlpaenA2wPamSyt1L774YoYPH95h2/r163Pbbbdl8ODB2W233ZIk73vf+9Lc3Jznn3+++rUGDz30UJ555pmceOKJ1bETJkzIZZddlhtvvLH6oJX29vbcfPPNGTlyZPbZZ5/uvDcAgC2msbExzc3NXR5X6+oewCZdirpLLrkkK1euzH777ZeRI0emtbU1t99+e1paWnL66adnxx13TJJMmzYtv/jFL/LZz342xx9/fFavXp3rr78+u+++e4466qjq+UaNGpUTTjgh119/fdavX5+mpqbcfffdefjhh3PhhRf64nEAAIDX0aWoO+yww/LjH/84N998c15++eXsuOOO2XPPPXPaaadlwoQJ1eNGjx6dSy+9NJdddlmuvPLK1NXV5aCDDsrpp59evZ9ukxkzZmTo0KGZN29empubM2bMmFxwwQU54ogjeuYdAgAAbMO6FHWTJk3KpEmT3tCxb3vb2/K1r33tdY/r379/pk2blmnTpnVlKgAAAKSHHpQCAABA3xavr6wkAAGzPFi9enLa2tkyePLmm8Q0NDZk1a1YPzwooiagDAOhDbW1tNY+tVCo9OBOgVKIOAKCPNTY2prm5ucvjal3dA7Yt7qkDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAoWF1XDn7sscfS3NycBQsW5LnnnsvOO++cvffeO6ecckrGjh1bPe5LX/pSmpubO41vaGjItdde22Hbxo0bM2fOnNx0001ZtmxZxowZk2nTpuXwww+v8S0BAABsP7oUdf/+7/+eRx55JIceemje/va3p7W1NTfeeGNOOeWUXHHFFdl9992rxw4aNCjnnntuh/E77bRTp3NeddVVue6663LMMcdkr732yvz583PRRRelX79+mTRpUo1vCwAAYPvQpag78cQT84UvfCEDBw6sbjvssMPyiU98Itddd10uvPDC6vYBAwbkyCOP/LPnW7JkSebOnZupU6fmrLPOSpIcffTRmTlzZi6//PJMnDgxAwYM6MoUAQAAtitduqdu33337RB0STJ27NjstttuqVQqnY7fsGFDVq5c+Zrnmz9/ftavX5+pU6dWt/Xr1y/HHntslixZkkcffbQr0wMAANjudGmlbnPa29vz4osvZrfdduuwfc2aNTnqqKOyZs2aDB06NJMmTcppp52WHXfcsXrMokWLssMOO6SxsbHD2Kampur+8ePHd3eKAAAA26xuR93tt9+eJUuW5JOf/GR1W319fU466aTsscceaW9vz/3335+bbropv/vd7/Ktb30rdXWvvmxra2uGDx+efv36dThnfX19kmTp0qXdmtvSpUvT2tq62X2bW1kEAAAoTbeirlKp5Bvf+Eb23nvvTJ48ubp9xowZHY6bNGlSxo4dm6uuuip33nln9QEoa9eu7XQ5Z/LqQ1Y27e+OefPmZfbs2d06BwAAwNas5qhrbW3N5z//+ey00075p3/6p9d9oMmJJ56Ya665Jg8++GA16gYPHpy2trZOx65bt666vzumTJmSQw45ZLP7KpVKLr744m6dHwCgLy1evDhtbW0dfrn+RjU0NGTWrFm9MCtgS6sp6lasWJFzzz03K1asyGWXXZYRI0a87pjBgwdn5513ziuvvFLdVl9fnwULFqS9vb3DJZibLpl8I+f9c0aMGNHtcwAAbK0298vxN8JtKLBt6XLUrV27Nuedd16eeeaZfP3rX+/0gJTXsmrVqrz88ssZNmxYddu4cePyH//xH6lUKh3Os3Dhwup+AABeW2NjY5qbm7s0ppaVPWDr1aWvNNiwYUO++MUv5tFHH80//uM/Zp999ul0zNq1a7Nq1apO27/3ve+lvb09Bx54YHXbhAkTUldXlxtvvLG6rb29PTfffHNGjhy52fMDAADwX7q0Uved73wn99xzTw4++OAsX748P/nJTzrsP/LII7Ns2bJ86lOfyuGHH56GhoYkyQMPPJD77rsvBx54YCZMmFA9ftSoUTnhhBNy/fXXZ/369Wlqasrdd9+dhx9+OBdeeKEvHgcAAHgdXYq63/72t0mSe++9N/fee2+n/UceeWSGDBmSgw8+OL/85S/T3NycjRs3Ztddd8306dPzkY98JP37d1wcnDFjRoYOHZp58+alubk5Y8aMyQUXXJAjjjiiG28LALZN06dPT0tLS01jK5VKp++GBaB8XYq6Sy+99HWPGTp0aC644II3fM7+/ftn2rRpmTZtWlemAgDbpZaWlprjrNaHagCwdev2l48DAFtWLQ/GSJKmpqZemA0Afa1LD0oBAABg6yLqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAACibqAAAAClbX1xMAgO3N9OnT09LSUtPYSqWSxsbGHp4RACWzUgcAW1hLS0sqlUpNY9va2np4NgCUzkodAPSBxsbGNDc3d3lcU1NTL8wGgJJZqQMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAAChYXVcOfuyxx9Lc3JwFCxbkueeey84775y99947p5xySsaOHdvh2KeffjqXXXZZHnnkkdTV1eWggw7KGWeckWHDhnU4buPGjZkzZ05uuummLFu2LGPGjMm0adNy+OGHd/vNAQAAbOu6FHX//u//nkceeSSHHnpo3v72t6e1tTU33nhjTjnllFxxxRXZfffdkyQvvPBCZs6cmSFDhuTUU0/N6tWrM2fOnPz+97/PlVdemYEDB1bPedVVV+W6667LMccck7322ivz58/PRRddlH79+mXSpEk9+24BoAdNnz49LS0tXR5XqVTS2NjYCzMCYHvUpag78cQT84UvfKFDlB122GH5xCc+keuuuy4XXnhhkuTaa6/NmjVrcvXVV2f06NFJkqamppx99tm59dZbM2XKlCTJkiVLMnfu3EydOjVnnXVWkuToo4/OzJkzc/nll2fixIkZMGBAj7xRAOhpLS0tNQVaW1tbL80IgO1Rl6Ju33337bRt7Nix2W233VKpVKrb7rzzzhx88MHVoEuS/fffP2PHjs0dd9xRjbr58+dn/fr1mTp1avW4fv365dhjj81FF12URx99NOPHj+/ymwKALaWxsTHNzc1dGtPU1NRLswFge9TtB6W0t7fnxRdfzJvf/OYkr66+vfjii9lzzz07HdvU1JRFixZVf160aFF22GGHTr/h3PQfuz8+FgAAgM66tFK3ObfffnuWLFmST37yk0mS1tbWJEl9fX2nY+vr6/PKK69k3bp1GTRoUFpbWzN8+PD069ev03FJsnTp0m7NbenSpdX5/Kk/XlkEAAAoVbeirlKp5Bvf+Eb23nvvTJ48OUmydu3aJOlw390mgwYNqh4zaNCgrF279nWP64558+Zl9uzZ3ToHAADA1qzmqGttbc3nP//57LTTTvmnf/qn6gNNBg8enGTzN4GvW7euwzGDBw9+Q8fVasqUKTnkkEM2u69SqeTiiy/u1vkBAAD6Wk1Rt2LFipx77rlZsWJFLrvssowYMaK6b9Olk5u77LG1tTU777xzdSWuvr4+CxYsSHt7e4dLMDeN/ePz1mLEiBHdPgcAAMDWrMsPSlm7dm3OO++8PPPMM/mXf/mX7Lbbbh32jxw5MsOGDcsTTzzRaexjjz2WcePGVX8eN25c1qxZ0+n+toULF1b3AwAA8Nq6FHUbNmzIF7/4xTz66KP5x3/8x+yzzz6bPe5973tf7r333jz//PPVbQ899FCeeeaZHHroodVtEyZMSF1dXW688cbqtvb29tx8880ZOXLka54fAACAV3Xp8svvfOc7ueeee3LwwQdn+fLl+clPftJh/5FHHpkkmTZtWn7xi1/ks5/9bI4//visXr06119/fXbfffccddRR1eNHjRqVE044Iddff33Wr1+fpqam3H333Xn44Ydz4YUX+uJxAACA19GlqPvtb3+bJLn33ntz7733dtq/KepGjx6dSy+9NJdddlmuvPLK1NXV5aCDDsrpp59evZ9ukxkzZmTo0KGZN29empubM2bMmFxwwQU54ogjan1PAAAA240uRd2ll176ho9929velq997Wuve1z//v0zbdq0TJs2rStTAQAAIDU8KAUAAICth6gDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAomKgDAAAoWF1fTwAA+tL06dPT0tJS09hKpZLGxsYenhEAdI2VOgC2ay0tLalUKjWNbWtr6+HZAEDXWakDYLvX2NiY5ubmLo9ramrqhdkAQNdYqQMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAAChYXV9PAACALWvx4sVpa2vL5MmTaxrf0NCQWbNm9fCsgFqJOgCA7UxbW1vNYyuVSg/OBOgJog4AYDvU2NiY5ubmLo+rdXUP6D3uqQMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAACiYqAMAAChYXV9PAAC6a/r06WlpaalpbKVSSWNjYw/PCAC2HCt1ABSvpaUllUqlprFtbW09PBsA2LKs1AGwTWhsbExzc3OXxzU1NfXCbABgy7FSBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAUDBRBwAAULC6rg5YtWpV5syZk4ULF+axxx7L8uXLc/755+eoo47qcNyXvvSlNDc3dxrf0NCQa6+9tsO2jRs3Zs6cObnpppuybNmyjBkzJtOmTcvhhx/e1ekBAABsV7ocdS+//HJmz56d0aNHZ9y4cVmwYMFrHjto0KCce+65HbbttNNOnY676qqrct111+WYY47JXnvtlfnz5+eiiy5Kv379MmnSpK5OEQAAYLvR5airr6/PjTfemPr6+jz++OOZPn36ax47YMCAHHnkkX/2fEuWLMncuXMzderUnHXWWUmSo48+OjNnzszll1+eiRMnZsCAAV2dJgAAwHahy/fUDRo0KPX19W/4+A0bNmTlypWvuX/+/PlZv359pk6dWt3Wr1+/HHvssVmyZEkeffTRrk4RAABgu9HllbquWLNmTY466qisWbMmQ4cOzaRJk3Laaadlxx13rB6zaNGi7LDDDmlsbOwwtqmpqbp//PjxNb3+0qVL09rautl9lUqlpnMCAABsTXot6urr63PSSSdljz32SHt7e+6///7cdNNN+d3vfpdvfetbqat79aVbW1szfPjw9OvXr9P45NUwq9W8efMye/bsmscDAABs7Xot6mbMmNHh50mTJmXs2LG56qqrcuedd1YfgLJ27doMHDiw0/hBgwZV99dqypQpOeSQQza7r1Kp5OKLL6753AAAAFuDXr388k+deOKJueaaa/Lggw9Wo27w4MFpa2vrdOy6deuq+2s1YsSIjBgxoubxAAAAW7st+uXjgwcPzs4775xXXnmluq2+vj7Lli1Le3t7h2M33QsnygAAAF7bFo26VatW5eWXX86wYcOq28aNG5c1a9Z0enDJwoULq/sBAADYvF6JurVr12bVqlWdtn/ve99Le3t7DjzwwOq2CRMmpK6uLjfeeGN1W3t7e26++eaMHDky++yzT29MEQAAYJtQ0z11P/rRj7JixYrqJZL33HNPXnjhhSTJcccdl+XLl+dTn/pUDj/88DQ0NCRJHnjggdx333058MADM2HChOq5Ro0alRNOOCHXX3991q9fn6amptx99915+OGHc+GFF/ricQAAgD+jpqibO3dunnvuuerPd911V+66664kyZFHHpkhQ4bk4IMPzi9/+cs0Nzdn48aN2XXXXTN9+vR85CMfSf/+HRcIZ8yYkaFDh2bevHlpbm7OmDFjcsEFF+SII47oxlsDAADY9tUUdTfccMPrHnPBBRe84fP1798/06ZNy7Rp02qZDgAAwHZriz4oBQAAgJ4l6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAApW19cTAACgHIsXL05bW1smT55c0/iGhobMmjWrh2cF2zdRBwDAG9bW1lbz2Eql0oMzATYRdQAAdEljY2Oam5u7PK7W1T3gz3NPHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMHq+noCALDJ9OnT09LS0uVxlUoljY2NvTAjANj6WakDYKvR0tKSSqXS5XFtbW29MBsAKIOVOgC2Ko2NjWlubu7SmKampl6aDQBs/azUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFEzUAQAAFKyuqwNWrVqVOXPmZOHChXnssceyfPnynH/++TnqqKM6Hfv000/nsssuyyOPPJK6urocdNBBOeOMMzJs2LAOx23cuDFz5szJTTfdlGXLlmXMmDGZNm1aDj/88JrfGAB9Y/r06WlpaalpbKVSSWNjYw/PCAC2bV2OupdffjmzZ8/O6NGjM27cuCxYsGCzx73wwguZOXNmhgwZklNPPTWrV6/OnDlz8vvf/z5XXnllBg4cWD32qquuynXXXZdjjjkme+21V+bPn5+LLroo/fr1y6RJk2p/dwBscS0tLTXHWVtbWy/MCNhaLF68OG1tbZk8eXKXxzY0NGTWrFm9MCsoX5ejrr6+PjfeeGPq6+vz+OOPZ/r06Zs97tprr82aNWty9dVXZ/To0UmSpqamnH322bn11lszZcqUJMmSJUsyd+7cTJ06NWeddVaS5Oijj87MmTNz+eWXZ+LEiRkwYECt7w+APtDY2Jjm5uYuj2tqauqF2QBbi1p/cVOpVHp4JrBt6XLUDRo0KPX19a973J133pmDDz64GnRJsv/++2fs2LG54447qlE3f/78rF+/PlOnTq0e169fvxx77LG56KKL8uijj2b8+PFdnSYAAFuhWn7pU8vKHmxPeuVBKUuWLMmLL76YPffcs9O+pqamLFq0qPrzokWLssMOO3S6TGfTb2v/+FgAAAA66vJK3RvR2tqaJJtd0auvr88rr7ySdevWZdCgQWltbc3w4cPTr1+/TsclydKlS2uex9KlS6tz+VOW8QEAgG1Br0Td2rVrk6TDw1A2GTRoUPWYQYMGZe3ata97XK3mzZuX2bNn1zweAABga9crUTd48OAkm78Zdt26dR2OGTx48Bs6rhZTpkzJIYccstl9lUolF198cc3nBgAA2Br0StRtunRyc5c+tra2Zuedd66uxNXX12fBggVpb2/vcAnmprEjRoyoeR4jRozo1ngAAICtXa88KGXkyJEZNmxYnnjiiU77HnvssYwbN67687hx47JmzZpO97gtXLiwuh8AAIDN65WoS5L3ve99uffee/P8889Xtz300EN55plncuihh1a3TZgwIXV1dbnxxhur29rb23PzzTdn5MiR2WeffXprigAAAMWr6fLLH/3oR1mxYkX1Esl77rknL7zwQpLkuOOOy5AhQzJt2rT84he/yGc/+9kcf/zxWb16da6//vrsvvvuOeqoo6rnGjVqVE444YRcf/31Wb9+fZqamnL33Xfn4YcfzoUXXuiLxwEAAP6MmqJu7ty5ee6556o/33XXXbnrrruSJEceeWSGDBmS0aNH59JLL81ll12WK6+8MnV1dTnooINy+umnV++n22TGjBkZOnRo5s2bl+bm5owZMyYXXHBBjjjiiG68NQAAgG1fTVF3ww03vKHj3va2t+VrX/va6x7Xv3//TJs2LdOmTatlOgAAANutXrunDgAAgN4n6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAAom6gAAAApW19cTAACAP2fx4sVpa2vL5MmTaxrf0NCQWbNm9fCsYOsh6gAA2Kq1tbXVPLZSqfTgTGDrJOoAANjqNTY2prm5ucvjal3dg5K4pw4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgvnwcgE6mT5+elpaWmsZWKpU0Njb28IwAgNdipQ6ATlpaWlKpVGoa29bW1sOzAQD+HCt1AGxWY2NjmpubuzyuqampF2YDALwWK3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFE3UAAAAFq+vrCQDQe6ZPn56WlpYuj6tUKmlsbOyFGQEAPc1KHcA2rKWlJZVKpcvj2traemE2AEBvsFIHsI1rbGxMc3Nzl8Y0NTX10mwAgJ5mpQ4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgdb114gULFuTMM8/c7L4rrrgie++9d/XnRx55JN/97nfz5JNPZqeddsqhhx6aU089NTvuuGNvTQ8AAGCb0GtRt8lxxx2XpqamDtt23XXX6v9ftGhRzjrrrDQ2NuaMM87ICy+8kLlz5+YPf/hDvvrVr/b29AAA2IYtXrw4bW1tmTx5ck3jGxoaMmvWrB6eFfSsXo+6/fbbLxMnTnzN/bNmzcrQoUNz6aWXZqeddkqS7LLLLvnXf/3XPPDAA/nrv/7r3p4iAADbqLa2tprHViqVHpwJ9J5ej7okWbVqVQYNGpS6uo4vt3Llyjz44IM58cQTq0GXJH/zN3+Tb3/727njjjtEHQAA3dLY2Jjm5uYuj6t1dQ+2tF6Pui9/+ctZvXp1BgwYkPHjx+fTn/509tprryTJ73//+2zYsCF77rlnhzEDBw7MO97xjixatKi3pwcAAFC0Xou6urq6vO9978t/+2//LW9+85vz9NNPZ+7cuTnjjDNy+eWXZ4899khra2uSpL6+vtP4+vr6/OY3v+nWHJYuXVp9jT9lOR0AANgW9FrU7bvvvtl3332rP0+YMCETJ07MJz7xicyaNSuXXHJJ1q5dm+TVlbk/NWjQoKxbt65bc5g3b15mz57drXMAAABszbbIPXWbjBkzJhMmTMhdd92VDRs2ZPDgwUk2fwPrunXrMmjQoG693pQpU3LIIYdsdl+lUsnFF1/crfMDAAD0tS0adUkyatSotLW1Zc2aNdXLLjd3iWRra2tGjBjRrdcaMWJEt88BAACwNeu/pV9w8eLFGTRoUHbYYYe87W1vy4ABA/LEE090OKatrS2LFi3KuHHjtvT0AAAAitJrUffSSy912vbb3/4299xzTw444ID0798/Q4YMyf7775+f/OQnWbVqVfW42267LatXr86hhx7aW9MDAADYJvTa5Zf/8A//kMGDB2efffbJ8OHD8/TTT+f//J//kze96U2ZMWNG9bhTTjklp59+embOnJkpU6bkhRdeyNy5c3PAAQfkwAMP7K3pAQAAbBN6Lere85735Pbbb88NN9yQlStXZtiwYXnve9+bj3/84xkzZkz1uD333DNf//rX893vfjff/va3s+OOO+YDH/hAh/ADAABg83ot6o4//vgcf/zxb+jY8ePH5/LLL++tqQAAAGyztviDUgAAAOg5og4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgog4AAKBgdX09AQD+vOnTp6elpaWmsZVKJY2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vFpg9pevO5+9P/eu//mv+4z/+IwcddFC+8pWv9MJs2RZ15zN466235stf/vJm9914442pr6/v6emyjemJfwc++OCD+cEPfpAnn3wyGzduzNixY3PSSSdl0qRJvThztgXd+fz9/d//fX79619vdt+AAQNyxx13vOF5iDroAS+//HJmz56d0aNHZ9y4cVmwYMEbHvuHP/wh/fv3zwc/+MG85S1vyfLly3P77bdn5syZ+cpXvpIDDzywF2fOtqA7n78/9vjjj+fWW2/NoEGDeniGbOt64jP4qU99KrvsskuHbUOGDOmpKbIN6+7n75ZbbslXvvKV7L///jn11FMzYMCAtLS05IUXXuilGbMt6c7n76Mf/WiOPvroDttWr16dr33taznggAO6NA9RBz2gvr6++hvlxx9/PNOnT3/DY48++uhO/0BPnTo1H/nIR/K//tf/EnW8ru58/jZpb2/Pt771rfzN3/xNfvWrX/XCLNmW9cRn8MADD8xee+3VC7NjW9edz9+zzz6bb3zjG/nQhz6UM888sxdnybaqO5+/zYXbT37ykyTJEUcc0aV5uKcOesCgQYN69BKhN73pTXnzm9+cFStW9Ng52Xb1xOfvtttuy1NPPZVTTz21h2bF9qSn/h24atWqbNiwoQdmxPakO5+/m2++ORs3bsynPvWpJK9+Btvb23tyemzjevrPgLfffnt22GGHTJgwoUvjrNTBVmLlypVpa2vLyy+/XP0D9kc/+tG+nhbbgVWrVuW73/1upk2b5v4l+syZZ56Z1atXZ+DAgTnggANy+umnZ+zYsX09LbZxDz30UBoaGnLffffliiuuyJIlSzJ06NBMnTo1n/zkJ9O/v/UPtpyXXnopDz74YA477LDssMMOXRor6mAr8Q//8A954IEHkiQDBw7MlClT8rGPfayPZ8X2YPbs2Rk8eHBOPPHEvp4K26HBgwfnqKOOyrvf/e7stNNOeeKJJ3LDDTfkM5/5TK6++uqMHj26r6fINmzTfe3/8i//kpNOOilvf/vbc9ddd+X73/9+NmzYkBkzZvT1FNmO/OxnP8uGDRu6fOllIupgqzFjxox8+MMfzgsvvJDm5uasX7/eZUj0umeeeSY//OEP84UvfMEDUugThx12WA477LDqz+95z3vy13/915k5c2Z+8IMf5JxzzunD2bGtW716dTZu3JgZM2bk7/7u75IkEydOzPLly/PDH/4wH/3oR7Pjjjv28SzZXvz0pz/NsGHDsv/++3d5rDVl2Eq84x3vyAEHHJAPfOAD+frXv57HHnvsNR/zDT3l0ksvzT777JOJEyf29VSgavz48XnnO9+Zhx56qK+nwjZu8ODBSZLDDz+8w/ZJkyZl7dq1efLJJ/tiWmyHFi9enEcffTSHHXZY6uq6vu4m6mArNHDgwBxyyCG56667snbt2r6eDtuohx56KPfff3+OP/74PPvss9X/bdiwIWvXrs2zzz6blStX9vU02U6NGjUqr7zySl9Pg23cpvuIhw8f3mH7pp+XL1++xefE9un2229P0vWnXm7i8kvYSq1duzbt7e1ZtWpV9TeJ0JM2fQfTBRdc0GnfkiVL8uEPfzhnnHGGe+3oE4sXL86wYcP6ehps4/bcc8/84Q9/yNKlS/MXf/EX1e1Lly5NEp9Btpif/vSn2XXXXbP33nvXNF7UwRa0dOnSrFy5Mrvuumt1af3FF1/s9BvC5cuX584778yoUaM67YNa/enn7y//8i/zz//8z52O++pXv5q3vvWt+ehHP5rdd9+9D2bKtmpz/w586aWXOv3B+T//8z/zxBNP5LjjjuuDWbKt2tzn77DDDsvPfvaz/PjHP65+pcvGjRtz6623Zuedd86ee+7Zl1NmG7K5z98mTz75ZCqVSk4++eSazy/qoIf86Ec/yooVK9La2pokueeee6orIccdd1yGDBmSWbNmpbm5OXPnzs0uu+ySJPnv//2/Z+TIkXnnO9+Z4cOH5/nnn88tt9yS1tbWfPGLX+yrt0Nhavn8jR49erNPFvz2t7+d4cOH5z3vec8WfQ+UrdZ/B37605/OHnvskT333DM77bRTnnzyydxyyy0ZNWqUr3XhDav18zdhwoT81V/9Va699tq89NJLGTduXO6+++48/PDDOeecczxAijek1s/fJt299DIRddBj5s6dm+eee67681133ZW77rorSXLkkUdmyJAhmx33/ve/Pz//+c9zww03ZMWKFRk6dGje+c535gtf+EL222+/LTJ3ylfr5w96Sq2fwcMOOyz33XdffvnLX2bNmjWpr6/PMccck49//ON5y1veskXmTvlq/fz169cv//zP/5yrr746P//5z9Pc3JyxY8fmggsuyJFHHrlF5k75uvPf4I0bN+bnP/959thjjzQ0NNQ8h37t7e3tNY8GAACgT3n6JQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQBbnWeffTbvfe9786UvfamvpwIAWz1RBwAAUDBRBwAAUDBRBwAAULC6vp4AAHTFc889l9mzZ+eBBx7ISy+9lOHDh+eAAw7IJz7xiYwePbrT8b/73e/y3e9+Nw8//HD69++fffbZJ5/+9KczZ86cNDc3Z+7cudlll13+7Gs+++yz+fCHP5zJkyfnYx/7WK644oosWLAg69evz957753TTz8948aN6zTu97//fb73ve9lwYIFWblyZerr6zNhwoScfPLJefOb39zh2BNPPDFJcs011+Tqq6/O/Pnzs2zZspx77rl517veVX39v/3bv80VV1yRRx55JEly4IEH5swzz8ywYcPyf//v/83VV1+dxx9/PP3798/73ve+/P3f/3122GGHWv92A1AAUQdAMZ555pmcfvrpeemll3LwwQfnbW97W5566qnccsstuffee/Od73wnY8eOrR7/29/+NmeccUbWrFmT9773vRkzZkwef/zxnHHGGXn729/e5dd/7rnn8ulPfzq77bZb3v/+92fx4sWZP39+zjzzzPzgBz/IW97yluqxDz/8cM4555y0tbVl4sSJeetb35pHH300P/zhD/Of//mfueKKKzJs2LAO51+3bl0++9nPZvXq1TnkkEMyYMCADB8+vLr/2WefzWc+85nstdde+cAHPpAnnngiP/vZz/LCCy9kxowZ+dznPpf9998/xxxzTH7961/nxz/+cdrb23Peeed1/W82AMUQdQAU45JLLslLL72Uc845J1OmTKluv/HGG/ONb3wjX/va1/LNb36zuv2b3/xmVq1alQsvvDBHHHFEdfs111yT733ve11+/V//+teZMWNG/u7v/q667eqrr873v//93HLLLZk2bVqSZOPGjfnyl7+cNWvW5JJLLslf//VfV4+/4oorcv311+e73/1up9hatmxZxo0bl8svvzyDBw+ubn/22WeTJL/5zW8yc+bMnHDCCUmS9vb2fP7zn899992X8847L1/4whfynve8J0myfv36nHrqqbntttsyffr0DsEJwLbFPXUAFOH555/PggULsttuu+WYY47psO+DH/xgGhoa8qtf/SrPP/98kldX1R5++OGMGzeuQ9Alyd/+7d9m6NChXZ7DLrvskpNOOqnDtg984ANJkscff7y67ZFHHsn/+3//LwceeGCHoEuSk08+OTvvvHN++tOfpq2trdNrfPrTn+4QdH9s1113zfHHH1/9uV+/fpk0aVKS5B3veEc16JKkrq4uEydOzIYNG/L000937Y0CUBRRB0ARFi1alCR517velX79+nXY179//+y3335JXr3k8o//us8++3Q61w477LDZe+Bez7hx49K/f8f/dI4cOTJJsmLFik5zffe7393pHDvuuGP23HPPrFu3Li0tLR32DRo0KLvvvvtrvv7uu+/e6b3X19cneTXq/tSmfUuXLn3NcwJQPlEHQBFWrVqVJB3uMftjmwJm5cqVb+j4Wi5H3GmnnTptq6t79U6GjRs3VrdtmsPrzXXTHDcZPnx4p2h7vdcfMGBAkldj8bX2bdiw4TXPCUD5RB0ARdgULS+++OJm9y9btizJf4XPGz2+N2yaw+u99p+G2J8LOgB4LaIOgCJsurzwN7/5Tdrb2zvsa29vz29+85skqV5Wuemvjz76aKdzrVmzJr/73e96fa4LFizotG/16tV54oknMnjw4DQ0NPTaHADYfog6AIowevTovPvd785TTz2VH//4xx32zZs3L5VKJX/5l39Z/a66t771rdl3332zaNGi/OxnP+tw/PXXX59XXnml1+a67777Ztddd83999+fBx98sMO+73//+3n55ZczadKkDBw4sNfmAMD2w1caAFCMz33uczn99NPz1a9+Nffee2922223PPXUU7nnnnsybNiwfO5zn+tw/JlnnpmZM2fm4osvzl133ZVdd901Tz75ZBYuXJj99tsvv/nNbzo9+KQn9O/fP+eff37OOeecnHvuuR2+p27BggXZddddc9ppp/X46wKwfbJSB0AxGhoactVVV+Woo47KY489luuvvz6PP/543v/+92fWrFkdvng8SfbYY49cdtll+au/+qvcd999+d//+3+nX79+ueyyyzrde9fTxo8fnyuuuCITJkzIL3/5y8yZMyfPPvtsjj/++M1+8TgA1Kpf+5/emAAA27gNGzbkpJNOytq1a3PzzTf39XQAoFus1AGwzVq/fn1eeumlTtuvu+66PPfcc5kwYcKWnxQA9DD31AGwzVq9enWOO+647L///hk7dmzWr1+fhQsX5vHHH099fX0+8YlP9PUUAaDbXH4JwDarra0t3/72t/OrX/0qS5cuzbp161JfX58DDzwwJ598ckaOHNnXUwSAbhN1AAAABXNPHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMFEHQAAQMH+P+sUpG3GPMAeAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "bceb68f4",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
