{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a9f0c398",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "822860fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:53.485861Z",
     "iopub.status.busy": "2022-10-03T12:21:53.485552Z",
     "iopub.status.idle": "2022-10-03T12:21:56.829492Z",
     "shell.execute_reply": "2022-10-03T12:21:56.828674Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "efa54807",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:56.833193Z",
     "iopub.status.busy": "2022-10-03T12:21:56.832849Z",
     "iopub.status.idle": "2022-10-03T12:21:56.863983Z",
     "shell.execute_reply": "2022-10-03T12:21:56.863253Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5dc273b",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "814a82e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:56.870132Z",
     "iopub.status.busy": "2022-10-03T12:21:56.869677Z",
     "iopub.status.idle": "2022-10-03T12:21:58.302072Z",
     "shell.execute_reply": "2022-10-03T12:21:58.301192Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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B19XV1dceumlMXPmzDjooINi7dq1/fK4tbW1sXDhwn55LAAAgKzkOvgWLVoUTz75ZMyfP79fH7empiamT5/e4211dXWxYMGCfv15AAAAAyG3wdfc3BxXX311vP/9749x48b162NXV1dHdXV1vz4mAADAYMtt8N10003R3t4eM2fO7D6U87nnnouIiKampli7dm1UV1dHeXl5lsMEAADITG6D79lnn41NmzbFhz70oR1u+/GPfxw//vGP49prr4399tsvg9EBAABkL7fBN3fu3JgxY8Z2yzZs2BDf+c53Yvbs2fH2t789xo8fn9HoAAAAsle0wXf77bdHU1NT9+URHnzwwVi/fn1E/C32pkyZElOmTNnu72w7tHPvvffeIQYBAABKTdEG38033xzr1q3r/vOyZcti2bJlERExa9asGDlyZFZDAwAAyIWiDb5bbrml139n/Pjx3VEIAABQ6oZkPQAAAAAGhuADAABIlOADAABIlOADAABIlOADAABIVNGepRMAStHyu9ZEW0tHDBteFlPnTMp6OADknOADgCKyfNGa2Px8a4wYWyH4ACiYQzoBAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAoB+1NrdHe0tHRES0t3REa3N7xiMCoJQJPgDoJ63N7VF7wcPR3tIZERHtLZ1Re8HDog+AzAg+AOgnqx6oj41rm7dbtnFtc6x6oD6jEQFQ6gQfAPSTxroXel7+9KZBHgkA/I3gA4B+UjVxVM/LX7vHII8EAP5G8AFAP5kyc0KMHl+53bLR4ytjyswJGY0IgFIn+ACgn1RUlkfN/GlRPnxoRESUDx8aNfOnRUVlecYjA6BUCT4A6EcVleVRPrwsIiLKh5eJPQAyJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASVZb1AP7e5s2b46abbooVK1bEypUrY9OmTXH++efH7Nmzu++zdevWuPfee2Pp0qWxevXq2LRpU4wfPz5mzpwZJ510UlRUVGT4LwAAACgORTfDt3Hjxli4cGHU1dXF5MmTe7zPli1b4qKLLoqNGzfGe97znjjrrLNi//33jx/84Adx3nnnRVdX1yCPGgAAoPgU3QxfVVVV3HHHHVFVVRV//OMf4/TTT9/hPuXl5XHFFVfE1KlTu5cde+yx8epXvzquu+66+O1vfxuHHnroYA4bAACg6BTdDN+wYcOiqqpql/cpLy/fLva2mTFjRkRE1NXVDcjYAAAA8qTogq8Qzz//fEREjB49OuORAAAAZK/oDuksxI033hiVlZXx1re+taDHaWhoiMbGxh5vM3sIAADkRTLB9+Mf/zh+85vfxGc+85nYY489Cnqs2traWLhwYf8MDAAAICNJBN/9998f11xzTcyZMyfe+973Fvx4NTU1MX369B5vq6uriwULFhT8MwAAAAZa7oPv17/+dXzjG9+IadOmxf/7f/+vXx6zuro6qqur++WxAAAAspLrk7asWLEivvSlL8WUKVPia1/7WpSV5b5fAQAA+k1ug++pp56Kz33uc/HqV786vvWtb0VFRUXWQwIAACgqRTkldvvtt0dTU1P3mTIffPDBWL9+fUREzJ07N4YMGRLnnntubNq0KU466aR4+OGHt/v7e+65Zxx00EGDPm4AAIBiUpTBd/PNN8e6deu6/7xs2bJYtmxZRETMmjUrIqI7AK+66qod/v4xxxwj+AAAgJJXlMF3yy23vOR9tgUgAAAAPcvtd/gAAADYNcEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAEWitbk92ls6IiKivaUjWpvbMx4RAHkn+ACgCLQ2t0ftBQ9He0tnRES0t3RG7QUPiz4ACiL4AKAIrHqgPjaubd5u2ca1zbHqgfqMRgRACgQfABSBxroXel7+9KZBHgkAKRF8AFAEqiaO6nn5a/cY5JEAkBLBBwBFYMrMCTF6fOV2y0aPr4wpMydkNCIAUiD4AKAIVFSWR838aVE+fGhERJQPHxo186dFRWV5xiMDIM8EHwAUiYrK8igfXhYREeXDy8QeAAUTfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkqy3oAAJCaqbMnRVtLRwwbbjMLQLZsiQCgn02dMynrIQBARDikEwAAIFmCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFGCDwAAIFFlWQ+gJ5s3b46bbropVqxYEStXroxNmzbF+eefH7Nnz97hvk899VRcfvnlsXz58igrK4tp06bFmWeeGWPGjBn8gQMAABSRopzh27hxYyxcuDDq6upi8uTJO73f+vXr46yzzoo///nPcdppp8VJJ50UDz/8cHzmM5+J9vb2QRwxAABA8SnKGb6qqqq44447oqqqKv74xz/G6aef3uP9rr/++tiyZUtcc801MW7cuIiI2H///eMzn/lMLFq0KGpqagZz2AAAAEWlKGf4hg0bFlVVVS95v6VLl8Zhhx3WHXsREYceemhMmDAhlixZMpBDBAAAKHpFGXy747nnnosNGzbElClTdrht//33j9WrV2cwKgAAgOJRlId07o7GxsaIiB5nAquqquKFF16Itra2GDZsWK8fu6Ghofvx/15dXV2vHw8AACALuQ2+1tbWiIgoLy/f4bZtkdfa2tqn4KutrY2FCxcWND4AAICs5Tb4KioqIiJ6PBtnW1vbdvfprZqampg+fXqPt9XV1cWCBQv69LgAAACDKbfBt+1Qzp4OvWxsbIxRo0b1aXYvIqK6ujqqq6sLGh8AAEDWcnvSlle+8pUxZsyYWLVq1Q63rVy5cpfX7wMAACgFuQ2+iIgjjjgiHnrooXj22We7l/32t7+N+vr6OOqoozIcGQAAQPaK9pDO22+/PZqamroP2XzwwQdj/fr1ERExd+7cGDlyZJxyyinxy1/+Mj71qU/F8ccfHy0tLXHjjTfGPvvsE7Nnz85y+AAAAJkr2uC7+eabY926dd1/XrZsWSxbtiwiImbNmhUjR46McePGxWWXXRaXX355XHXVVVFWVhbTpk2LT37yk33+/h4AAEAqijb4brnllt2636RJk+Liiy8e4NEAAADkT66/wwcAAMDOCT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBElWU9AADg/0ydPSnaWjpi2HCbaAAKZ2sCAEVk6pxJWQ8BgIQ4pBMAACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRLrwOAD1YfteaaGvpiGHDy1wMHYDcEnwA0IPli9bE5udbY8TYCsEHQG45pBMAACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRfQ6+z372s7Fs2bLo7Ozsz/EAAADQT/p84fVf/epX8etf/zrGjBkTs2fPjjlz5sRee+3Vn2MDAACgAH2e4bvxxhvj/e9/fwwZMiRuuOGGOOWUU+JTn/pU3H///dHe3t6fYwQAAKAP+jzDt+eee8bHPvaxmDdvXjz00ENx1113xSOPPBKPPfZY7LHHHnH00UfHu9/97th77737cbgAAADsrj4H3zZDhw6NGTNmxIwZM6KhoSHuvvvuWLRoUdx2221x2223xYEHHhjvfve7Y+bMmVFRUdEfYwYAAGA3FBx8L1ZdXR0nn3xyTJgwIS6//PJoaGiIP/zhD/H444/HlVdeGSeffHKceOKJMWRI/5wctL6+Pq699tpYvnx5vPDCCzFu3Lh45zvfGSeddFK8/OUv75efAQAAkFf9Fnz19fXx85//PO69997461//GuXl5TFr1qw45phj4k9/+lPccccdcdVVV8WGDRvijDPOKPjnPfvss/Gxj30sRo4cGf/0T/8Uo0aNiscffzyuu+66WLVqVVx00UX98K8CAADIr4KCr7W1NX75y1/Gz3/+81i+fHl0dXXFa1/72jj55JNj9uzZsccee0RExCGHHBJz586Nz3zmM3Hvvff2S/AtXrw4mpqa4oorrohJkyZFRERNTU1s3bo17r333ti0aVP3zwcAAChFfQ6+Sy65JH7xi19Ec3NzlJWVxcyZM6OmpiYOPvjgHu8/bNiweMtb3hJ/+MMf+vojt9Pc3BwREa94xSu2W15VVRVDhgyJsrJ+PVoVAAAgd/pcRT/96U9jzz33jFNOOSVmz54dY8aMecm/86Y3vSk+/OEP9/VH7vBYN9xwQ3zrW9+Kj370ozFq1Kj4wx/+EHfeeWfMnTs3hg8f3i8/BwAAIK/6HHzf/e5345BDDunV35k6dWpMnTq1rz9yO29961vjn//5n+P666+PBx98sHv5Bz/4wTjttNMKeuyGhoZobGzs8ba6urqCHhsAAGCw9Dn4eht7A2H8+PHxxje+MY444ogYNWpUPPzww3H99dfH2LFjY+7cuX1+3Nra2li4cGH/DRQAACADuf2i2/333x/f/va34yc/+Um86lWvioiII444Irq6uuKqq66Kd77znTF69Og+PXZNTU1Mnz69x9vq6upiwYIFfR43AADAYMlt8N1xxx2x3377dcfeNtOnT49FixbF6tWr49BDD+3TY1dXV0d1dXV/DBMAACAz/XMF9Axs2LAhtm7dusPyjo6OiIjo7Owc7CEBAAAUldwG34QJE2L16tVRX1+/3fL7778/hgwZEvvuu29GIwMAACgOuT2k86STTopHHnkkzjzzzDjuuONi1KhR8dBDD8UjjzwS7373ux2SCQAAlLzcBt/BBx8cV1xxRfzgBz+IO+64I1544YUYP358nHbaafH+978/6+EBAABkLrfBFxFxwAEHxLe//e2shwEAAFCUcvsdPgAAAHZN8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK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172uOy6zVFdXFwsWLIgvfelLMXHixKyHQ45Zl+gv1iX6g/WI/mJdoj8U83r0UuPJbfBVVVXFc889t8PybYdiVldX9/mxq6urd/n3Dz300D4/9kCZOHHiLssedpd1if5iXaI/WI/oL9Yl+kMe16PcnrRl8uTJ8cwzz0Rzc/N2y1esWNF9OwAAQCnLbfAdeeSR0dnZGbW1td3L2tra4u67744DDjggxo0bl+HoAAAAspfbQzoPOOCAOOqoo+Lqq6+Ov/71r/Ga17wm7rnnnli3bl187nOfy3p4AAAAmctt8EVEfOELX4hx48bFvffeG01NTbHPPvvEt771rTj44IOzHhoAAEDmch18FRUVccYZZ8QZZ5yR9VAAAACKTm6/w8ffVFVVxUc+8pEeL0IPvWFdor9Yl+gP1iP6i3WJ/pDn9ehlXV1dXVkPAgAAgP5nhg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRgg8AACBRZVkPgL5pa2uLa6+9NhYvXhybNm2KfffdN+bNmxdvfvObsx4aRWrz5s1x0003xYoVK2LlypWxadOmOP/882P27Nk73Pepp56Kyy+/PJYvXx5lZWUxbdq0OPPMM2PMmDGDP3CKysqVK+Oee+6JRx99NNatWxejRo2KAw88MObNmxcTJkzY7r7WI3ZlzZo18YMf/CBWrVoVzz//fLz85S+PiRMnxvvf//6YPn36dve1LtEbP/rRj+Kaa66JSZMmxQ9/+MPtblu+fHl8//vfjz/96U9RWVkZRx11VJx22mkxYsSIjEZLsXj00UfjnHPO6fG2733ve3HggQd2/zlv65Hgy6mLLroofvnLX8b73ve+2GuvvWLRokVx3nnnxaWXXhpveMMbsh4eRWjjxo2xcOHCGDduXEyePDkeffTRHu+3fv36OOuss2LkyJFx2mmnRUtLS9x0003x5JNPxlVXXRXl5eWDPHKKyQ033BDLly+Po446Kvbdd99obGyMO+64I+bNmxff+973Yp999okI6xEvbd26dbF58+Y45phjorq6OrZs2RJLly6N888/P84999yoqamJCOsSvbN+/fq4/vrrY/jw4Tvctnr16vj0pz8dEydOjDPPPDPWr18fN998czzzzDPx7W9/O4PRUozmzp0b+++//3bLXvOa13T/fy7Xoy5y5/HHH++aMWNG1w033NC9bMuWLV0nnXRS18c//vEMR0Yxa21t7WpoaOjq6urqWrlyZdeMGTO67r777h3ud/HFF3e9853v7Fq3bl33sl//+tddM2bM6LrzzjsHbbwUp9///vddbW1t2y17+umnu97xjnd0zZ8/v3uZ9Yi+6Ojo6Dr11FO7PvCBD3Qvsy7RG1/5yle6zjnnnK6zzjqr60Mf+tB2t5177rld733ve7uampq6l/3sZz/rmjFjRtcjjzwy2EOlyPz3f/9314wZM7qWLFmyy/vlcT3yHb4cWrp0aQwdOrT708+IiIqKipgzZ048/vjj8eyzz2Y4OorVsGHDoqqq6iXvt3Tp0jjssMNi3Lhx3csOPfTQmDBhQixZsmQgh0gOTJ06dYcZlQkTJsTee+8ddXV13cusR/TF0KFD41WvelU0NTV1L7Musbsee+yxWLp0aZx11lk73Nbc3By/+c1vYtasWVFZWdm9/Oijj47hw4dbl9jO5s2bo6OjY4fleV2PHNKZQ6tXr4699tpruxUtIrqnn5944ontNoywu5577rnYsGFDTJkyZYfb9t9///iv//qvDEZFsevq6ooNGzbE3nvvHRHWI3qnpaUlWltbo7m5OR588MF45JFH4qijjooI6xK7r7OzMy699NKYM2dO7Lvvvjvc/uSTT0ZnZ+cO61J5eXnst99+sXr16sEaKkXuoosuipaWlhg6dGi84Q1viE984hPx+te/PiLyux4JvhxqbGzscaZm27KGhobBHhKJaGxsjIjY6fr1wgsvRFtbWwwbNmywh0YRu+++++K5556Lj370oxFhPaJ3rrjiiqitrY2IiCFDhsThhx8en/70pyPCusTuu/POO+PZZ5+NSy65pMfbX2pd+t3vfjeg46P4lZWVxRFHHBFve9vbYvTo0fHUU0/FzTffHGeeeWZceeWV8brXvS6365Hgy6HW1tYev6S+bYPX2to62EMiEdvWnZdav+xcsU1dXV1ccsklceCBB8YxxxwTEdYjeud973tfHHnkkdHQ0BBLliyJzs7OaG9vjwjrErtn48aNcd1118WHPvShnZ659aXWpba2toEcIjkwderUmDp1avef3/72t8eRRx4Zp556alx99dXxne98J7frke/w5VBFRUX3xvDFtq1kFRUVgz0kErFt3bF+sTsaGxvjc5/7XFRWVsbXv/71GDp0aERYj+idiRMnxqGHHhrHHHNMfOtb34qWlpb4/Oc/H11dXdYldss111wTe+yxR8ydO3en93mpdcmHBvRkr732ire//e3x6KOPRmdnZ27XI8GXQ1VVVd1Tyi+2bVl1dfVgD4lEbDtEYWfr16hRo4r2zYzB1dTUFOedd140NTXFd77zne3ed6xHFOLII4+MP/7xj1FfX29d4iXV19fHz372szj++OOjoaEh1q5dG2vXro22trbo6OiItWvXxgsvvPCS65J9J3bmVa96VbS3t8eWLVtyux4JvhyaPHlyPPPMM9Hc3Lzd8hUrVnTfDn3xyle+MsaMGROrVq3a4baVK1dat4iIvx0a9fnPfz7q6+vjm9/8ZvfJWraxHlGIbYdMNTU1WZd4SQ0NDbF169a49NJL48QTT+z+b8WKFVFfXx8nnnhiLFy4MCZNmhRDhw7dYV1qb2+P1atXW5fYqb/85S8xbNiwGD58eG7XI8GXQ0ceeWR0dnZ2f8k94m/TyHfffXcccMABztBJQY444oh46KGHtru8x29/+9uor6/vPnMepauzszO++tWvxuOPPx5f+9rX4qCDDurxftYjXsqGDRt2WNbR0RH33ntvVFRUdH+QYF1iVyZNmhQXXnjhDv9NmjQpxo0bFxdeeGHMmTMnRo4cGYceemgsXrw4Nm/e3P3377333mhpabEuEX/96193WPbEE0/Egw8+GG9+85tjyJAhuV2PXtbV1dWV9SDova985SuxbNmyOOGEE+I1r3lN3HPPPbFy5cq45JJL4uCDD856eBSp22+/PZqamqKxsTF++tOfxuGHHx777bdfRETMnTs3Ro4cGc8++2zMmzcvRo4cGccff3y0tLTEjTfeGK985Svj6quvdvhUibvsssvitttui8MOOyxmzpy5w+2zZs2KiLAe8ZK++MUvRnNzc7zxjW+MV77yldHY2Bj33XdfPP300/HJT34yTjzxxIiwLtE3Z599dmzcuDF++MMfdi9btWpVfPKTn4yJEydGTU1NrF+/Pm6++eZ44xvfGBdffHGGo6UYnHPOOVFRUREHHXRQvOIVr4innnoqfvazn0VZWVlceeWV3R9C5XE9Enw51draGtdee20sXrw4mpqaYp999ol58+bFW97ylqyHRhE74YQTYt26dT3edvPNN8f48eMjImLNmjVx+eWXx/Lly6OsrCymTZsWn/zkJ2Ps2LGDOVyK0Nlnnx2PPfbYTm9ftmxZ9/9bj9iV+++/P+6666548sknY+PGjTFixIiYMmVKHHfccfH2t799u/tal+itnoIvIuL3v/99fP/7348//elPMWLEiDjqqKPiYx/7WIwYMSKjkVIsbrvttrjvvvviz3/+czQ3N8eYMWPikEMOiY985COx1157bXffvK1Hgg8AACBRvsMHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAACQKMEHAAOsq6srPvvZz8bhhx8e999//27fBgCFEnwAMMBe9rKXxfnnnx+veMUr4uKLL45169Z133brrbfGI488ErNnz453vOMdGY4SgBQJPgAYBGPHjo0vfOEL0dzcHPPnz4/Ozs5YvXp1XHXVVbHXXnvFOeeck/UQAUjQy7q6urqyHgQAlIp//dd/jVtvvTVOOumkeOihh+Ivf/lLfO9734spU6ZkPTQAEiT4AGAQtbW1xSc+8YlYvXp1RER8/OMfj5NPPjnjUQGQKod0AsAgGjZsWLz1rW/t/v93v/vdGY8IgJQJPgAYRCtWrIgbb7wxRo8eHW1tbXHxxRdnPSQAEib4AGCQbN68OebPnx9Dhw6NSy+9NI444ohYsmRJ3HXXXVkPDYBECT4AGCTf/e534y9/+UucccYZsc8++8R5550Xr3rVq+Kyyy6L+vr6rIcHQIIEHwAMgsWLF8fixYvjsMMOi+OOOy4iIvbYY4/40pe+FK2trTF//vzo6OjIeJQApEbwAcAA+8tf/hKXXHJJVFVVxec///ntbjv44IPjAx/4QKxatSquvvrqjEYIQKpclgEAACBRZvgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAASJfgAAAAS9f8BriiOULiswnQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4ffcd72",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb885796",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:58.305905Z",
     "iopub.status.busy": "2022-10-03T12:21:58.305415Z",
     "iopub.status.idle": "2022-10-03T12:21:59.200918Z",
     "shell.execute_reply": "2022-10-03T12:21:59.200225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.7 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.97 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1           (0 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.478 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.7 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139651003823728\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.05</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.27</td><td>0.11</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.27</td><td>1.00</td><td>0.45</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>0.11</td><td>0.45</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.05\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.27  0.11\n",
       "-0.01 -0.01  0.27  1.00  0.45\n",
       "-0.05 -0.00  0.11  0.45  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.620376\n",
       "total            22.620376"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.604388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.800867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.604388\n",
       "BIC             64.800867"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "273911f4",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c1609b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.204226Z",
     "iopub.status.busy": "2022-10-03T12:21:59.203753Z",
     "iopub.status.idle": "2022-10-03T12:21:59.285355Z",
     "shell.execute_reply": "2022-10-03T12:21:59.284670Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 -0.014 +0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.7 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   1.97 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1               (0 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2              (2.9 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.478 -0.014 +0.013) x 10   \n",
       "fake.spectrum.main.composite.sigma_2       (8.7 +/- 0.9) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.969802</td>\n",
       "      <td>-0.113184</td>\n",
       "      <td>0.113178</td>\n",
       "      <td>0.113181</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.000104</td>\n",
       "      <td>-0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.584133</td>\n",
       "      <td>-4.038689</td>\n",
       "      <td>4.024809</td>\n",
       "      <td>4.031749</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.783246</td>\n",
       "      <td>-0.139984</td>\n",
       "      <td>0.129931</td>\n",
       "      <td>0.134957</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.868455</td>\n",
       "      <td>-0.086482</td>\n",
       "      <td>0.090519</td>\n",
       "      <td>0.088500</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.969802       -0.113184   \n",
       "fake.spectrum.main.composite.b_1       0.000104       -0.003844   \n",
       "fake.spectrum.main.composite.F_2      28.584133       -4.038689   \n",
       "fake.spectrum.main.composite.mu_2     24.783246       -0.139984   \n",
       "fake.spectrum.main.composite.sigma_2   0.868455       -0.086482   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113178  0.113181   \n",
       "fake.spectrum.main.composite.b_1            0.003844  0.003844   \n",
       "fake.spectrum.main.composite.F_2            4.024809  4.031749   \n",
       "fake.spectrum.main.composite.mu_2           0.129931  0.134957   \n",
       "fake.spectrum.main.composite.sigma_2        0.090519  0.088500   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e2eb7f0",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "84c8f5da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.288279Z",
     "iopub.status.busy": "2022-10-03T12:21:59.288017Z",
     "iopub.status.idle": "2022-10-03T12:21:59.291605Z",
     "shell.execute_reply": "2022-10-03T12:21:59.290945Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d85e53a3",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b7c9fc77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.294958Z",
     "iopub.status.busy": "2022-10-03T12:21:59.294410Z",
     "iopub.status.idle": "2022-10-03T12:21:59.340061Z",
     "shell.execute_reply": "2022-10-03T12:21:59.339394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.7 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.97 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1           (0 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.478 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.7 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139651017407984\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.05</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.27</td><td>0.11</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.27</td><td>1.00</td><td>0.45</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>0.11</td><td>0.45</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.05\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.27  0.11\n",
       "-0.01 -0.01  0.27  1.00  0.45\n",
       "-0.05 -0.00  0.11  0.45  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.620376\n",
       "total            22.620376"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.604388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.800867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.604388\n",
       "BIC             64.800867"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b8df745",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "25712613",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.343212Z",
     "iopub.status.busy": "2022-10-03T12:21:59.342938Z",
     "iopub.status.idle": "2022-10-03T12:21:59.390575Z",
     "shell.execute_reply": "2022-10-03T12:21:59.389909Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.7 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.97 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1           (0 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.478 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.7 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139651011869568\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.05</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.27</td><td>0.11</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.27</td><td>1.00</td><td>0.45</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>0.11</td><td>0.45</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.05\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.27  0.11\n",
       "-0.01 -0.01  0.27  1.00  0.45\n",
       "-0.05 -0.00  0.11  0.45  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.620376\n",
       "total            22.620376"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.604388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.800867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.604388\n",
       "BIC             64.800867"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd8c8453",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8e4f990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.394939Z",
     "iopub.status.busy": "2022-10-03T12:21:59.393708Z",
     "iopub.status.idle": "2022-10-03T12:21:59.400455Z",
     "shell.execute_reply": "2022-10-03T12:21:59.399860Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12262045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.404402Z",
     "iopub.status.busy": "2022-10-03T12:21:59.403154Z",
     "iopub.status.idle": "2022-10-03T12:21:59.410019Z",
     "shell.execute_reply": "2022-10-03T12:21:59.409432Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28099804e-02, -3.69441118e-04, -1.97933721e-02,\n",
       "        -9.37895484e-05, -5.36677465e-04],\n",
       "       [-3.69441118e-04,  1.47732996e-05, -1.19950505e-06,\n",
       "        -5.92794353e-06, -4.97254717e-09],\n",
       "       [-1.97933721e-02, -1.19950505e-06,  1.62388788e+01,\n",
       "         1.43252985e-01,  3.72156003e-02],\n",
       "       [-9.37895484e-05, -5.92794353e-06,  1.43252985e-01,\n",
       "         1.78038571e-02,  5.23061783e-03],\n",
       "       [-5.36677465e-04, -4.97254717e-09,  3.72156003e-02,\n",
       "         5.23061783e-03,  7.69631984e-03]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1fcb1134",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:21:59.412975Z",
     "iopub.status.busy": "2022-10-03T12:21:59.412630Z",
     "iopub.status.idle": "2022-10-03T12:22:02.621343Z",
     "shell.execute_reply": "2022-10-03T12:22:02.620571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a5ebe0fe25204328889fdd70eae081b2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.694956447282004e-05 erg / (cm2 s)</td>\n",
       "      <td>1.5616270498768984e-05 erg / (cm2 s)</td>\n",
       "      <td>1.8293373208935133e-05 erg / (cm2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            flux  \\\n",
       "fake: total  1.694956447282004e-05 erg / (cm2 s)   \n",
       "\n",
       "                                        low bound  \\\n",
       "fake: total  1.5616270498768984e-05 erg / (cm2 s)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  1.8293373208935133e-05 erg / (cm2 s)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b140c2f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.624726Z",
     "iopub.status.busy": "2022-10-03T12:22:02.624118Z",
     "iopub.status.idle": "2022-10-03T12:22:02.646983Z",
     "shell.execute_reply": "2022-10-03T12:22:02.646314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.969802</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.000104</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.584133</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.783246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.868455</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       1.969802    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1       0.000104     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      28.584133     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     24.783246       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   0.868455     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74dbd2ea",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "69587427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.650285Z",
     "iopub.status.busy": "2022-10-03T12:22:02.649854Z",
     "iopub.status.idle": "2022-10-03T12:22:02.705574Z",
     "shell.execute_reply": "2022-10-03T12:22:02.704183Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6405248",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b97e8360",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.709546Z",
     "iopub.status.busy": "2022-10-03T12:22:02.709094Z",
     "iopub.status.idle": "2022-10-03T12:22:02.713841Z",
     "shell.execute_reply": "2022-10-03T12:22:02.713240Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "784c7471",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.716902Z",
     "iopub.status.busy": "2022-10-03T12:22:02.716209Z",
     "iopub.status.idle": "2022-10-03T12:22:02.723566Z",
     "shell.execute_reply": "2022-10-03T12:22:02.722932Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36d41379",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c42c8756",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.726873Z",
     "iopub.status.busy": "2022-10-03T12:22:02.726412Z",
     "iopub.status.idle": "2022-10-03T12:22:02.806439Z",
     "shell.execute_reply": "2022-10-03T12:22:02.805288Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "631454bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.810681Z",
     "iopub.status.busy": "2022-10-03T12:22:02.810243Z",
     "iopub.status.idle": "2022-10-03T12:22:02.817571Z",
     "shell.execute_reply": "2022-10-03T12:22:02.817031Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.620376\n",
       "total            22.620376"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45d0520e",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f43d9849",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.820695Z",
     "iopub.status.busy": "2022-10-03T12:22:02.820463Z",
     "iopub.status.idle": "2022-10-03T12:22:02.843766Z",
     "shell.execute_reply": "2022-10-03T12:22:02.842862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.969802</td>\n",
       "      <td>-0.111335</td>\n",
       "      <td>0.111414</td>\n",
       "      <td>0.111375</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.000104</td>\n",
       "      <td>-0.003831</td>\n",
       "      <td>0.003786</td>\n",
       "      <td>0.003809</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.584133</td>\n",
       "      <td>-3.866144</td>\n",
       "      <td>4.054526</td>\n",
       "      <td>3.960335</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.783246</td>\n",
       "      <td>-0.130367</td>\n",
       "      <td>0.135872</td>\n",
       "      <td>0.133119</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.868455</td>\n",
       "      <td>-0.087195</td>\n",
       "      <td>0.086488</td>\n",
       "      <td>0.086842</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.969802       -0.111335   \n",
       "fake.spectrum.main.composite.b_1       0.000104       -0.003831   \n",
       "fake.spectrum.main.composite.F_2      28.584133       -3.866144   \n",
       "fake.spectrum.main.composite.mu_2     24.783246       -0.130367   \n",
       "fake.spectrum.main.composite.sigma_2   0.868455       -0.087195   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.111414  0.111375   \n",
       "fake.spectrum.main.composite.b_1            0.003786  0.003809   \n",
       "fake.spectrum.main.composite.F_2            4.054526  3.960335   \n",
       "fake.spectrum.main.composite.mu_2           0.135872  0.133119   \n",
       "fake.spectrum.main.composite.sigma_2        0.086488  0.086842   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7dce2b5",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0219dab",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a8eea79c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.846974Z",
     "iopub.status.busy": "2022-10-03T12:22:02.846406Z",
     "iopub.status.idle": "2022-10-03T12:22:02.937238Z",
     "shell.execute_reply": "2022-10-03T12:22:02.936577Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "61623eee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:02.940416Z",
     "iopub.status.busy": "2022-10-03T12:22:02.939967Z",
     "iopub.status.idle": "2022-10-03T12:22:03.095447Z",
     "shell.execute_reply": "2022-10-03T12:22:03.094674Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "83b94ab4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.099335Z",
     "iopub.status.busy": "2022-10-03T12:22:03.098908Z",
     "iopub.status.idle": "2022-10-03T12:22:03.137319Z",
     "shell.execute_reply": "2022-10-03T12:22:03.136600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.7 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.97 +/- 0.11   1 / (cm2 keV s)\n",
       "fake.spectrum.main.composite.b_1           (0 +/- 4) x 10^-3  1 / (cm2 keV2 s)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (cm2 s)\n",
       "fake.spectrum.main.composite.mu_2     (2.478 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.7 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139651017407792\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.05</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.27</td><td>0.11</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.27</td><td>1.00</td><td>0.45</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>0.11</td><td>0.45</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.05\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.27  0.11\n",
       "-0.01 -0.01  0.27  1.00  0.45\n",
       "-0.05 -0.00  0.11  0.45  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.620376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.620376\n",
       "total            22.620376"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.604388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.800867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.604388\n",
       "BIC             64.800867"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6c8cc1a",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "acbebf68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.140551Z",
     "iopub.status.busy": "2022-10-03T12:22:03.140172Z",
     "iopub.status.idle": "2022-10-03T12:22:03.150229Z",
     "shell.execute_reply": "2022-10-03T12:22:03.149613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (0 +/- 4) x 10^-3, hpd: (0.1 -3.4 +4) x 10^-3\n",
      "equal-tail: 1.97 +/- 0.11, hpd: 1.97 -0.09 +0.13\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 1.97 +/- 0.11, hpd: 1.97 -0.10 +0.11\n",
      "(1.8615574140332352, 2.0797880355576788)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd142ed7",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "46b79bbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.153704Z",
     "iopub.status.busy": "2022-10-03T12:22:03.153345Z",
     "iopub.status.idle": "2022-10-03T12:22:03.159741Z",
     "shell.execute_reply": "2022-10-03T12:22:03.159126Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a14020b1",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1dd2b782",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.163852Z",
     "iopub.status.busy": "2022-10-03T12:22:03.162540Z",
     "iopub.status.idle": "2022-10-03T12:22:03.170477Z",
     "shell.execute_reply": "2022-10-03T12:22:03.169692Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: (1.01 -0.06 +0.07) x 10, hpd: (1.01 -0.07 +0.06) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c78af172",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "94511269",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.174663Z",
     "iopub.status.busy": "2022-10-03T12:22:03.173424Z",
     "iopub.status.idle": "2022-10-03T12:22:03.180541Z",
     "shell.execute_reply": "2022-10-03T12:22:03.179759Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (0.2 -1.5 +1.1) x 10^3, hpd: (0.2 -1.5 +1.1) x 10^3\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e49c5c19",
   "metadata": {},
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "70f4a4c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.183658Z",
     "iopub.status.busy": "2022-10-03T12:22:03.183219Z",
     "iopub.status.idle": "2022-10-03T12:22:03.190561Z",
     "shell.execute_reply": "2022-10-03T12:22:03.189813Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 1.97 +/- 0.11, hpd: 1.97 -0.10 +0.12\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58b9e69c",
   "metadata": {},
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "fee4e84b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.194435Z",
     "iopub.status.busy": "2022-10-03T12:22:03.193193Z",
     "iopub.status.idle": "2022-10-03T12:22:03.202588Z",
     "shell.execute_reply": "2022-10-03T12:22:03.201995Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "\n",
    "        if par.free:\n",
    "\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "04c94ff2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:03.205577Z",
     "iopub.status.busy": "2022-10-03T12:22:03.205130Z",
     "iopub.status.idle": "2022-10-03T12:22:08.176327Z",
     "shell.execute_reply": "2022-10-03T12:22:08.175416Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.97 -0.11 +0.10, hpd: 1.97 -0.10 +0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "eb379d66059e4504ad74bff218e97889",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96348706",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a91fb9a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:08.180041Z",
     "iopub.status.busy": "2022-10-03T12:22:08.179348Z",
     "iopub.status.idle": "2022-10-03T12:22:14.755411Z",
     "shell.execute_reply": "2022-10-03T12:22:14.754698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a636fecf0dfc4aada194957ed79057a4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "617c676442244a8a82dd755aaa855d7f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.99 -0.13 +0.11</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-0.8 -2.6 +5) x 10^-3</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.75 -0.6 +0.30) x 10</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.478 -0.020 +0.012) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 -1.1 +1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                1.99 -0.13 +0.11   \n",
       "fake.spectrum.main.composite.b_1          (-0.8 -2.6 +5) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.75 -0.6 +0.30) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.478 -0.020 +0.012) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (8.8 -1.1 +1.0) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-25.89152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-25.89152</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data        -25.89152\n",
       "total           -25.89152"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>63.146677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>71.343155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>67.671271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>0.408388</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              63.146677\n",
       "BIC              71.343155\n",
       "DIC              67.671271\n",
       "PDIC              0.408388"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7864c72d",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d06daac1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:14.758783Z",
     "iopub.status.busy": "2022-10-03T12:22:14.758340Z",
     "iopub.status.idle": "2022-10-03T12:22:14.761719Z",
     "shell.execute_reply": "2022-10-03T12:22:14.761066Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f411577c",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a03f0a2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:14.764809Z",
     "iopub.status.busy": "2022-10-03T12:22:14.764362Z",
     "iopub.status.idle": "2022-10-03T12:22:14.841236Z",
     "shell.execute_reply": "2022-10-03T12:22:14.840033Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "41d1cc4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:14.844421Z",
     "iopub.status.busy": "2022-10-03T12:22:14.844029Z",
     "iopub.status.idle": "2022-10-03T12:22:14.903713Z",
     "shell.execute_reply": "2022-10-03T12:22:14.902956Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8803a46",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "528e9ad6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:14.907205Z",
     "iopub.status.busy": "2022-10-03T12:22:14.906732Z",
     "iopub.status.idle": "2022-10-03T12:22:14.932543Z",
     "shell.execute_reply": "2022-10-03T12:22:14.931741Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0525bf",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "390310be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:14.935983Z",
     "iopub.status.busy": "2022-10-03T12:22:14.935602Z",
     "iopub.status.idle": "2022-10-03T12:22:16.496180Z",
     "shell.execute_reply": "2022-10-03T12:22:16.495486Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fa4d54f",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "24c06c96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:16.500278Z",
     "iopub.status.busy": "2022-10-03T12:22:16.499598Z",
     "iopub.status.idle": "2022-10-03T12:22:16.524788Z",
     "shell.execute_reply": "2022-10-03T12:22:16.524051Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.985862</td>\n",
       "      <td>-0.130433</td>\n",
       "      <td>0.114221</td>\n",
       "      <td>0.122327</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.000843</td>\n",
       "      <td>-0.002639</td>\n",
       "      <td>0.004584</td>\n",
       "      <td>0.003611</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>27.508246</td>\n",
       "      <td>-5.764375</td>\n",
       "      <td>2.970335</td>\n",
       "      <td>4.367355</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.779551</td>\n",
       "      <td>-0.201710</td>\n",
       "      <td>0.118027</td>\n",
       "      <td>0.159869</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.878813</td>\n",
       "      <td>-0.114360</td>\n",
       "      <td>0.098805</td>\n",
       "      <td>0.106583</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.985862       -0.130433   \n",
       "fake.spectrum.main.composite.b_1      -0.000843       -0.002639   \n",
       "fake.spectrum.main.composite.F_2      27.508246       -5.764375   \n",
       "fake.spectrum.main.composite.mu_2     24.779551       -0.201710   \n",
       "fake.spectrum.main.composite.sigma_2   0.878813       -0.114360   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.114221  0.122327   \n",
       "fake.spectrum.main.composite.b_1            0.004584  0.003611   \n",
       "fake.spectrum.main.composite.F_2            2.970335  4.367355   \n",
       "fake.spectrum.main.composite.mu_2           0.118027  0.159869   \n",
       "fake.spectrum.main.composite.sigma_2        0.098805  0.106583   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "03c106e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:16.528076Z",
     "iopub.status.busy": "2022-10-03T12:22:16.527606Z",
     "iopub.status.idle": "2022-10-03T12:22:16.555934Z",
     "shell.execute_reply": "2022-10-03T12:22:16.555152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.985862</td>\n",
       "      <td>-0.137910</td>\n",
       "      <td>0.104823</td>\n",
       "      <td>0.121366</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.000843</td>\n",
       "      <td>-0.002710</td>\n",
       "      <td>0.004485</td>\n",
       "      <td>0.003597</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>27.508246</td>\n",
       "      <td>-5.616170</td>\n",
       "      <td>3.049637</td>\n",
       "      <td>4.332904</td>\n",
       "      <td>1 / (cm2 s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.779551</td>\n",
       "      <td>-0.180647</td>\n",
       "      <td>0.132183</td>\n",
       "      <td>0.156415</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.878813</td>\n",
       "      <td>-0.132459</td>\n",
       "      <td>0.075519</td>\n",
       "      <td>0.103989</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.985862       -0.137910   \n",
       "fake.spectrum.main.composite.b_1      -0.000843       -0.002710   \n",
       "fake.spectrum.main.composite.F_2      27.508246       -5.616170   \n",
       "fake.spectrum.main.composite.mu_2     24.779551       -0.180647   \n",
       "fake.spectrum.main.composite.sigma_2   0.878813       -0.132459   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.104823  0.121366   \n",
       "fake.spectrum.main.composite.b_1            0.004485  0.003597   \n",
       "fake.spectrum.main.composite.F_2            3.049637  4.332904   \n",
       "fake.spectrum.main.composite.mu_2           0.132183  0.156415   \n",
       "fake.spectrum.main.composite.sigma_2        0.075519  0.103989   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (cm2 keV s)  \n",
       "fake.spectrum.main.composite.b_1      1 / (cm2 keV2 s)  \n",
       "fake.spectrum.main.composite.F_2           1 / (cm2 s)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdeabd0c",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e71f0cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:16.559474Z",
     "iopub.status.busy": "2022-10-03T12:22:16.559070Z",
     "iopub.status.idle": "2022-10-03T12:22:16.572862Z",
     "shell.execute_reply": "2022-10-03T12:22:16.572156Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (-0.2 -3.3 +4) x 10^-3, hpd: (-0.2 -3.3 +4) x 10^-3\n",
      "equal-tail: 1.97 -0.12 +0.13, hpd: 1.97 -0.13 +0.12\n",
      "equal-tail: 1.97 +/- 0.12, hpd: 1.97 -0.12 +0.11\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b6ca537",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8db0c2a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-03T12:22:16.575770Z",
     "iopub.status.busy": "2022-10-03T12:22:16.575402Z",
     "iopub.status.idle": "2022-10-03T12:22:21.536087Z",
     "shell.execute_reply": "2022-10-03T12:22:21.535195Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.97 -0.12 +0.13, hpd: 1.97 -0.13 +0.12\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f8c6aa88e025436a9cd64f3d1011ab5c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cae4957",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "000e2404730f4ac18b1a886d7153b584": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "01ab35a454eb4bbcb35ae541212d9489": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "03b6b0b02ddb478cb862c8ad78f70f06": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e6afcd2a0f44ba1808e8537fc6b719b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_14f72850a968443a85b0a4bb74d66b86",
       "placeholder": "​",
       "style": "IPY_MODEL_c762e0497ec04c6293505f184d108531",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "0ec851b6a59d4ba3b8f99609fed9420e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ba2739c88776426997f57c389e6f240c",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b068fbb766124940b1dc5e9fd4445bcd",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "107e595b1ed74d5081b01f06da4f48df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "14f72850a968443a85b0a4bb74d66b86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19d001169ee44ae99c2833951c7b1615": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dc5044d633f043539b6a65268f13a94a",
       "placeholder": "​",
       "style": "IPY_MODEL_9e11af60562243b9903174b08189de43",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:04&lt;00:00, 21.21it/s]"
      }
     },
     "1b3f40f1a1dd4fd88161b82cf7e463da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "21861293662e4a868a1cb51a55ab2583": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2226a7e3266f47abaa088298699508b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a7547ffb26784f3c87107c584baff90a",
       "placeholder": "​",
       "style": "IPY_MODEL_d18928ef19bd466abbf572b235a1e99e",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:04&lt;00:00, 21.12it/s]"
      }
     },
     "2402674ee14b427e9aa8c7c224445aeb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2658872ed1aa4a15af1695de865b106f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "26cf3be3c7654b5a9ab4c56a32020e1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "26e0e782dd074c7f86295b92711c9dce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2bde0870b8f544f68ca87b2d08890edd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2c135e7685fc408e982bb04e30d2ee0e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_107e595b1ed74d5081b01f06da4f48df",
       "placeholder": "​",
       "style": "IPY_MODEL_000e2404730f4ac18b1a886d7153b584",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "2eb324c1b6bc4904ae4a9c626901ec98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_638e3e4a970947d0b5562257ce08fd1d",
       "placeholder": "​",
       "style": "IPY_MODEL_21861293662e4a868a1cb51a55ab2583",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "30ac25e33c0d4559bee4179625cb95d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_85821bcc87ee42a3946ddf195a514242",
       "placeholder": "​",
       "style": "IPY_MODEL_a3791261ef9e49aaa4dac18ec6461a05",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "6002b715b2e34b3c9b825d33ce84306c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cb8cdd655865439c89f9f399cb283dd6",
       "placeholder": "​",
       "style": "IPY_MODEL_c35248845def42749376a2b145739213",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "617c676442244a8a82dd755aaa855d7f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2c135e7685fc408e982bb04e30d2ee0e",
        "IPY_MODEL_a5716facc647427e98e32d8baea1d7de",
        "IPY_MODEL_9eee284e8f7847fba057e62aabc5ea0a"
       ],
       "layout": "IPY_MODEL_03b6b0b02ddb478cb862c8ad78f70f06",
       "tabbable": null,
       "tooltip": null
      }
     },
     "638e3e4a970947d0b5562257ce08fd1d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "737fbe7b51e341aebe06c1af7c481e11": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "75d8f3798b584a0db980bf8d247ac79b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_93592f73e6d64dd3bc1e3d4d9700e32e",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_780373d8a18e4b99bb7e12fbb9a60e7f",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "780373d8a18e4b99bb7e12fbb9a60e7f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "781026e44e4f4007aad83213627496c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7940cd085fa7439a91b7c8c592fb9751": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1b3f40f1a1dd4fd88161b82cf7e463da",
       "placeholder": "​",
       "style": "IPY_MODEL_781026e44e4f4007aad83213627496c4",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:03&lt;00:00,  3.19s/it]"
      }
     },
     "817104648c124eb08c50e27dace5c135": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8557482344e24deead87c3e6497f01f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_817104648c124eb08c50e27dace5c135",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c8617f73477b46e9a6fd6e0f6929734a",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "85821bcc87ee42a3946ddf195a514242": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c80f418a54a46afa86078183bf910b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2bde0870b8f544f68ca87b2d08890edd",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b1df0203dd994c8cbd649ce06368fc84",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "8fc25815245541b681b963aceb37806f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "93592f73e6d64dd3bc1e3d4d9700e32e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9e11af60562243b9903174b08189de43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9eee284e8f7847fba057e62aabc5ea0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2658872ed1aa4a15af1695de865b106f",
       "placeholder": "​",
       "style": "IPY_MODEL_26cf3be3c7654b5a9ab4c56a32020e1c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:04&lt;00:00, 246.44it/s]"
      }
     },
     "a3791261ef9e49aaa4dac18ec6461a05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a5716facc647427e98e32d8baea1d7de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_01ab35a454eb4bbcb35ae541212d9489",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ad7c5c17614147fc968f5c213f41f678",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "a5ebe0fe25204328889fdd70eae081b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6002b715b2e34b3c9b825d33ce84306c",
        "IPY_MODEL_0ec851b6a59d4ba3b8f99609fed9420e",
        "IPY_MODEL_7940cd085fa7439a91b7c8c592fb9751"
       ],
       "layout": "IPY_MODEL_737fbe7b51e341aebe06c1af7c481e11",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a636fecf0dfc4aada194957ed79057a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_30ac25e33c0d4559bee4179625cb95d5",
        "IPY_MODEL_8557482344e24deead87c3e6497f01f5",
        "IPY_MODEL_ec128033f5dc4c0cafb0bef8bf6f7851"
       ],
       "layout": "IPY_MODEL_26e0e782dd074c7f86295b92711c9dce",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a7547ffb26784f3c87107c584baff90a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ad7c5c17614147fc968f5c213f41f678": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b068fbb766124940b1dc5e9fd4445bcd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "b1df0203dd994c8cbd649ce06368fc84": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b5f8d086439b48778117a74fffe2986e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ba2739c88776426997f57c389e6f240c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c35248845def42749376a2b145739213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c762e0497ec04c6293505f184d108531": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c8617f73477b46e9a6fd6e0f6929734a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cb8cdd655865439c89f9f399cb283dd6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d18928ef19bd466abbf572b235a1e99e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dc5044d633f043539b6a65268f13a94a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb379d66059e4504ad74bff218e97889": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0e6afcd2a0f44ba1808e8537fc6b719b",
        "IPY_MODEL_75d8f3798b584a0db980bf8d247ac79b",
        "IPY_MODEL_2226a7e3266f47abaa088298699508b7"
       ],
       "layout": "IPY_MODEL_2402674ee14b427e9aa8c7c224445aeb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ec128033f5dc4c0cafb0bef8bf6f7851": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_effeaa951b844440b46a5b7f696a48c9",
       "placeholder": "​",
       "style": "IPY_MODEL_8fc25815245541b681b963aceb37806f",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 232.88it/s]"
      }
     },
     "effeaa951b844440b46a5b7f696a48c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f8c6aa88e025436a9cd64f3d1011ab5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2eb324c1b6bc4904ae4a9c626901ec98",
        "IPY_MODEL_8c80f418a54a46afa86078183bf910b0",
        "IPY_MODEL_19d001169ee44ae99c2833951c7b1615"
       ],
       "layout": "IPY_MODEL_b5f8d086439b48778117a74fffe2986e",
       "tabbable": null,
       "tooltip": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
