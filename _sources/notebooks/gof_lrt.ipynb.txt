{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f1639ebb",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "511d9c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:21.438486Z",
     "iopub.status.busy": "2022-10-04T22:10:21.438003Z",
     "iopub.status.idle": "2022-10-04T22:10:21.502683Z",
     "shell.execute_reply": "2022-10-04T22:10:21.501921Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8297c145",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:21.506675Z",
     "iopub.status.busy": "2022-10-04T22:10:21.506382Z",
     "iopub.status.idle": "2022-10-04T22:10:24.539897Z",
     "shell.execute_reply": "2022-10-04T22:10:24.539109Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "69f06f7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:24.544121Z",
     "iopub.status.busy": "2022-10-04T22:10:24.543474Z",
     "iopub.status.idle": "2022-10-04T22:10:24.571775Z",
     "shell.execute_reply": "2022-10-04T22:10:24.571123Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e24b8b4",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57bbe598",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:24.575208Z",
     "iopub.status.busy": "2022-10-04T22:10:24.574981Z",
     "iopub.status.idle": "2022-10-04T22:10:25.979022Z",
     "shell.execute_reply": "2022-10-04T22:10:25.978154Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:10:24 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:10:24\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=412700;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=770182;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:10:25 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:10:25\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=907060;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=672050;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9406a6e",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "067ce976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:25.982522Z",
     "iopub.status.busy": "2022-10-04T22:10:25.982025Z",
     "iopub.status.idle": "2022-10-04T22:10:27.014158Z",
     "shell.execute_reply": "2022-10-04T22:10:27.013447Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=544075;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=685207;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=416475;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=589796;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(8.8 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(1.2 +/- 0.7) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (8.8 +/- 0.8) x 10^-1   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b  (1.2 +/- 0.7) x 10^-1  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140672130362192\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>29.394821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>29.394821</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          29.394821\n",
       "total         29.394821"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>63.044962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>66.613689</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             63.044962\n",
       "BIC             66.613689"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88646ba4",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a0aed795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:27.017177Z",
     "iopub.status.busy": "2022-10-04T22:10:27.016933Z",
     "iopub.status.idle": "2022-10-04T22:10:27.024441Z",
     "shell.execute_reply": "2022-10-04T22:10:27.023836Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e74ff610",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5cd2a089",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:10:27.027347Z",
     "iopub.status.busy": "2022-10-04T22:10:27.027124Z",
     "iopub.status.idle": "2022-10-04T22:11:34.052668Z",
     "shell.execute_reply": "2022-10-04T22:11:34.051924Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d23a8a091cb34d888b2cbc44d4b0de4f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8482d387",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "02182deb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:34.056569Z",
     "iopub.status.busy": "2022-10-04T22:11:34.055959Z",
     "iopub.status.idle": "2022-10-04T22:11:34.060822Z",
     "shell.execute_reply": "2022-10-04T22:11:34.060176Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.135), ('data', 0.135)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4c9b56d",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fbccba70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:34.064077Z",
     "iopub.status.busy": "2022-10-04T22:11:34.063468Z",
     "iopub.status.idle": "2022-10-04T22:11:34.883000Z",
     "shell.execute_reply": "2022-10-04T22:11:34.882308Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:11:34 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:11:34\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=950697;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=90084;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=950069;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=671378;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=192679;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=910658;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=51243;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=730109;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=40945;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=949121;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=786497;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=343308;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=929243;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=155763;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=341763;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=821524;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=465969;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=94612;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=16730;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=770723;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=293338;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=60433;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=55449;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=817587;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a0f2e6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:34.886173Z",
     "iopub.status.busy": "2022-10-04T22:11:34.885527Z",
     "iopub.status.idle": "2022-10-04T22:11:35.463359Z",
     "shell.execute_reply": "2022-10-04T22:11:35.462518Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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jNGAAQN07733avny5Ro5cqTat2+vIUOG1AdYpAYjEAgErC4C36rbNffPf/6zevfubXU5AAAAiANVVVWSpIyMDIsrQbKx8u8WS3MBAAAAADHF0lyLud1uud1uSZLH47G4GgAAAACIPoKoxVwul1wul6T/LM0FAAAAgGTG0lwAAAAAQEwRRAEAAAAAMUUQBQAAAADEFEEUAAAAQLOtWrVKP/rRjzRu3DiNHDlSP/3pT1VbW9vi+1100UXasWNHs1/3ox/9SJs2bWq03913361hw4Zp3LhxGjNmjK677jp99tlnLSlVkrRv3z6dc845LX59LFVUVMTd8ZBsVgQAAACgWQ4ePKh7771XS5cuVdeuXSVJn376qQzDsLiy8G644QZNnDhRkvTss89q3rx5euKJJyyrpy6422ypNz9IEAUAAAASzOLPt6qypjpq989Ma6Wre5wZsv3w4cOy2+1q165d/bUzzjij/s+fffaZ5syZo4MHD0qSrr32Wk2YMEELFy7Uq6++qpqaGqWlpenXv/61BgwY0OD+ZWVlmj17tvbv3y+v16uLLrpIt99+uyTpn//8p+6//375/X7169dPfr+/2e8vEAjI4/HU119TU6ObbrpJR44ckdfrVZ8+ffTggw8qMzNTkrRkyRI9//zzCgQCSktLaxBefT6fZs6cqczMTP3mN7/R4cOHdffdd+vAgQPq0qWL2rVrpx49emjatGmaP3++du3apcrKSv3rX//SwoULtXHjRi1YsECSdPLJJ+vBBx9UTk6Oli5dKrfbraefflqS9M477+i5557TCy+8oE2bNunBBx/UOeeco3/+85/y+/16+OGH1a9fP0nSokWL9NxzzykzM1OXXHJJs39G0UYQBQAAABJMZU21Kmp8lo3fu3dvDRw4UBdddJEGDRqkAQMGaMyYMcrJyVFNTY1uvvlmTZs2TVdccYUk6euvv5YkjRs3TpMmTZIkbdmyRXfffbfeeOONBve/++67ddNNN+ncc8+tD4mvv/66Lr74Yt1+++166KGHNGTIEL333ntaunRpk+tesGCBXn75ZX399dey2+3629/+Jkmy2+169NFH1aFDBwUCAc2aNUt/+9vfdOONN2rTpk166qmntGjRIp100kk6fvy4pG/DuCQdO3ZMU6dO1ZAhQ/Tzn/9ckjR79mz1799ft956q8rKyjR+/Hj16NGjvo6PP/5Yr7zyijp16qRdu3bpkUce0dKlS5WTk6NnnnlGv/rVr/SXv/yl0ffz+eef67e//a1mzZqlv//973r88ce1YMEC7dq1S/Pnz9fLL7+sk046SX/4wx+a/DOKFYIoAAAAkGAy01pZen+bzab58+frs88+04cffqh169bpj3/8o5YsWSKfzyev11sfQiWpY8eOkqTt27frj3/8o44ePSq73a4vvvhCVVVVysjIqO9bWVmpjRs36tChQydc++KLL/T555/LbrdryJAhkqTzzz9fubm5TX5f312au2TJEt16661aunSpAoGACgsLtXbtWvn9fpWXl9fP1K5Zs0bjxo3TSSedJElq3bp1/f2qq6s1YcIEFRQUaPz48fXX33//fd11112SpM6dO2vEiBEn1HHBBReoU6dOkqRNmzZp2LBhysnJkfTt7PFTTz3VpJneU089VWeddZYkacCAAXruuefqxx8+fHh9zRMmTNCf/vSnJv+cYoEgajG32y232y1J8ng8FlcDAACARBBu2Wws9ezZUz179tSPf/xj3XDDDXr77bd1/vnnB+3r8/k0bdo0/fWvf9WZZ54pj8ejgQMHyufznRBEA4GAJGnx4sVKT08/4R47d+5scN+WPpd6+eWXa+bMmfr666/17rvvatOmTfrb3/6mrKwsPf/883r//fcbvUdaWpoGDhyot99+W6NHj1arVsED/H/XWLfkt7G+drv9hA2gvF7vCX2/+/Ox2Wwhw2s8Prubek/FxhmXy6WHH35YDz/8sKZNmxb18VbMWxf1MQAAAJDcSktLtXnz5vrvv/nmG+3bt0+5ubnq3r27MjIy9Oqrr9a3f/311/L5fKqurtb3vvc9SdILL7wQ9N5Op1ODBw/Ws88+e8J4Bw4cUI8ePeT3++tD4oYNG/Tll1+26D1s3LhRHTp0UPv27XXs2DG1b99eWVlZ8ng8evnll+v7XXTRRVq+fHn9867Hjx+vX55rGIYeeOABnXzyybrllltUVVUlSfrBD35Qf49Dhw5pzZo1IesYPHiw3n33XZWWlkr69tnO8847T3a7Xd26dVNRUZGqqqpUU1Nzws80nB/84Ad69913VVZWJkn6+9//3rwfTgwwI5piVsxfpzHTh1tdBgAAABJYTU2Nnn76ae3bt08ZGRny+/364Q9/KJfLJUl6+umnNXv2bP3pT3+SYRi6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BtX32bdvn1q3bq2TTjqp/lqPHj30xRdfxOT9AECiaWW3SzVSQAq5aRHHvwAAgKRamvvNN9+osLBQJSUlys/PD9v3oYce0uLFi3XJJZfo1ltvlc1m04wZM7R169b6PsePH5fT6TzhdU6nU8ePhz9jDwBS1eDOuWqf3jrk8S4c/wIAAKQkmxHNzs7Wyy+/rOzsbO3cuVM33nhj0H7bt2/X6tWrNWXKFE2YMEGSdNlll2nixIl65pln9Mwzz0iSWrdurYqKihNeW1FRodatW0f3jQBAgspvm93oTGYyHP8CAAAik1Qzog6HQ9nZjS/lWrt2rex2u8aOHVt/LT09XaNHj9ann36q0tJSSdIpp5yi48ePq6ysrL7fF198oe7du5tfPAAAAACkiKSaEW2q3bt365RTTmmw7Pb000+XJO3Zs0c5OTnKzMzU+eefr+eee0633XabNm/erM8++0znn39+i8c+dOiQDh8+HLStpKSkxfcFACBWVsxjox8AQGSiGkQDgYD27dsnh8OhnJycaA7VLIcPHw46c1p37dChQ/XX7rjjDv32t7/VFVdcoc6dO2vWrFlq27Zti8devny5CgsLW/x6AAAiFWmQZMdZAECkTAmia9eu1Xvvvadbb71Vbdq0kST961//0t13310/yzdixAjde++9stvtZgwZEa/Xq1atWjW47nA46tvrtG/fXo888ohpY48dO1ZDhw4N2lZSUqLZs2ebNhYAJKpwx79IoY+AqeT50iYhSAIArGZKEF22bJm+/vrr+hAqSU8++aSKi4t19tln69ixY1qzZo0GDhyoMWPGmDFkRNLT01VdXd3gus/nq2+Plk6dOqlTp05Ruz8AJLKmHP8iNX4ETKs4+KUnAAAIzZTNioqLi+ufr5S+Pc9z48aNuuiii/TYY4/pT3/6k7p166aVK1eaMVzEsrOzgz6nWXeNoAgA1mjK8S+NHQHTPr21BnfOtfqtAACAMEyZET127Jg6duxY//3WrVvl9/t18cUXfztIWprOOeccvfXWW2YMF7H8/Hx9/PHHqqioOGHDou3bt9e3AwBirynHv0jhj4ABAADxz5QZUafTqWPHjtV///HHH8tms+mss86qv5aWlqaqqiozhovYiBEj5Pf7tXz58vprPp9PK1euVN++feNqYyUAAAAASDamzIieeuqp2rBhgyZPniybzSa3261e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iCmCKAAAAAAgpgiiAAAAAICYIogCAAAAAGKKIAoAAAAAiKk0qwtA87zyyitasWKFPv/8c/3kJz/R9ddfb3VJAIAE4vP59Ic//EEfffSRPB6P8vLyNHXqVH3/+9+3ujQAQAJ55JFHtH79elVVVSknJ0c33nijhg4d2uTXG4FAIBDF+mCyd999V4ZhyO1269RTTyWIAgCa5fjx43rxxRc1atQode7cWe+8844ef/xxvfjii8rMzLS6PABAgigpKdHJJ58sh8OhHTt26I477tCiRYvUrl27Jr2epbkJZtiwYTr//POVlZVldSkAgATUunVrTZw4UTk5ObLZbLr44ouVlpamvXv3Wl0aACCBdOvWTQ6HQ5JkGIaqq6t16NChJr+epblRVFlZqUWLFmn79u3asWOHysvLdc8992jUqFEN+vp8Pi1YsECrVq1SeXm5evbsqcmTJ2vQoEEWVA4AiBfR/izZu3evysvL1bVr12i+DQCAhaL1WfKHP/xBK1eulM/n0w9+8AP16NGjyTUxIxpF33zzjQoLC1VSUqL8/PywfR966CEtXrxYl1xyiW699VbZbDbNmDFDW7dujVG1AIB4FM3PEq/Xq9mzZ+u6665jpQ0AJLFofZbccccdevPNN/XYY49p0KBBMgyjyTURRKMoOztbL7/8sv7xj39oypQpIftt375dq1ev1o033qibb75ZY8eO1eOPP64uXbromWeeiWHFAIB4E63PkpqaGt13333q2rWrJk6cGMV3AACwWjRzid1u18CBA7V582Zt3LixyTURRKPI4XAoOzu70X5r166V3W7X2LFj66+lp6dr9OjR+vTTT1VaWhrNMgEAcSwanyW1tbWaPXu2DMPQzJkzm/UbbABA4olFLvH7/dq/f3+TayKIxoHdu3frlFNOkdPpPOH66aefLknas2dP/bWamhp5vV7V1tbK7/fL6/XK7/fHtF4AQPxpzmfJo48+qsOHD+v+++9XWhrbRQAAvtXUzxKPx6O33npLlZWVqqmp0TvvvKOPP/5YZ511VpPH4tMnDhw+fDjobyjqrn1396nnn39ehYWF9d+/8MILIR80BgCkjqZ+lhw4cECvvvqqHA7HCb/xnjt3brP+BwQAIPk09bPEMAy9+uqreuyxxxQIBNS1a1fde++9Ou2005o8FkE0Dni9XrVq1arB9brtkL1eb/2166+/nrNDAQANNPWzpEuXLlq3bl1MawMAJIamfpY4nU7NmzcvorFYmhsH0tPTVV1d3eC6z+erbwcAIBw+SwAAkYrlZwlBNA5kZ2fr8OHDDa7XXevUqVOsSwIAJBg+SwAAkYrlZwlBNA7k5+dr3759qqioOOH69u3b69sBAAiHzxIAQKRi+VlCEI0DI0aMkN/v1/Lly+uv+Xw+rVy5Un379lVOTo6F1QEAEgGfJQCASMXys4TNiqJsyZIl8ng89dPZ69ev18GDByVJV155pbKystS3b19deOGFevbZZ3X06FF17dpVb7zxhg4cOKC77rrLyvIBAHGAzxIAQKTi7bPECAQCAVPviBNcffXVOnDgQNC2F198USeffLKkb3egWrBggVatWiWPx6MePXpo8uTJOvfcc2NZLgAgDvFZAgCIVLx9lhBEAQAAAAAxxTOiAAAAAICYIogCAAAAAGKKIAoAAAAAiCmCKAAAAAAgpgiiAAAAAICYIogCAAAAAGKKIAoAAAAAiCmCKAAAAAAgpgiiAAAAAICYIogCAAAAAGKKIAoAAOotXrxYF110kf71r3/VX3v99dc1fPhwvf766xZW9h+vvvqqRowYoc8++8zqUgAALUQQBQAkrX/9618aPnx42K+rr77a6jLjRnl5uZ5//nldfvnlOvnkk6M61gcffKDhw4frzjvvbLTvAw88oOHDh+utt96SJI0cOVI5OTl65plnolojACB60qwuAACAaOvatasuueSSoG1ZWVkxriZ+LV68WMeOHdOECROiPtY555yjnJwcbd68WaWlpcrJyQnaz+Px6N1331VWVpaGDx8uSUpLS9PVV1+tefPmadu2berXr1/U6wUAmIsgCgBIel27dtX1119vdRlxraamRq+++qr69eunrl27Rn08m82mUaNGqbCwUG+88YZ+9rOfBe3ndrvl9Xp1+eWXKz09vf76xRdfrCeffFLLli0jiAJAAmJpLgAA3zF8+HDdeuut+vrrr/Xb3/5WY8aMkcvl0s9//nN9/PHHQV9TWVmp5557Tj/96U/lcrl0+eWX684779TWrVsb9L311ls1fPhweb1e/fnPf9aPf/xjXXjhhXruuefq+6xdu1YFBQVyuVwaN26c5s6dq/Lycl199dUnLCV+8MEHNXz4cG3fvj1oXQsWLNDw4cPldrsbfd8ffPCBDh8+rBEjRjTat87Bgwf1s5/9TC6XS2vWrKm/fuTIEc2fP18TJkzQxRdfrDFjxujXv/61Pv/88xNef/nll8swDL3++usKBAJBx1i5cqUkafTo0Sdcb9++vQYMGKA1a9aosrKyyTUDAOIDQRQAgP/i8Xh0yy23qLi4WJdeeqmGDx+uoqIi/eIXv2gQpo4dO6YpU6aosLBQbdq00bhx4zR8+HDt2rVL06dP17vvvht0jHvvvVdvvPGGBgwYoP/5n/+pfybztdde07333qt9+/bpsssu08iRI/Xpp5/qjjvuUE1NzQn3GDt2bP1r/pvf79fKlSvVrl27+iWt4WzevFmSdMYZZzT+A5JUXFysm2++WQcPHtQjjzxSH2D379+vyZMn6x//+Ie+973v6Uc/+pF+8IMf6IMPPtCUKVNOCM1dunTRwIED9dVXXwUN+Z9//rl27typ0047Tb169WrQfsYZZ8jn8+mTTz5pUs0AgPjB0lwAQNLbv3//CTOO33XGGWdo8ODBJ1zbs2ePxo8fr9tuu00227e/sz377LM1d+5cLV26VL/4xS/q+z7++OP64osvNGPGDF1xxRX1148cOaKCggI98sgjOvfcc09YVipJhw8f1sKFC9W2bdv6a+Xl5XriiSfUunVrPfvss8rNzZUkFRQU6Be/+IWKiorUpUuX+v5nnXWW8vLytHr1ak2dOlWtW7eub/vggw9UVlamq666Sg6Ho9Gf0bZt22Sz2ZSfn99o308//VR33XWX0tLSNH/+/BNe89vf/lZff/21Hn30UZ177rn113/605+qoKBAc+fOVWFhYf310aNH66OPPtLKlSt19tlnnzBOqNnQOr1795YkffLJJyeMBQCIf8yIAgCS3v79+1VYWBj0a9OmTQ36t27dWj//+c/rQ6j07U6tdrtdO3furL929OhRvfPOOzr77LNPCKGS1KFDB02YMEFHjx6tn238rkmTJp0QQiXpvffe0/Hjx3X55ZfXh1Dp2815Jk+eHPS9jR07VpWVlVq9evUJ11999VVJ0pgxY0L9WE5QVlamrKysRkPrxo0bdfvtt6tNmzZ6+umnTwihu3bt0ieffKLLLrusQTDMzc3VFVdcoc8///yEWeVhw4apXbt2Wrt2rSoqKuqv19TUaNWqVXI4HCE3murYsaOkb5cIAwASCzOiAICkd+655+rRRx9tcv9TTjlFmZmZJ1xLS0tTx44d5fF46q/t3LlTfr9f1dXVQWdc9+3bJ0kqKSnRkCFDTmg7/fTTG/SvOxfzzDPPbNDWt29f2e32Btcvu+wy/elPf9Krr75aH4a//vprbdiwQd///veVl5fXyLv91rFjx9S5c+ewfd555x19+OGH6tmzpx555BF16NDhhPa6ZbdHjhwJ+vP48ssv6/9vjx49JKk+aL700ktyu90aN26cJGn9+vU6evSoXC6X2rRpE7SeuuvffPNNk94jACB+EEQBAPgvTqcz6HW73a7a2tr6748dOybp22Wt27ZtC3m/qqqqBtfqZvO+q25G8L8DnvTtLrPt2rVrcL1Nmza68MIL9cYbb+jzzz9Xjx499Prrr8vv9zd5NlSS0tPT5fP5wvb59NNP5ff7deaZZwatse7nsXHjRm3cuDHkfY4fP37C96NHj9ZLL72klStX1gfRxpblSqqvNyMjI2zdAID4QxAFAKCF6gLrNddco1tuuaVZrzUMI+T9jhw50qCttrZW33zzTdBZy3HjxumNN97QihUrNH36dL322mtyOp268MILm1xPu3btVFZWFrbPjTfeqPfee08vvfSS7HZ7g/dcV//06dN15ZVXNnnsnj17qk+fPtqxY4e++OILtWnTRh988IFOPvnkBs+Nfldd8G3fvn2TxwIAxAeeEQUAoIX69OkjwzD06aefmnK/nj17SlLQ2dUdO3bI7/cHfd0ZZ5yhnj176q233tIHH3ygffv26ZJLLmnWTGGPHj3k8/lUWloaso/D4dBvf/tbnXfeeXrxxRf15JNPntBet9y4JT+PupnP1157TW+++ab8fn/98S6h1C31rVvmCwBIHARRAABaKDs7WxdeeKE++eQT/f3vfw96Fub27duDLs0N5vzzz1fr1q312muvaf/+/fXXa2pqtGDBgrCvHTt2rI4dO6aHH35YkhpsntSY/v3719cbjsPh0OzZszVkyBAtXrxY8+fPr2/r27ev+vbtq9WrVzfYPEn6dlZ3y5YtQe/rcrmUkZGhVatWaeXKlbLZbBo5cmTYWnbs2HFC7QCAxMHSXABA0gt3fIskXXfddQ2OV2mqO+64Q3v37tUzzzyjN998U2eccYaysrJUVlamnTt3at++fXr55ZebNDvZpk0bTZ06VY888ogKCgp00UUXyel06v3335fD4VCnTp1CzhBeeuml+uMf/6hDhw6pd+/eQc/dDOf888/XU089pY8++qjRJb2tWrXSgw8+qPvuu0//+Mc/FAgEdOutt0qS7rvvPt122226//779dJLL+m0005Tenq6Dh48qE8++UTffPON3G53g3s6nU5dcMEFevPNN3X06FENHjxYOTk5IWsIBALavHmzunXrdsIOwwCAxEAQBQAkvbrjW0K56qqrWhxE27Ztq6efflpLly7V22+/Lbfbrf/f3v27pBrFcRz/XAcXaTEITNzchUIERSgJB6XBoRCDbHRRcRcknPojXHSQQMRBsBIiaMmhSGh3sMEfi9LUok33QqReLO6jF96v+ZznnGf8cM73fCeTiaxWq5xOp+Lx+MxHhuY5PDzUxsaGSqWSrq6uZLFY5PP5lEgkdHR0JLvdPnOexWKR3+/Xzc3N0qehkmSz2eR2u3V3d6d0Ov3XNi6/w2gul1OlUtF0OlU6ndb29rYKhYIuLy91f3+vRqMhk8mkzc1NuVwu7e3tzf1mOBzW9fW1JCkUCi1cv91uq9/vK5lMLv2vAIDV+zWddY8IAACsldfXV8ViMe3v7+v8/HzmmHg8rl6vp2q1Ovfl30UeHx+VyWSUzWYVDAZ/uuV/Kp/Pq9VqqVwuz23vAgBYX9SIAgCwRt7e3r60UXl/f//zMJDf75857+HhQZ1ORwcHB98KoZK0u7srj8ejYrH4qU3Nuul2u7q9vdXp6SkhFAD+U1zNBQBgjTw/P+vi4kJut1tbW1saj8d6enpSr9fTzs6OAoHAp/G1Wk2DwUD1el1ms1knJyc/Wj+VSqnZbGo4HC6s0VylwWCgs7MzRSKRVW8FAPBNXM0FAGCNdLtdFQoFvby8aDQaSZLsdrsCgYCi0eiXWtbj42MNh0M5HA4lEgl5vd4V7BoAgOUQRAEAAAAAhqJGFAAAAABgKIIoAAAAAMBQBFEAAAAAgKEIogAAAAAAQxFEAQAAAACGIogCAAAAAAxFEAUAAAAAGIogCgAAAAAw1AeuACaRPz6CxAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ab72d34",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "918bc67e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.466773Z",
     "iopub.status.busy": "2022-10-04T22:11:35.466200Z",
     "iopub.status.idle": "2022-10-04T22:11:35.473183Z",
     "shell.execute_reply": "2022-10-04T22:11:35.472522Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f6899457",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.476246Z",
     "iopub.status.busy": "2022-10-04T22:11:35.475616Z",
     "iopub.status.idle": "2022-10-04T22:11:35.478912Z",
     "shell.execute_reply": "2022-10-04T22:11:35.478296Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "82a899bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.481675Z",
     "iopub.status.busy": "2022-10-04T22:11:35.481324Z",
     "iopub.status.idle": "2022-10-04T22:11:35.592311Z",
     "shell.execute_reply": "2022-10-04T22:11:35.591669Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:11:35 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:11:35\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=512669;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=456748;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.7 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.44 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.7 +/- 0.6) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.44 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140672064380880\">\n",
       "<tr><td>1.00</td><td>0.12</td></tr>\n",
       "<tr><td>0.12</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.12\n",
       "0.12 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>212.417437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>212.417437</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         212.417437\n",
       "total        212.417437"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>429.090193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>432.658920</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            429.090193\n",
       "BIC            432.658920"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "29ee8d58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.595683Z",
     "iopub.status.busy": "2022-10-04T22:11:35.595127Z",
     "iopub.status.idle": "2022-10-04T22:11:35.714173Z",
     "shell.execute_reply": "2022-10-04T22:11:35.713531Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=577177;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=51969;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>(9.4 -2.0 +2.5) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.05 +/- 0.21</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(3.9 -1.6 +2.6) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                               result  \\\n",
       "parameter                                                               \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      (9.4 -2.0 +2.5) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index           -1.05 +/- 0.21   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc      (3.9 -1.6 +2.6) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140672067286592\">\n",
       "<tr><td>1.00</td><td>0.81</td><td>-0.91</td></tr>\n",
       "<tr><td>0.81</td><td>1.00</td><td>-0.89</td></tr>\n",
       "<tr><td>-0.91</td><td>-0.89</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.81 -0.91\n",
       " 0.81  1.00 -0.89\n",
       "-0.91 -0.89  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>209.550066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>209.550066</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         209.550066\n",
       "total        209.550066"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>425.621872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>430.836202</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            425.621872\n",
       "BIC            430.836202"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5643ec11",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ff488b03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.717465Z",
     "iopub.status.busy": "2022-10-04T22:11:35.716840Z",
     "iopub.status.idle": "2022-10-04T22:11:35.722803Z",
     "shell.execute_reply": "2022-10-04T22:11:35.722135Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.009470433795058391\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdad03d8",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b31b8c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.725801Z",
     "iopub.status.busy": "2022-10-04T22:11:35.725445Z",
     "iopub.status.idle": "2022-10-04T22:11:35.729412Z",
     "shell.execute_reply": "2022-10-04T22:11:35.728745Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f41dfbb3",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2c313bad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:11:35.732420Z",
     "iopub.status.busy": "2022-10-04T22:11:35.731828Z",
     "iopub.status.idle": "2022-10-04T22:14:11.151904Z",
     "shell.execute_reply": "2022-10-04T22:14:11.151163Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0bc7eead062340b2a06aaf9145df176a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8c6e581",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "67150561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:11.155581Z",
     "iopub.status.busy": "2022-10-04T22:14:11.154918Z",
     "iopub.status.idle": "2022-10-04T22:14:11.159519Z",
     "shell.execute_reply": "2022-10-04T22:14:11.159020Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.02"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e10c815a",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e811b669",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:11.162465Z",
     "iopub.status.busy": "2022-10-04T22:14:11.162115Z",
     "iopub.status.idle": "2022-10-04T22:14:11.841905Z",
     "shell.execute_reply": "2022-10-04T22:14:11.841178Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "775fab01",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e628a512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T22:14:11.845957Z",
     "iopub.status.busy": "2022-10-04T22:14:11.845486Z",
     "iopub.status.idle": "2022-10-04T22:14:12.531568Z",
     "shell.execute_reply": "2022-10-04T22:14:12.530829Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5703009",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0390b4266f26432384b982881ea3ae0a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "045c866d70ba4715aa10e07b56c1269b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "053084c4ae1d4d3abb73d572d518e135": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "08e96944d3e246eebea78eec5c2d21af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0bc7eead062340b2a06aaf9145df176a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ba3e391a226a409fad974d8b14b56cbc",
        "IPY_MODEL_d259e2d5f04e461eb24256d115a40fba",
        "IPY_MODEL_47376db1a6e1414e8797e3a5057bf92b"
       ],
       "layout": "IPY_MODEL_8208181a13704f52b578161df9ba2605",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0da073da57714144b51ded521476a831": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2033ab23706445f19a618d4c91a8fd60": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "33f2bb0391134ffe9aa03197205871dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0da073da57714144b51ded521476a831",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c83caeeb88e64967ae6cdc681f0d4243",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "45dc531e8009451f93908305462fc664": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "47376db1a6e1414e8797e3a5057bf92b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_45dc531e8009451f93908305462fc664",
       "placeholder": "​",
       "style": "IPY_MODEL_eb7f352af14e4ea8b6bbf5a6977a3192",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:35&lt;00:00,  6.40it/s]"
      }
     },
     "6f5dbd666ded47ba9416ebfb54953d87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0390b4266f26432384b982881ea3ae0a",
       "placeholder": "​",
       "style": "IPY_MODEL_933952cfbae943e397fe409a2d5789a3",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:06&lt;00:00, 15.16it/s]"
      }
     },
     "8208181a13704f52b578161df9ba2605": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "933952cfbae943e397fe409a2d5789a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9f66a79dfe224c3a80acb5d51f9319ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ba3e391a226a409fad974d8b14b56cbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cee36f6151304a36952fa6a1b8867b02",
       "placeholder": "​",
       "style": "IPY_MODEL_045c866d70ba4715aa10e07b56c1269b",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "c135f5ffd216455eb6574ffeb784696f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f99f32fc72144d579982d543369a4cd1",
       "placeholder": "​",
       "style": "IPY_MODEL_08e96944d3e246eebea78eec5c2d21af",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "c83caeeb88e64967ae6cdc681f0d4243": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "cee36f6151304a36952fa6a1b8867b02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d23a8a091cb34d888b2cbc44d4b0de4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c135f5ffd216455eb6574ffeb784696f",
        "IPY_MODEL_33f2bb0391134ffe9aa03197205871dc",
        "IPY_MODEL_6f5dbd666ded47ba9416ebfb54953d87"
       ],
       "layout": "IPY_MODEL_053084c4ae1d4d3abb73d572d518e135",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d259e2d5f04e461eb24256d115a40fba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9f66a79dfe224c3a80acb5d51f9319ba",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2033ab23706445f19a618d4c91a8fd60",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "eb7f352af14e4ea8b6bbf5a6977a3192": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f99f32fc72144d579982d543369a4cd1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
