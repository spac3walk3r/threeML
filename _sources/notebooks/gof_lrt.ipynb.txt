{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "29872e1a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be345d88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:11.138931Z",
     "iopub.status.busy": "2022-09-28T04:27:11.138347Z",
     "iopub.status.idle": "2022-09-28T04:27:11.218358Z",
     "shell.execute_reply": "2022-09-28T04:27:11.217426Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1d3cab99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:11.223494Z",
     "iopub.status.busy": "2022-09-28T04:27:11.223133Z",
     "iopub.status.idle": "2022-09-28T04:27:15.138170Z",
     "shell.execute_reply": "2022-09-28T04:27:15.137140Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7c751bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:15.142774Z",
     "iopub.status.busy": "2022-09-28T04:27:15.142189Z",
     "iopub.status.idle": "2022-09-28T04:27:15.178563Z",
     "shell.execute_reply": "2022-09-28T04:27:15.177639Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f3588f",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cefd7e43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:15.182320Z",
     "iopub.status.busy": "2022-09-28T04:27:15.181899Z",
     "iopub.status.idle": "2022-09-28T04:27:17.319764Z",
     "shell.execute_reply": "2022-09-28T04:27:17.318811Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:27:15 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:27:15\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=530009;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=939341;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:27:16 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:27:16\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=754799;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=128035;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "110a1b18",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a5a15211",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:17.324912Z",
     "iopub.status.busy": "2022-09-28T04:27:17.324189Z",
     "iopub.status.idle": "2022-09-28T04:27:19.041660Z",
     "shell.execute_reply": "2022-09-28T04:27:19.040716Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:27:17 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:27:17\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=407646;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=930496;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=771572;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=76964;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>1.12 +/- 0.08</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(-9 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      result              unit\n",
       "parameter                                                     \n",
       "xyl.spectrum.main.Line.a       1.12 +/- 0.08   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b  (-9 +/- 7) x 10^-2  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139791745124672\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>26.076154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>26.076154</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          26.076154\n",
       "total         26.076154"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.407627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>59.976354</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.407627\n",
       "BIC             59.976354"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4341e3e",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3090bc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:19.045750Z",
     "iopub.status.busy": "2022-09-28T04:27:19.045469Z",
     "iopub.status.idle": "2022-09-28T04:27:19.060789Z",
     "shell.execute_reply": "2022-09-28T04:27:19.058385Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e6c8243",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "73c0e821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:27:19.065571Z",
     "iopub.status.busy": "2022-09-28T04:27:19.064855Z",
     "iopub.status.idle": "2022-09-28T04:29:00.150267Z",
     "shell.execute_reply": "2022-09-28T04:29:00.149226Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dd65871d27564af9b04975322285f235",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c309d8d9",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42b2d040",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:00.154277Z",
     "iopub.status.busy": "2022-09-28T04:29:00.154004Z",
     "iopub.status.idle": "2022-09-28T04:29:00.160348Z",
     "shell.execute_reply": "2022-09-28T04:29:00.158966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.32), ('data', 0.32)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68e24f7f",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b8fa927f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:00.164733Z",
     "iopub.status.busy": "2022-09-28T04:29:00.164469Z",
     "iopub.status.idle": "2022-09-28T04:29:01.227845Z",
     "shell.execute_reply": "2022-09-28T04:29:01.226955Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:29:00 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:29:00\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=321647;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=374396;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=236725;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=858839;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=768798;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=696855;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=35746;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=351435;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=56908;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=814894;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=641165;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=254378;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=486577;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=245226;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=25894;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=178380;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=624762;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=38631;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:29:01 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:29:01\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=638373;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=747845;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=508696;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=350405;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=564650;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=858371;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "195ae522",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:01.231223Z",
     "iopub.status.busy": "2022-09-28T04:29:01.230944Z",
     "iopub.status.idle": "2022-09-28T04:29:02.218381Z",
     "shell.execute_reply": "2022-09-28T04:29:02.217226Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d818186",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cada4d46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.222379Z",
     "iopub.status.busy": "2022-09-28T04:29:02.221861Z",
     "iopub.status.idle": "2022-09-28T04:29:02.231671Z",
     "shell.execute_reply": "2022-09-28T04:29:02.230792Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cf1ab012",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.235126Z",
     "iopub.status.busy": "2022-09-28T04:29:02.234617Z",
     "iopub.status.idle": "2022-09-28T04:29:02.240017Z",
     "shell.execute_reply": "2022-09-28T04:29:02.239147Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ae881a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.243312Z",
     "iopub.status.busy": "2022-09-28T04:29:02.242802Z",
     "iopub.status.idle": "2022-09-28T04:29:02.389830Z",
     "shell.execute_reply": "2022-09-28T04:29:02.388834Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:29:02 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:29:02\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=376059;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=577366;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(4.5 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.50 +/- 0.09</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (4.5 +/- 0.6) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.50 +/- 0.09                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139791612522944\">\n",
       "<tr><td>1.00</td><td>0.24</td></tr>\n",
       "<tr><td>0.24</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.24\n",
       "0.24 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>208.314865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>208.314865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         208.314865\n",
       "total        208.314865"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>420.885050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>424.453776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            420.885050\n",
       "BIC            424.453776"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "038c9097",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.393216Z",
     "iopub.status.busy": "2022-09-28T04:29:02.392912Z",
     "iopub.status.idle": "2022-09-28T04:29:02.573158Z",
     "shell.execute_reply": "2022-09-28T04:29:02.572184Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=332307;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=212216;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.2 -0.4 +0.5</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-7.7 +/- 2.9) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(1.8 -0.6 +0.9) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K               1.2 -0.4 +0.5   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index  (-7.7 +/- 2.9) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (1.8 -0.6 +0.9) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139791762101824\">\n",
       "<tr><td>1.00</td><td>0.85</td><td>-0.94</td></tr>\n",
       "<tr><td>0.85</td><td>1.00</td><td>-0.88</td></tr>\n",
       "<tr><td>-0.94</td><td>-0.88</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.85 -0.94\n",
       " 0.85  1.00 -0.88\n",
       "-0.94 -0.88  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>202.490356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>202.490356</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         202.490356\n",
       "total        202.490356"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>411.502451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>416.716781</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            411.502451\n",
       "BIC            416.716781"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a904deb",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e85c0709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.577061Z",
     "iopub.status.busy": "2022-09-28T04:29:02.576784Z",
     "iopub.status.idle": "2022-09-28T04:29:02.586264Z",
     "shell.execute_reply": "2022-09-28T04:29:02.585375Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.0003453132204718444\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cf34ddc",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "adf5c69a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.590370Z",
     "iopub.status.busy": "2022-09-28T04:29:02.589843Z",
     "iopub.status.idle": "2022-09-28T04:29:02.594569Z",
     "shell.execute_reply": "2022-09-28T04:29:02.593685Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11105c8e",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4ee4f624",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:29:02.597951Z",
     "iopub.status.busy": "2022-09-28T04:29:02.597676Z",
     "iopub.status.idle": "2022-09-28T04:33:00.455219Z",
     "shell.execute_reply": "2022-09-28T04:33:00.454245Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ba81ffea3c6b4cf28e9968306e71df02",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfa8db69",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c7149279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:33:00.462701Z",
     "iopub.status.busy": "2022-09-28T04:33:00.462400Z",
     "iopub.status.idle": "2022-09-28T04:33:00.467909Z",
     "shell.execute_reply": "2022-09-28T04:33:00.467144Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a317ac4b",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2ca6e4ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:33:00.471654Z",
     "iopub.status.busy": "2022-09-28T04:33:00.471376Z",
     "iopub.status.idle": "2022-09-28T04:33:01.707754Z",
     "shell.execute_reply": "2022-09-28T04:33:01.706812Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "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rgAAAID9YXIhNFgUQwAAAACNHc94AgAAAADqFcUTAAAAAFCvKJ4AAAAAgHrFM54AAAAAEABdbxwrr8slW3Cw6SgBR/EEAAAAgABoecThpiMYw622AAAAAIB6xYgnDuiMM85QcHCwwsLCVFVVpQsvvFDDhw8/4OuWLVumu+++W3a7XTfddJNOOeWUPc55/fXXNWfOHEnS5s2bFRoaqri4OEnS7bffrtjYWD300EMqLS2V1+tVaGioHnnkEXXt2rVuPyQAAACAekPxRK089dRT6tGjhwoLC3Xuuefq+OOPV69evfb7mnfeeUcDBgzQtddeu89zLrvsMl122WWSpNtuu03du3fXkCFDao4PGDBAY8eO1VlnnSVpVzkNCQk59A8EAAAABNiO31bUPOPZ3G67pXg2Apvem6+C994/4HmRqanqedftu+1bOeERla9bt9fz211wvtpfMPCgsiQkJCg1NVWbNm1Sr169tG3bNk2YMEGbNm1SdXW1zjjjDN14443KzMzUggULFBoaqo8++kgvv/yyWrRocVDvJUlbtmxRQkJCzXbbtm0P+hoAAABAQ7D6yaflLCpWSHyc+s6YZjpOQFE8GwFPRaWcRcUHPC+0Vas99rl37tznaz0VlQedZe3atSotLdVxxx0nadco5bXXXqtjjz1Wbrdb1157rRYsWKDhw4dr3bp1e4xgHqxRo0bpqquuUu/evdWnTx/169dPPXv29Pt6AAAAAAKP4tkI2CPCFRIfd8DzgvYyohjUosU+X2uPCK91hhtuuEE2m025ubm6/fbbFRcXp4qKCn377bfavn17zXkVFRXKzc2t9XUPZOjQoRo4cKC+++47/fjjj7riiiv00EMP6dxzz62z9wAAAABQvyieAZSVlaWsrCxJksPhqPXr2l8w8KBvif3L/95666+/nvH85ptvNGLECB1//PFKSkqSJM2bN0+hoaF18j5706pVKw0YMEADBgxQ+/btNX/+fIon0AAMHz5c+fn5+zyenJyszMzMACYCAAANFcupBFB6eromTpyoiRMnasyYMabj+OXEE0/UZZddpqeeekqRkZE67rjjdvvBsrCwUFu2bKmz9/vkk0/kcrkkSW63W9nZ2UpOTq6z6wPwX35+vvLy8vZ6LC8vb7+lFAAANC+MeOKgjRo1SmeffbZWrFihSZMm6ZFHHtGAAQNkWZbCw8P1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\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13c2e076",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "16d48774",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T04:33:01.711588Z",
     "iopub.status.busy": "2022-09-28T04:33:01.711304Z",
     "iopub.status.idle": "2022-09-28T04:33:02.975930Z",
     "shell.execute_reply": "2022-09-28T04:33:02.974822Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Generic family 'sans-serif' not found because none of the following families were found: Helvetica\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5151bc6b",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0c2b55ecbecd42a9a527d9cd5e797062": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2cce1245f96946fc90f00d19d6f50c92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "46a7b72ac665476583c71c97a602be34": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4cfb008fc6e3492792603b84992671cf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "685893d800e5462c9c8c6d222fed2193": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fb8d9897ae9f48d9a44839f13c5e6bbf",
       "placeholder": "​",
       "style": "IPY_MODEL_0c2b55ecbecd42a9a527d9cd5e797062",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:40&lt;00:00, 10.37it/s]"
      }
     },
     "6dceb8a9ad0e4ad891d305577107775e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "729d9bdd36ba4389acb3185ef71e1710": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ae36e66cf8a404bb052151d72c48b36": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7b069a57385842f89d0580a93d43d75f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d5a8873950f948438400eded9637771f",
       "placeholder": "​",
       "style": "IPY_MODEL_7ae36e66cf8a404bb052151d72c48b36",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "80e8f458916845f1a8469a47b05c3063": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b5a8529931634d13be0cf39771de8211": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "ba81ffea3c6b4cf28e9968306e71df02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dc084bac4ce14daab6b9cc3875813a73",
        "IPY_MODEL_ff60992ef21d4162876229d0bead3181",
        "IPY_MODEL_d7da8df640be4b2696991b5d715f1eec"
       ],
       "layout": "IPY_MODEL_e11df6354c4441bf9451044425838876",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bb845f68640848ad9457784e7e962cfb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fa12b978d62c4e03bbbc710b5b489ad8",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b5a8529931634d13be0cf39771de8211",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "d5a8873950f948438400eded9637771f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d7da8df640be4b2696991b5d715f1eec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fce160d276e74dd0ae7f14aafbdc0ba1",
       "placeholder": "​",
       "style": "IPY_MODEL_6dceb8a9ad0e4ad891d305577107775e",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [03:57&lt;00:00,  4.26it/s]"
      }
     },
     "dc084bac4ce14daab6b9cc3875813a73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_729d9bdd36ba4389acb3185ef71e1710",
       "placeholder": "​",
       "style": "IPY_MODEL_46a7b72ac665476583c71c97a602be34",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "dd65871d27564af9b04975322285f235": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7b069a57385842f89d0580a93d43d75f",
        "IPY_MODEL_bb845f68640848ad9457784e7e962cfb",
        "IPY_MODEL_685893d800e5462c9c8c6d222fed2193"
       ],
       "layout": "IPY_MODEL_4cfb008fc6e3492792603b84992671cf",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e11df6354c4441bf9451044425838876": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "fa12b978d62c4e03bbbc710b5b489ad8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb8d9897ae9f48d9a44839f13c5e6bbf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fce160d276e74dd0ae7f14aafbdc0ba1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ff60992ef21d4162876229d0bead3181": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_80e8f458916845f1a8469a47b05c3063",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2cce1245f96946fc90f00d19d6f50c92",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
