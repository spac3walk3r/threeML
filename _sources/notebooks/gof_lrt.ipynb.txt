{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "946a13db",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "34a6dcd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:30.558640Z",
     "iopub.status.busy": "2022-10-04T09:44:30.558134Z",
     "iopub.status.idle": "2022-10-04T09:44:30.625964Z",
     "shell.execute_reply": "2022-10-04T09:44:30.625304Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cfbcda18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:30.629366Z",
     "iopub.status.busy": "2022-10-04T09:44:30.629051Z",
     "iopub.status.idle": "2022-10-04T09:44:33.718061Z",
     "shell.execute_reply": "2022-10-04T09:44:33.717269Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "23b59f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:33.721701Z",
     "iopub.status.busy": "2022-10-04T09:44:33.721362Z",
     "iopub.status.idle": "2022-10-04T09:44:33.750138Z",
     "shell.execute_reply": "2022-10-04T09:44:33.749390Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79720a91",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "800c4647",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:33.753580Z",
     "iopub.status.busy": "2022-10-04T09:44:33.753161Z",
     "iopub.status.idle": "2022-10-04T09:44:35.204273Z",
     "shell.execute_reply": "2022-10-04T09:44:35.203409Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">09:44:33 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m09:44:33\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=892976;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=597431;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">09:44:35 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m09:44:35\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=481163;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=641992;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25b12d75",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14937d1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:35.207725Z",
     "iopub.status.busy": "2022-10-04T09:44:35.207265Z",
     "iopub.status.idle": "2022-10-04T09:44:36.263947Z",
     "shell.execute_reply": "2022-10-04T09:44:36.263007Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=310973;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=54681;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=621089;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=808634;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.7 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(4 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.7 +/- 0.8) x 10^-1   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b      (4 +/- 7) x 10^-2  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140045308635936\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>19.882515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.882515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          19.882515\n",
       "total         19.882515"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>44.020349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>47.589076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             44.020349\n",
       "BIC             47.589076"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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Pv/8cx0+fFipqam6+OKLdccddyg9PT1g3/vuu0/btm0Leo+RI0fqySef7KjDCXvtOd9r1qzRY489ZrhtxYoVSktLCyiL9e+21L7z3dx3VpJMJpPef/99/2uuTaSdO3dq7dq12rp1q8rLy9W9e3cNHTpUd955p7KyslqsH8m/27HzLyqKPfbYY9qwYYOmTZumvn37as2aNXrooYe0cOFCDRs2rNl6dXV1uv/++2Wz2XTrrbfKbDZr2bJluvfee/WXv/xFKSkp/n3//ve/66mnntKYMWN044036vPPP9fChQt1/Phxff/73++MwwwLbT3XTz75pNLS0jR+/HhlZGToyy+/1IoVK/TRRx/phRdekNVqDdh/0KBBuvHGGwPK+vbte0aOKZy19Xw3mDVrlpKSkvyv4+ODB1Xw3T6pref73nvvld1uDygrLy/X888/bxg2L730Ul177bUBZYMGDeqYg4gQx44d0+LFi5WRkaFzzz1XW7dubXVdr9er2bNn68svv9RNN92klJQUrVy5Uvfff7+ee+65gAuXjz76SA8//LCGDx+u+++/X/v27dOSJUt09OhRzZo160wcWthpz7l+9tlnVV1drbFjxyorK0sHDhzQ8uXLtWXLFr3wwgtBAaZXr1768Y9/HFDWdJ9o157z3eCOO+5QZmZmQFnXrl0DXvPdrtee833bbbdp8uTJAWV2u11PPfWU4W93rF+bvPzyyyoqKtK4ceM0cOBAVVZWasWKFbrzzjv1zDPPKDs7u9m6Ef+77UNE2759uy8vL8/38ssv+8uOHz/uu+mmm3w/+clPTln3pZde8uXl5fl27NjhL9u/f79v7Nixvj//+c8B7zd58mTfQw89FFB//vz5vvHjx/uqq6s76GjCW3vO9aeffhpUtmbNGl9eXp7vzTffDCifNm1a0LmORe053y+88IIvLy/Pd/To0VPux3f7pPacbyOLFy/25eXl+T7//POA8ry8PN9vf/vbdrc30jkcDl9FRYXP5/P5du7c6cvLy/OtXr26VXXfe+89X15enu/999/3lx09etQ3YcIE3yOPPBKw72233eb74Q9/6HO5XP6yRYsW+a644grf/v37238gEaA953rr1q0+j8cTVJaXl+dbtGhRQPm9997ru/322zum0RGsPed79erVvry8PN/OnTtb3Jfvdr32nG8jb7/9ti8vL8/3zjvvBJRzbeLzff755z6n0xlQ9tVXX/muvPJK3/z5809ZN9J/t3mGMcJt3LhRJpNJBQUF/jKr1apJkyZp+/btOnToULN1N2zYoPPPP1+DBw/2l/Xv318XX3xxwDCETz/9VMeOHdP3vve9gPrXXXed7Ha7tmzZ0nEHFMbac64vuuiioLKGoXn79+83rONyuYJ6bWJJe853YzabTT6fz3Ab3+2TOup8N3j33XeVmZmp3Nxcw+0Oh0MOh6NdbY5kCQkJbe552rhxo1JTUwOG9/bo0UPjxo3TBx98IKfTKan+t2X//v2aMmVKwDCm6667Tj6fTxs2bGjXMUSK9pzr4cOHB41MGD58uLp3767S0lLDOm63W3V1dW36vGjQnvPdWF1dnTwej+E2vtsnddT5brBu3TolJSXpu9/9ruH2WL42yc3NlcViCSjLysrSOeec0+zvQYNI/90mMEa4PXv2qG/fvkpOTg4obwiBe/fuNazn9Xq1b98+nX/++UHbBg8erG+++cb/B2/Pnj2SFLRvTk6O4uPjtXv37nYfRyRo67luTmVlpaT6H4ymPv30U40fP17XXHONpk+frtdee61tjY5gHXG+b7zxRk2YMEHXXnutHn30UR05ciToMyS+21LHfr93796t0tJSXXXVVYbb165dq/Hjx+vqq6/WbbfdpnXr1rW94TFo9+7dGjRoUFCQGTx4sI4fP66ysjL/fpKCno9JT09Xr169/N9/nJ66ujrZ7faAxzYalJWV6ZprrtG1116r733ve3r++efldrtD0MrIdv/99+vaa6/V+PHj9fOf/9z/nW7Ad/vMqKqq0scff6zvfve7AY9zNODaJJjP59PRo0cNfw8ai/TfbZ5hjHCVlZWGd5YayioqKgzrVVdXy+l0tli3X79+qqyslMlkUs+ePQP2s1gs6t69uz/4RLu2nuvmvPzyyzKZTBozZkxAeXZ2toYNG6asrCxVV1drzZo1+sMf/qCKigrdc889bT+ACNOe892tWzddf/31Gjp0qCwWiz7//HOtWLFCO3fu1HPPPecPRXy3T+rI73dDALz66quDtl1wwQUaN26cMjMzVVlZqeXLl+vRRx+VzWYL6umFsSNHjujCCy8MKm/4b1VZWel/vqZxedN9Y+n73ZFee+01uVwu5efnB5SfffbZuuiii5Sdna3jx49rw4YNWrJkicrKyvTII4+EqLWRxWq1asKECbrooouUnJys4uJiLVu2TDNnztTzzz+vjIwMSeK7fYa899578ng8hr/dXJsYW7dunQ4fPqwf/ehHp9wv0n+3CYwRzuFwBHWPS/VDFBq2N1dPUqvqOhyOZmdlSkhIiJlhZW0910bWrVunVatW6eabbw6aWevXv/51wOuJEyfqwQcf1LJlyzR16lT17t27Da2PPO0539OmTQt4PXbsWA0ePFiPPvqoVqxY4Z+Nk+/2SR31/fZ6vVq/fr0GDRqkc845J2j7008/HfB64sSJuvPOO7Vo0SJNmDAhaAIoBHM4HP7/Lo01/W/VMMSpuX1jedhkW23btk2LFy/WuHHjdMkllwRs+/nPfx7w+pprrtFvfvMbvfnmm5o+fbqGDh3amU2NSPn5+QFBPC8vTyNHjtS9996rv/71r/7ZOPlunxnvvvuuevTooUsvvTRoG9cmwUpLS/W73/1OQ4cODZrIralI/91mSGqEs1qtcrlcQeUNX7jmLr4ayltT12q1Njukxul0xswFXlvPdVOfffaZHn/8cY0cOVJ33XVXi/vHxcVp+vTp8ng8zU5/HY066nw3uPrqq5WamqpPPvkk4DP4btfrqPO9bds2HT582PAOtRGLxaLrr79etbW1Ki4ubn2DY5jVavX/d2ms6X+rhguO5vaNpe93RygtLdUvfvELZWdna/bs2a2q0zCj5Mcff3wmmxbVhg0bpiFDhgT8dvPd7ngHDhzQ9u3blZ+f36qlG2L12qRBZWWlZs+ereTkZD366KMymUyn3D/Sf7cJjBGuue7phrKm60Q16N69uxISElpVNy0tTR6PR0ePHg3Yz+Vyqbq6OmamDG/ruW5s7969mjNnjrKzszV//vxWr6fTcOeuurr6NFoc2TrifDfVu3fvgHPId/ukjjrf69atU3x8fLPPLxqJxe93e6Smpp7yv1XD97bxUCejfWPp+91ehw4d0qxZs5ScnKzHH39cXbp0aVW9hu92TU3NmWxe1DP67Zb4bnekUz1K0JxY/e2ura3VQw89pNraWj355JOt+vsY6b/bBMYId+655+rrr7+WzWYLKN+xY4d/u5H4+HhlZ2dr165dQdt27Nihs88+2/8HsWF9tKb77tq1S16vN2bWT2vruW7wzTff6IEHHlDPnj31xBNPtPqCQ6q/8ycZT5ATrdp7vpvy+XwqLy8POId8t0/qiPPtdDq1ceNGDR8+/LQCfSx+v9tj0KBB2rNnj7xeb0D5zp07lZiY6B/m3vD9bdpzW1FRocOHD8fU97s9jh07plmzZsnlcrX64rAB3+2OceDAAcPfbr7bHefdd99Vnz59TmvodCx+vx0Oh38ipl//+teGj14YifTfbQJjhBs7dqw8Ho8KCwv9ZU6nU6tXr9aQIUP8D4gfOnQoaMrfMWPGaNeuXQEXy1999ZW2bt2qsWPH+ssuvvhide/eXX//+98D6v/9739XYmKiRo0adQaOLPy051xXVlZq1qxZio+P15NPPtnsj2t1dXXQNOJut1svvfSSLBaL4fIc0ao957uqqiro/VauXKmqqipddtll/jK+2ye153w3+Oijj1RbW9vsHWqj/y51dXV6/fXXlZKSEjQrHOovEkpLSwOGTo8ZM0ZHjhzRpk2b/GVVVVV6//33NXr0aP+QpgEDBqhfv3568803A35XVq5cqbi4uKAJt2Kd0bm22+166KGHVFFRoSeeeCLomfMGNpstaAiZz+fTkiVLJMlwEfRYZ3S+jX4jtmzZouLiYo0cOdJfxnf79Bmd7wYtzWzNtUk9j8ej//mf/9H27dv1yCOP6IILLjDcLxp/t5n0JsINGTJE48aN06JFi1RVVaU+ffpo7dq1Ki8vD3jG4le/+pW2bdsW8EW97rrr9NZbb2n27Nm66aabZDKZtGzZMvXs2VM33XSTfz+r1ao77rhDv/vd7zRv3jyNHDlSn332md555x3ddddd6t69e6cec6i051w/+OCDOnDggG6++WYVFRWpqKjIv61nz57+i4nNmzdryZIlGjNmjDIzM1VTU6N169appKREd999d0wNs2nP+Z42bZry8/OVnZ2thIQEFRUV6b333tOgQYOC1hnku12vPee7wbp165SQkNDsH7Tly5frgw8+0OjRo5WRkaHKykqtXr1ahw4d0sMPP2w46U40e+ONN1RbW+sferR582Z9++23kqSpU6eqa9euWrRokdauXaulS5cqMzNTUn24f/311/XYY49p//79SklJ0cqVK+X1eoNm6ps5c6bmzJmjWbNm6corr9S+ffu0YsUKTZ48udV3xqNBW8/1o48+qp07d2rixIkqLS0NuFmSlJSkvLw8SfUX3I888oiuuuoq9enTRw6HQ//4xz9UVFSkKVOmxNzNkLae73vuuUfnnXeecnJylJycrN27d2v16tXq3bu3brvttoDP4Lt9UlvPd4OWhqNybVLvT3/6kzZv3qzRo0erpqZG77zzTsD28ePHS1JU/m4TGKPA3LlzlZGRobffflu1tbXKzs7W448/ruHDh5+yXpcuXbRw4UL98Y9/1JIlS+T1enXRRRfpZz/7WVAP2HXXXSez2aylS5dq8+bN6t27t372s58FzUYZ7dp6rhvWsHvllVeCtg0fPtwfGLOzs9W/f3+tW7dOVVVVMpvNGjRokB555BGNGzeuw48n3LX1fF999dX64osvtHHjRjmdTmVkZOjmm2/W7bffrsTExIB9+W6f1NbzLdX3sGzZskXf+c531LVrV8N9cnNz9cUXX+itt95SdXW1EhMTNXjwYM2ePTtoxslYsHTpUpWXl/tfb9q0yR/Ex48f3+x5NJlMeuKJJ/T000/rjTfekMPh0Pnnn685c+aoX79+AfuOHj1aCxYs0OLFi7Vw4UKlpKTo1ltv1YwZM87YcYWjtp7rht/u1atXa/Xq1QHbzjrrLH9gzMjI0IUXXqhNmzbpyJEjio+PV//+/TVr1qyAm1Sxoq3nOz8/Xx999JH+/e9/6/jx40pLS9OUKVM0Y8YMpaamBuzLd/uktp5v6eTM1uedd17Q70cDrk3qNfwefPjhh/rwww+DtjcERiOR/rsd5/P5fCH7dAAAAABA2OIZRgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEACCM+Xw+Pfjgg7riiiv03nvvtXobAAAdgcAIAEAYi4uL05w5c9SzZ0899dRTKi8v92977bXX9M9//lMTJkzQlVdeGcJWAgCiFYERAIAwl5qaqrlz58pms2n+/PnyeDzas2eP/vznP6tv3766//77Q91EAECUivP5fL5QNwIAALTsD3/4g1577TXddNNN+vDDD3XgwAE988wzysnJCXXTAABRisAIAECEcDqduueee7Rnzx5J0k9+8hPdcsstIW4VACCaMSQVAIAIkZCQoMsuu8z//ydPnhziFgEAoh2BEQCACLFjxw698sorSklJkdPp1FNPPRXqJgEAohyBEQCACFBXV6f58+fLZDJp4cKFGjNmjN5//32tWrUq1E0DAEQxAiMAABHgt7/9rQ4cOKCZM2cqOztbDz30kHr37q3f//73KisrC3XzAABRisAIAECYe+edd/TOO+9o9OjRuv766yVJ3bp10y9+8Qs5HA7Nnz9fbrc7xK0EAEQjAiMAAGHswIED+t3vfqe0tDT9/Oc/D9g2fPhwff/731dxcbEWLVoUohYCAKIZy2oAAAAAAAzRwwgAAAAAMERgBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAAAAAABDBEYAAAAAgCECIwAAAADAEIERAAAAAGCIwAgAAAAAMERgBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAAAAAABD/z/y1CqLStQUjgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b741f5d6",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "710d14ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:36.267554Z",
     "iopub.status.busy": "2022-10-04T09:44:36.267098Z",
     "iopub.status.idle": "2022-10-04T09:44:36.273945Z",
     "shell.execute_reply": "2022-10-04T09:44:36.273264Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bce92841",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c13ad7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:44:36.277492Z",
     "iopub.status.busy": "2022-10-04T09:44:36.276877Z",
     "iopub.status.idle": "2022-10-04T09:45:41.467718Z",
     "shell.execute_reply": "2022-10-04T09:45:41.466128Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "172519f26bf74b519b9c08f39793447c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9196da1a",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6f3fc16c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:41.471513Z",
     "iopub.status.busy": "2022-10-04T09:45:41.471260Z",
     "iopub.status.idle": "2022-10-04T09:45:41.475934Z",
     "shell.execute_reply": "2022-10-04T09:45:41.475268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.807), ('data', 0.807)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221af7d9",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e8987e61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:41.479321Z",
     "iopub.status.busy": "2022-10-04T09:45:41.479106Z",
     "iopub.status.idle": "2022-10-04T09:45:42.297123Z",
     "shell.execute_reply": "2022-10-04T09:45:42.296477Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">09:45:41 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m09:45:41\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=162710;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=225285;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=90988;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=728577;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=533233;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=324316;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=107295;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=756362;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=405424;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=706321;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=168769;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=683869;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=12369;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=547070;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=450503;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=334333;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=6729;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=67710;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">09:45:42 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m09:45:42\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=9546;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=102543;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=504833;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=911650;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=349941;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=529780;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ae432b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:42.300254Z",
     "iopub.status.busy": "2022-10-04T09:45:42.299821Z",
     "iopub.status.idle": "2022-10-04T09:45:42.856399Z",
     "shell.execute_reply": "2022-10-04T09:45:42.855345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8d076cf",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "aefee592",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:42.859926Z",
     "iopub.status.busy": "2022-10-04T09:45:42.859676Z",
     "iopub.status.idle": "2022-10-04T09:45:42.866430Z",
     "shell.execute_reply": "2022-10-04T09:45:42.865765Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36cdb5fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:42.869331Z",
     "iopub.status.busy": "2022-10-04T09:45:42.868970Z",
     "iopub.status.idle": "2022-10-04T09:45:42.872250Z",
     "shell.execute_reply": "2022-10-04T09:45:42.871589Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d70d4b74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:42.875001Z",
     "iopub.status.busy": "2022-10-04T09:45:42.874786Z",
     "iopub.status.idle": "2022-10-04T09:45:42.977456Z",
     "shell.execute_reply": "2022-10-04T09:45:42.976366Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=948508;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=16674;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.2 -0.6 +0.7) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.39 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.2 -0.6 +0.7) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.39 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140045203544816\">\n",
       "<tr><td>1.00</td><td>0.09</td></tr>\n",
       "<tr><td>0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.09\n",
       "0.09 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>211.036084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>211.036084</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         211.036084\n",
       "total        211.036084"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>426.327486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>429.896213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            426.327486\n",
       "BIC            429.896213"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "abb07d3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:42.980214Z",
     "iopub.status.busy": "2022-10-04T09:45:42.979991Z",
     "iopub.status.idle": "2022-10-04T09:45:43.094495Z",
     "shell.execute_reply": "2022-10-04T09:45:43.093068Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=736983;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=234529;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.32 -0.30 +0.4</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-6.8 +/- 2.3) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(2.0 -0.5 +0.7) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K             1.32 -0.30 +0.4   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index  (-6.8 +/- 2.3) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (2.0 -0.5 +0.7) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140045203545296\">\n",
       "<tr><td>1.00</td><td>0.78</td><td>-0.91</td></tr>\n",
       "<tr><td>0.78</td><td>1.00</td><td>-0.87</td></tr>\n",
       "<tr><td>-0.91</td><td>-0.87</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.78 -0.91\n",
       " 0.78  1.00 -0.87\n",
       "-0.91 -0.87  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>203.11161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>203.11161</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake          203.11161\n",
       "total         203.11161"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>412.744958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>417.959288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            412.744958\n",
       "BIC            417.959288"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2bf3c57",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fcaf5eb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:43.097701Z",
     "iopub.status.busy": "2022-10-04T09:45:43.097263Z",
     "iopub.status.idle": "2022-10-04T09:45:43.102817Z",
     "shell.execute_reply": "2022-10-04T09:45:43.102274Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 3.6253881669962204e-05\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bb3749e",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c7aea7a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:43.105845Z",
     "iopub.status.busy": "2022-10-04T09:45:43.105300Z",
     "iopub.status.idle": "2022-10-04T09:45:43.109223Z",
     "shell.execute_reply": "2022-10-04T09:45:43.108572Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f656b001",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a13dae12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:45:43.112310Z",
     "iopub.status.busy": "2022-10-04T09:45:43.111723Z",
     "iopub.status.idle": "2022-10-04T09:48:15.949100Z",
     "shell.execute_reply": "2022-10-04T09:48:15.948049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e5e55b4c8aa94a65a2ce52f215d6ef6e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "943bd209",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a710d653",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:48:15.953096Z",
     "iopub.status.busy": "2022-10-04T09:48:15.952672Z",
     "iopub.status.idle": "2022-10-04T09:48:15.957738Z",
     "shell.execute_reply": "2022-10-04T09:48:15.957021Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92e150ee",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "517fb9f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:48:15.961374Z",
     "iopub.status.busy": "2022-10-04T09:48:15.961158Z",
     "iopub.status.idle": "2022-10-04T09:48:16.634345Z",
     "shell.execute_reply": "2022-10-04T09:48:16.633450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebcfffe2",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ba74838a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T09:48:16.638052Z",
     "iopub.status.busy": "2022-10-04T09:48:16.637523Z",
     "iopub.status.idle": "2022-10-04T09:48:17.308447Z",
     "shell.execute_reply": "2022-10-04T09:48:17.307681Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa4b711e",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "057f26287b1c4f7c9d63274e91d1df86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "172519f26bf74b519b9c08f39793447c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3ec4338159994760bd322d29e5dad5b0",
        "IPY_MODEL_5831d061b235458f96cfadf678e641c0",
        "IPY_MODEL_f86d3139e2554dcebbcd7c4a9b64698a"
       ],
       "layout": "IPY_MODEL_e0b36ca61fed44a2b18ff59b32ebffad",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2d2aa37f2fb64720a3431f2137e1f9ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "31b706bc351e4ef79f76eadea7a6066f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "32b90ab71e9544369f2cd6bfc69a35b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "379d36e6e98f4cb0b54add91053fadd9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "3ec4338159994760bd322d29e5dad5b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_057f26287b1c4f7c9d63274e91d1df86",
       "placeholder": "​",
       "style": "IPY_MODEL_da03b80b02b141c09098e45ac5262683",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "5831d061b235458f96cfadf678e641c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5e9ece6b165542df98db2945d6c98e77",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7384c2ad9f00482590b9eeabe196d3e0",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "59ee8dd6efa64b20a0ffa89d7b116fdf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5e9ece6b165542df98db2945d6c98e77": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7384c2ad9f00482590b9eeabe196d3e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "88dd126327384f2b8074231db5e469d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "96fa0579f9c44ee8857c39518625db04": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9cf4a41f933c4b31bf4568fdc2aa598b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d58eabeb4e2147eb91b17cbf0030edcc",
       "placeholder": "​",
       "style": "IPY_MODEL_2d2aa37f2fb64720a3431f2137e1f9ff",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:32&lt;00:00,  6.59it/s]"
      }
     },
     "d58eabeb4e2147eb91b17cbf0030edcc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "da03b80b02b141c09098e45ac5262683": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e0b36ca61fed44a2b18ff59b32ebffad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "e4e4fa2e0bcc4baf9e2c346605e5922c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e5e55b4c8aa94a65a2ce52f215d6ef6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e85a330dbb5f4f05914cc089c2b8d7bd",
        "IPY_MODEL_f1ff5380b20a4044a4f1afdd68aabf47",
        "IPY_MODEL_9cf4a41f933c4b31bf4568fdc2aa598b"
       ],
       "layout": "IPY_MODEL_88dd126327384f2b8074231db5e469d5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e85a330dbb5f4f05914cc089c2b8d7bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_59ee8dd6efa64b20a0ffa89d7b116fdf",
       "placeholder": "​",
       "style": "IPY_MODEL_31b706bc351e4ef79f76eadea7a6066f",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "f1ff5380b20a4044a4f1afdd68aabf47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_32b90ab71e9544369f2cd6bfc69a35b9",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_379d36e6e98f4cb0b54add91053fadd9",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "f86d3139e2554dcebbcd7c4a9b64698a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_96fa0579f9c44ee8857c39518625db04",
       "placeholder": "​",
       "style": "IPY_MODEL_e4e4fa2e0bcc4baf9e2c346605e5922c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:04&lt;00:00, 15.67it/s]"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
