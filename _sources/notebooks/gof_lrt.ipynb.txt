{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "52cd3929",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "846cd661",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:17.635720Z",
     "iopub.status.busy": "2022-10-04T19:16:17.635311Z",
     "iopub.status.idle": "2022-10-04T19:16:17.696493Z",
     "shell.execute_reply": "2022-10-04T19:16:17.695803Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "759949d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:17.699853Z",
     "iopub.status.busy": "2022-10-04T19:16:17.699566Z",
     "iopub.status.idle": "2022-10-04T19:16:20.571176Z",
     "shell.execute_reply": "2022-10-04T19:16:20.570457Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6819ec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:20.575209Z",
     "iopub.status.busy": "2022-10-04T19:16:20.574626Z",
     "iopub.status.idle": "2022-10-04T19:16:20.602555Z",
     "shell.execute_reply": "2022-10-04T19:16:20.601938Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93560254",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "690fb067",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:20.605665Z",
     "iopub.status.busy": "2022-10-04T19:16:20.605220Z",
     "iopub.status.idle": "2022-10-04T19:16:22.011410Z",
     "shell.execute_reply": "2022-10-04T19:16:22.010764Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:16:20 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:16:20\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=605656;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=939505;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:16:21 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:16:21\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=333901;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=573092;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4wAAAMQCAYAAABsbuuaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAABc60lEQVR4nO3da3hV5Z03/p/kZAwnCUJRgYLSiBaLttpBh3JoRfGQq2rx0FHHZzzMyFR9rocq1fbi+ov2sTraXrYdbalOeZhpK1ZFUUFFERkVp61KjaKIihELWAlyCjHZCfm/sEm7zUJCTnvv5PN5Ze611t6/tVysvb973eu+92lsbGwMAAAA+IRemS4AAACA7CQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGLvYRx99FKtXr46PPvoo06UAAAB8KoGxi1VWVsYll1wSlZWVmS4FAADgUwmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAInyM10AAACQeyoeWRt1NfVRWJwfY04Zkely6CQCIwAAsNcqFq+NnZtrY78BRQJjN6ZLKgAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAovxMFwAAANCdVTyyNupq6qOwOD/GnDIi0+XsFYERAACgE1UsXhs7N9fGfgOKci4w6pIKAABAoqy8w7hz5864++67Y9WqVfHaa6/F9u3b45prrompU6fucdsrrrgiVq5cmbgsLy8vnnrqqea/zzrrrNi4cWOL9crLy+Pb3/52m+sHAADoDrIyMG7dujXmzp0bgwcPjkMPPTReeumlVm97/vnnx6mnnprWVlNTE7feemscc8wxLdYfNWpUnH322WltBx98cNsKBwAA6EayMjCWlpbGggULorS0NF5//fW49NJLW71tUih8/PHHIyLihBNOaLFs4MCBMWXKlLYXCwAA0E1l5TOMhYWFUVpa2mGvt2TJkiguLo6///u/T1yeSqWipqamw94PAACgO8jKO4wdacuWLfGHP/whJk+eHMXFxS2Wv/jiizFlypRoaGiIz3zmMzFt2rSYNm1aBioFAADILt0+MD755JPR0NCQ2B115MiRceSRR8bQoUNj27ZtsXjx4vjJT34SmzZtissuu6zN77lp06aoqqpKXFZZWdnm1wUAAOhK3T4wPvHEE9G/f//40pe+1GLZD37wg7S/Tz755LjqqqvinnvuiTPPPDMGDRrUpvdcuHBhzJ07t03bAgAAZItuHRjXr18fr776apxxxhmRn7/nXd1nn33irLPOit/97nexcuXKNg+GU15eHscff3zissrKyrjhhhva9LoAAABdqVsHxiVLlkRE8uiou9N0V3Hbtm1tft+BAwfGwIED27w9AABANsjKUVI7yhNPPBEHHXRQHHHEEa3eZv369RER0b9//06qCgAAIDfkdGDctGlTVFZWRn19fYtlb7zxRlRWVsbXvva1xG23bdsWDQ0NaW319fXxq1/9KgoKCuKoo47qlJoBAAByRdZ2Sb3vvvtix44dzaONPvvss/HnP/85IiLOPPPM6N27d8yZMyceffTRmD9/fgwZMiRt+z11R3322Wdj3rx5MWHChBgyZEhs3749lixZEmvXro1LL720Q+eBBAAAyEVZGxjnz58fGzdubP57+fLlsXz58oiImDJlSvTu3Xu32+7atSuWLl0an/vc52LYsGGJ64wcOTKGDx8eS5YsiS1btkR+fn6MGjUqrrvuupg0aVLH7gwAAEAOytrAeM899+xxnWuvvTauvfbaFu29evWK++6771O3LSsrazGtBgAAAH+V088wAgAA0HkERgAAABJlbZdUAHav4pG1UVdTH4XF+THmlBGZLgcA6KYERoAcVLF4bezcXBv7DSgSGAGATqNLKgAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAi8zACAOylikfWRl1NfRQW55sLFejWBEYAgL1UsXht7NxcG/sNKBIYgW5Nl1QAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkVFSoRsz7DsAAO0hMEI3Zth3AADaQ5dUAAAAErnDCACdQJdwALoDgREAOoEu4QB0B7qkAgAAkMgdRshyurUBAJApAiNkOd3aAADIFF1SAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIlMqwFdwFyKAADkIoERuoC5FAEAyEW6pAIAAJDIHUZoJd1KAQDoaQRGaCXdSgEA6Gl0SQUAACCRwAgAAOyV2upUpGrqIyIiVVMftdWpDFdEZxEYAQCAVqutTsXCWSsiVdMQERGpmoZYOGuF0NhNCYwAAECrrV66LrZuqE5r27qhOlYvXZehiuhMAiMAANBqVZXbktvf3d7FldAVBEYAAKDVSof3TW4f1qeLK6ErmFYDAKALmdeXXFc2eWisXvZeWrfUfkNKomzy0AxWRWdxhxEAoAtVLF4bL93/ZlQsXpvpUqBNikoKonz2uCgozouIiILivCifPS6KSgoyXBmdQWAEAAD2SlFJQRQUf9xZsaA4X1jsxgRGAAAAEgmMAAAAJBIYAQAASGSUVAAAoEsZLTh3CIwAAECXqli8NnZuro39BhQJjFlOl1QAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkVFSgQ5nqGwAgO5BYAQ6nKGyAQC6B11SAQAASCQwAgAAkEhgBAAAIJFnGAGgGzHoFAAdSWAEgG7EoFPA3vAjE3siMAIAQA/lRyb2xDOMAAAAJBIYAQAASCQwAgAAkMgzjEAiD8EDACAwAok8BA8AQFYGxp07d8bdd98dq1atitdeey22b98e11xzTUydOnWP2y5evDhuvPHGxGULFiyI0tLStLZnnnkmfvnLX0ZlZWX0798/Tj755LjgggsiPz8rDw0AAECXycpUtHXr1pg7d24MHjw4Dj300HjppZf2+jUuuuiiGDJkSFpb79690/5+/vnn47vf/W6MHTs2rrzyynj77bdj3rx58eGHH8aMGTPatQ8AAAC5LisDY2lpafPdwNdffz0uvfTSvX6NL3/5y3HYYYd96jq33357HHLIIXHrrbc231Hcb7/94r/+67/iG9/4RgwfPrxN9QMAAHQHWTlKamFhYYuuo22xc+fOaGhoSFz2zjvvxDvvvBOnnXZaWvfT008/PRobG2PZsmXtfn8AAIBclpV3GDvClVdeGTU1NVFQUBDHHHNM/Ou//msMHTq0efkbb7wRERFlZWVp2w0cODAOOOCAWLNmTZfWCwAAkG26XWAsKiqKqVOnxlFHHRUlJSWxevXquOeee2L69Olx5513xuDBgyMioqqqKiIi8U5maWlp8/K22LRp0263r6ysbPPrAgAAdKVuFxgnT54ckydPbv57/Pjxceyxx8bll18e//mf/xnf/va3IyKirq4uIj7u/vpJhYWFsXPnzjbXsHDhwpg7d26btweATDD/KgCf1O0CY5IjjzwyDj/88HjhhRea25qCYlNw/Ft1dXVRVFTU5vcrLy+P448/PnFZZWVl3HDDDW1+bQDoLOZfBeCTekRgjIgYNGhQvPvuu81/N3VFraqqau6m2qSqqipGjx7d5vcaOHBgDBw4sM3bAwAAZIOsHCW1M6xfvz769+/f/PeoUaMiImL16tVp623atCk++OCD5uUAAAA9VU4Hxk2bNkVlZWXU19c3t23ZsqXFeitWrIjVq1fHscce29w2YsSIGDZsWDz00ENpU2888MADsc8++8SECRM6tfbuoOKRtfHCvWui4pG1mS4FAADoBFnbJfW+++6LHTt2NI82+uyzz8af//zniIg488wzo3fv3jFnzpx49NFHY/78+TFkyJCIiLjsssvic5/7XJSVlUVJSUm88cYbsWjRohg0aFCcf/75ae8xffr0uOaaa2LGjBnx1a9+Nd5+++1YsGBBnHrqqfHZz362S/c3F3nWBQAAPl1tdSpSNR/f4ErV1EdtdSqKSgoyXFXrZW1gnD9/fmzcuLH57+XLl8fy5csjImLKlCnRu3fvxO0mT54czz//fPz+97+Pjz76KEpLS+O0006LCy+8MAYMGJC27nHHHRc33HBDzJ07N2677bbo169fnHfeeXHhhRd22n4BAAA9Q211KhbOWhGpmo97NKZqGmLhrBVRPntczoTGrA2M99xzzx7Xufbaa+Paa69Na7vkkkvikksuafX7jB8/PsaPH7/X9QEAAHya1UvXxdYN1WltWzdUx+ql6+LI00ZmqKq9k9PPMAIAAGSrqsptye3v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CAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACTKz3QBANlgzNQRUVdTH4XFLosAAE18MwKIiDGnjOjS96utTkWqpj4iIlI19VFbnTJRMwCQdXRJBehitdWpWDhrRaRqGiIiIlXTEAtnrYja6lSGKwMASCcwAnSx1UvXxdYN1WltWzdUx+ql6zJUEQBAMoERoItVVW5Lbn93exdXAgDw6QRGgC5WOrxvcvuwPl1cCQDApxMYAbpY2eSh0W9ISVpbvyElUTZ5aIYqAgBIJjACdLGikoIonz0uCorzIiKioDgvymePM0oqAJB1BEaADCgqKYiCv8z5WFCcLywCAFlJYAQAACBRfqYLSFJXVxd33XVXPP7447F9+/Y45JBD4uKLL45jjjnmU7f7j//4j5g7d26L9sLCwnjiiSdatD/88MNx9913x8aNG+OAAw6Ib3zjG3HmmWd21G4AAPRoY6aOiLqa+igszsqvnEArZOW/3htvvDGWLVsW06ZNi4MPPjgWL14cV199ddx2221x5JFH7nH7GTNmRHFxcfPfvXq1vJH64IMPxq233hoTJkyIs88+O15++eW47bbb4qOPPop/+Id/6ND9AQDoicacMiLTJQDtlHWBcdWqVfHkk0/GZZddFueee25ERJx44olx4YUXxh133BF33HHHHl9jwoQJ0b9//90ur62tjTvvvDPGjRsX119/fUREnHbaabFr166YN29elJeXR58+hrcHAAB6tqx7hvHpp5+OvLy8KC8vb24rKiqKU045JV599dV4//33W/U61dXV0djYmLjsxRdfjK1bt8bXv/71tPbTTz89ampqYsWKFW2uHwAAoLvIusC4Zs2aOPjgg6OkJH2OstGjR0dExJtvvrnH1zj77LNj6tSpcdJJJ8X1118fmzdvbvEeERGHHXZYWntZWVn06tUr3njjjfbsAgBAh6utTkWqpj4iIlI19VFbneqSbYGeLeu6pFZVVUVpaWmL9qa2TZs27XbbPn36xBlnnBFHHHFEFBQUxMsvvxwLFiyI1157LX7xi180h9CqqqrIy8uL/fffP237goKC6Nu3b1RVVbVrHzZt2rTb16isrGzXawMAPU9tdSoWzloRqZqGiIhI1TTEwlkrWjWHa3u2Bci6wFhbWxsFBS0vXoWFhc3Ld2fatGlpf0+cODFGjx4d119/fSxYsCDOO++8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ysvL49vf/naH7g8AAEAuysrAeOONN8ayZcti2rRpcfDBB8fixYvj6quvjttuuy2OPPLI3W53yy23RGlpaUyZMiUGDx4cb731VixYsCCef/75uOuuu6KoqCht/VGjRsXZZ5+d1nbwwQd3yj4BAADkmqwLjKtWrYonn3wyLrvssjj33HMjIuLEE0+MCy+8MO6444644447drvt7Nmz46ijjkprKysri//7f/9vLFmyJE499dS0ZQMHDowpU6Z0/E4AAAB0A1n3DOPTTz8deXl5UV5e3txWVFQUp5xySrz66qvx/vvv73bbT4bFiIivfOUrERHxzjvvJG6TSqWipqamfUUDAAB0Q1l3h3HNmjVx8MEHR0lJSVr76NGjIyLizTffjMGDB7f69aqqqiIion///i2WvfjiizFlypRoaGiIz3zmMzFt2rSYNm1a24sHAADoRrIuMFZVVUVpaWmL9qa2TZs27dXr/frXv468vLyYMGFCWvvIkSPjyCOPjKFDh8a2bdti8eLF8ZOf/CQ2bdoUl112Wdt34C81NgXVT6qsrGzXawMAAHSVrAuMtbW1UVDQcv60wsLC5uWttWTJknjkkUfi3HPPjaFDh6Yt+8EPfpD298knnxxXXXVV3HPPPXHmmWfGoEGD2lD9xxYuXBhz585t8/YAAADZIOsCY1FRUaRSqRbtdXV1zctb449//GPcdNNNceyxx8Yll1yyx/X32WefOOuss+J3v/tdrFy5sl2D4ZSXl8fxxx+fuKyysjJuuOGGNr82AABAV8m6wFhaWhoffPBBi/amLp4DBw7c42u8+eabcc0118TIkSNj9uzZkZ/fut1suqu4bdu2vai4pYEDB7aqTgAAgGyWdaOkHnroofHee+9FdXV1WvuqVaual3+aP/3pT/Htb3879t9//7j55ptjv/32a/V7r1+/PiKSB8gBAADoabIuME6cODEaGhpi4cKFzW11dXWxaNGiOPzww5tHSH3//fdbDCBTVVUVM2bMiF69esUtt9yy2+C3bdu2aGhoSGurr6+PX/3qV1FQUJA4PQdARxszdUQcdcahMWbqiEyXAgCQKOu6pB5++OExadKkmDNnTmzZsiUOOuigePTRR2Pjxo0xc+bM5vW+//3vx8qVK2P58uXNbVdddVWsX78+zj333KioqIiKiormZfvvv38cc8wxERHx7LPPxrx582LChAkxZMiQ2L59eyxZsiTWrl0bl156aeIorQAdbcwpgiIAkN2yLjBGRFx77bUxePDgeOyxx2LHjh0xcuTIuOmmm2Ls2LGfut2bb74ZERG/+c1vWiwbO3Zsc2AcOXJkDB8+PJYsWRJbtmyJ/Pz8GDVqVFx33XUxadKkDt8fAACAXJSVgbGoqCimT58e06dP3+06P/7xj1u0/e3dxk9TVlbWYloNAAAA0mXdM4wAAABkB4ERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQKL8TBcAAEDrjJk6Iupq6qOw2Fc4oGu42gAA5Igxp4xo+7bCJtAGrhgAAD1Ae8Im0HN5hhEAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARPmZLgAAyH1jpo6Iupr6KCz21QKgO3FVBwDabcwpIzJdAgCdQJdUAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEuVnugAAAOgOxkwdEXU19VFY7Cs23YezGQAAOsCYU0ZkugTocLqkAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQGvSHnGIEMAAC6hm/c5BwjkAEAQNfQJRUAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASJSf6QKS1NXVxV133RWPP/54bN++PQ455JC4+OKL45hjjtnjth988EH89Kc/jd///vexa9euOOqoo+Lyyy+PAw88sMW6Dz/8cNx9992xcePGOOCAA+Ib3/hGnHnmmZ2xSwAAADknK+8w3njjjXHPPffECSecEFdccUX06tUrrr766nj55Zc/dbudO3fGlVdeGStXrozzzjsv/umf/inWrFkTl19+eWzdujVt3QcffDBuvvnmGDFiRFx55ZXx+c9/Pm677bb41a9+1Zm7BgAAkDOy7g7jqlWr4sknn4zLLrsszj333IiIOPHEE+PCCy+MO+64I+64447dbvvAAw/Ee++9Fz//+c9j9OjRERHx5S9/OS688MKYP39+XHrppRERUVtbG3feeWeMGzcurr/++oiIOO2002LXrl0xb968KC8vjz59+nTyngIAAGS3rLvD+PTTT0deXl6Ul5c3txUVFcUpp5wSr776arz//vu73XbZsmVx2GGHNYfFiIjhw4fH0UcfHU899VRz24svvhhbt26Nr3/962nbn3766VFTUxMrVqzouB0CAADIUVkXGNesWRMHH3xwlJSUpLU3hcA333wzcbtdu3bF22+/HYcddliLZaNHj44//elPsXPnzub3iIgW65aVlUWvXr3ijTfeaPd+AAAA5Lqs65JaVVUVpaWlLdqb2jZt2pS43bZt26Kurm6P2w4bNiyqqqoiLy8v9t9//7T1CgoKom/fvlFVVdWufdi0adNuX6OysrJdrw0AANBVsi4w1tbWRkFBQYv2wsLC5uW72y4iWrVtbW1t5Ocn73phYeFu36O1Fi5cGHPnzm3XawAAAGRa1gXGoqKiSKVSLdrr6uqal+9uu4ho1bZFRUVRX1+f+Dp1dXW7fY/WKi8vj+OPPz5xWWVlZdxwww3ten0AAICukHWBsbS0ND744IMW7U1dPAcOHJi4Xd++faOwsDCxK+gnty0tLY2Ghob48MMP07qlplKp2LZtW2K31r0xcODA3dYJAACQK7Ju0JtDDz003nvvvaiurk5rX7VqVfPyJL169YqRI0fG66+/3mLZqlWr4sADD4z99tsvIiJGjRoVEdFi3ddffz127drVvBwAAKAny7rAOHHixGhoaIiFCxc2t9XV1cWiRYvi8MMPj8GDB0dExPvvv99iAJkJEybE66+/nhYE33333XjppZdi4sSJzW1HH3109O3bNx588MG07R988MHYd999Y9y4cZ2wZwAAALkl67qkHn744TFp0qSYM2dObNmyJQ466KB49NFHY+PGjTFz5szm9b7//e/HypUrY/ny5c1tp59+ejz88MMxc+bMOOeccyIvLy/uueee2H///eOcc85pXq+oqCguuuii+NGPfhSzZs2KY489Nv74xz/G448/Hpdcckn07du3S/cZ6Bhjpo6Iupr6KCzOuksbAEBOyspvVddee20MHjw4HnvssdixY0eMHDkybrrpphg7duynbrfffvvFbbfdFj/96U9j3rx5sWvXrjjqqKPiW9/6VvTv3z9t3dNPPz3y8/Nj/vz58eyzz8agQYPiW9/6VkybNq3zdgzoVGNOGZHpEgAAupV9GhsbGzNdRE+yevXquOSSS+IXv/hFlJWVZbocAACA3cq6ZxgBAADIDgIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEuVnuoCepra2NiIiKisrM1wJAADQ0w0fPjz23Xff3S4XGLvYxo0bIyLihhtuyHAlAABAT/eLX/wiysrKdrt8n8bGxsYurKfH27JlS/zud7+LIUOGRGFhYabLicrKyrjhhhvie9/7XgwfPjzT5XR7jnfXcay7luPdtRzvruNYdy3Hu+s41l0rm4+3O4xZpn///jFlypRMl9HC8OHDP/WXBTqW4911HOuu5Xh3Lce76zjWXcvx7jqOddfKxeNt0BsAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcDYw5WWlsaFF14YpaWlmS6lR3C8u45j3bUc767leHcdx7prOd5dx7HuWrl8vM3DCAAAQCJ3GAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARPmZLoD2q6uri7vuuisef/zx2L59exxyyCFx8cUXxzHHHLPHbT/44IP46U9/Gr///e9j165dcdRRR8Xll18eBx54YIt1H3744bj77rtj48aNccABB8Q3vvGNOPPMMztjl7JWW4/1008/HUuXLo3XX389Nm/eHIMGDYpx48bFP/7jP0afPn3S1j3rrLNi48aNLV6jvLw8vv3tb3fo/mS7th7v//iP/4i5c+e2aC8sLIwnnniiRbtz+2NtPd67O2cjIg466KD4zW9+0/z3V77ylcT1Lr300jjvvPPaXnyO2blzZ9x9992xatWqeO2112L79u1xzTXXxNSpU1u1/fbt2+NnP/tZLF++PGpra2P06NExffr0KCsra7HuM888E7/85S+jsrIy+vfvHyeffHJccMEFkZ/fM74CtOdYv/DCC7FkyZJ4+eWX44MPPogBAwbE0UcfHRdddFEMHDgwbd0rrrgiVq5c2eI1jj322Ljllls6aneyXnuO9+LFi+PGG29MXLZgwYIoLS1Na+vp53ZE+4737s7ZiIi8vLx46qmnmv/23STitddei0cffTReeuml2LhxY/Tt2zeOOOKIuPjii2Po0KF73D6Xr9s9519UN3bjjTfGsmXLYtq0aXHwwQfH4sWL4+qrr47bbrstjjzyyN1ut3Pnzrjyyiujuro6zjvvvMjPz4977rknLr/88viP//iP6NevX/O6Dz74YNx6660xYcKEOPvss+Pll1+O2267LT766KP4h3/4h67YzazQ1mN9yy23RGlpaUyZMiUGDx4cb731VixYsCCef/75uOuuu6KoqCht/VGjRsXZZ5+d1nbwwQd3yj5ls7Ye7yYzZsyI4uLi5r979WrZqcK5/VdtPd6XX3551NTUpLVt3Lgx7rzzzsSw+aUvfSlOOumktLZRo0Z1zE7kiK1bt8bcuXNj8ODBceihh8ZLL73U6m137doVM2fOjLfeeivOOeec6NevXzzwwANx5ZVXxi9+8Yu0Ly7PP/98fPe7342xY8fGlVdeGW+//XbMmzcvPvzww5gxY0Zn7FrWac+x/tnPfhbbtm2LiRMnxtChQ2P9+vVx//33x4oVK+Kuu+5qEWAOOOCA+Od//ue0tk+u092153g3ueiii2LIkCFpbb17907727n9sfYc7/PPPz9OPfXUtLaampq49dZbE6/dPf27ya9//euoqKiISZMmxSGHHBJVVVWxYMGCuPjii+OOO+6IkSNH7nbbnL9uN5LTXn311cbx48c3/vrXv25u++ijjxrPOeecxn/5l3/51G1/9atfNY4fP75x1apVzW3vvPNO48SJExt//vOfp73eqaee2nj11VenbT979uzGKVOmNG7btq2D9ia7tedYv/jiiy3aFi9e3Dh+/PjGhx56KK192rRpLY51T9Se433XXXc1jh8/vvHDDz/81PWc23/VnuOdZO7cuY3jx49vfPnll9Pax48f3/jDH/6w3fXmutra2sZNmzY1NjY2Nr722muN48ePb1y0aFGrtn3yyScbx48f3/jUU081t3344YeNU6dObbzuuuvS1j3//PMb/9f/+l+NqVSquW3OnDmNX/nKVxrfeeed9u9IDmjPsX7ppZcaGxoaWrSNHz++cc6cOWntl19+eeMFF1zQMUXnsPYc70WLFjWOHz++8bXXXtvjus7tj7XneCd57LHHGsePH9/4+OOPp7X7btLY+PLLLzfW1dWltb377ruNX/3qVxtnz579qdvm+nXbM4w57umnn468vLwoLy9vbisqKopTTjklXn311Xj//fd3u+2yZcvisMMOi9GjRze3DR8+PI4++ui0bggvvvhibN26Nb7+9a+nbX/66adHTU1NrFixouN2KIu151gfddRRLdqauua98847idukUqkWd216kvYc779VXV0djY2Nicuc23/VUce7yRNPPBFDhgyJMWPGJC6vra2N2tradtWcywoLC9t85+npp5+OAQMGpHXv7d+/f0yaNCmeeeaZqKuri4iPry3vvPNOnHbaaWndmE4//fRobGyMZcuWtWsfckV7jvXYsWNb9EwYO3Zs9O3bNyorKxO3qa+vj507d7bp/bqD9hzvv7Vz585oaGhIXObc/quOOt5NlixZEsXFxfH3f//3ict78neTMWPGREFBQVrb0KFD47Of/exurwdNcv26LTDmuDVr1sTBBx8cJSUlae1NIfDNN99M3G7Xrl3x9ttvx2GHHdZi2ejRo+NPf/pT8wfemjVrIiJarFtWVha9evWKN954o937kQvaeqx3p6qqKiI+vmB80osvvhhTpkyJE088Mc4666z47W9/27aic1hHHO+zzz47pk6dGieddFJcf/31sXnz5hbvEeHcjujY8/uNN96IysrK+NrXvpa4/NFHH40pU6bECSecEOeff34sWbKk7YX3QG+88UaMGjWqRZAZPXp0fPTRR7Fu3brm9SKixfMxAwcOjAMOOKD5/Gfv7Ny5M2pqatIe22iybt26OPHEE+Okk06Kr3/963HnnXdGfX19BqrMbVdeeWWcdNJJMWXKlPjOd77TfE43cW53ji1btsQf/vCH+Pu///u0xzma+G7SUmNjY3z44YeJ14O/levXbc8w5riqqqrEX5aa2jZt2pS43bZt26Kurm6P2w4bNiyqqqoiLy8v9t9//7T1CgoKom/fvs3Bp7tr67HenV//+teRl5cXEyZMSGsfOXJkHHnkkTF06NDYtm1bLF68OH7yk5/Epk2b4rLLLmv7DuSY9hzvPn36xBlnnBFHHHFEFBQUxMsvvxwLFiyI1157LX7xi180hyLn9l915PndFABPOOGEFss+//nPx6RJk2LIkCFRVVUV999/f1x//fVRXV3d4k4vyTZv3hxf+MIXWrQ3/b+qqqpqfr7mb9s/uW5POr870m9/+9tIpVIxefLktPYDDzwwjjrqqBg5cmR89NFHsWzZspg3b16sW7currvuugxVm1uKiopi6tSpcdRRR0VJSUmsXr067rnnnpg+fXrceeedMXjw4IgI53YnefLJJ6OhoSHx2u27SbIlS5bEBx98EP/0T//0qevl+nVbYMxxtbW1LW6PR3zcRaFp+e62i4hWbVtbW7vbUZkKCwt7TLeyth7rJEuWLIlHHnkkzj333BYja/3gBz9I+/vkk0+Oq666Ku65554488wzY9CgQW2oPve053hPmzYt7e+JEyfG6NGj4/rrr48FCxY0j8bp3P6rjjq/d+3aFUuXLo1Ro0bFZz/72RbLb7/99rS/Tz755Lj44otjzpw5MXXq1BYDQNFSbW1t8/+Xv/XJ/1dNXZx2t25P7jbZVitXroy5c+fGpEmT4otf/GLasu985ztpf5944onxb//2b/HQQw/FWWedFUcccURXlpqTJk+enBbEx48fH8cee2xcfvnl8Z//+Z/No3E6tzvHE088Ef37948vfelLLZb5btJSZWVl/OhHP4ojjjiixUBun5Tr121dUnNcUVFRpFKpFu1NJ9zuvnw1tbdm26Kiot12qamrq+sxX/Daeqw/6Y9//GPcdNNNceyxx8Yll1yyx/X32WefOOuss6KhoWG3w193Rx11vJuccMIJMWDAgHjhhRfS3sO5/bGOOt4rV66MDz74IPEX6iQFBQVxxhlnxI4dO2L16tWtL7gHKyoqav7/8rc++f+q6QvH7tbtSed3R6isrIzvfe97MXLkyJg5c2artmkaUfIPf/hDZ5bWrR155JFx+OGHp127ndsdb/369fHqq6/G5MmTWzV1Q0/9btKkqqoqZs6cGSUlJXH99ddHXl7ep66f69dtgTHH7e72dFPbJ+eJatK3b98oLCxs1balpaXR0NAQH374Ydp6qVQqtm3b1mOGDG/rsf5bb775ZlxzzTUxcuTImD17dqvn02n65W7btm17UXFu64jj/UmDBg1KO4bO7b/qqOO9ZMmS6NWr126fX0zSE8/v9hgwYMCn/r9qOm//tqtT0ro96fxur/fffz9mzJgRJSUlcdNNN8V+++3Xqu2azu3t27d3ZnndXtK1O8K53ZE+7VGC3emp1+4dO3bE1VdfHTt27IhbbrmlVZ+PuX7dFhhz3KGHHhrvvfdeVFdXp7WvWrWqeXmSXr16xciRI+P1119vsWzVqlVx4IEHNn8gNs2P9sl1X3/99di1a1ePmT+trce6yZ/+9Kf49re/Hfvvv3/cfPPNrf7CEfHxL38RyQPkdFftPd6f1NjYGBs3bkw7hs7tv+qI411XVxdPP/10jB07dq8CfU88v9tj1KhRsWbNmti1a1da+2uvvRb77rtvczf3pvP3k3duN23aFB988EGPOr/bY+vWrTFjxoxIpVKt/nLYxLndMdavX5947XZud5wnnngiDjrooL3qOt0Tz+/a2trmgZh+8IMfJD56kSTXr9sCY46bOHFiNDQ0xMKFC5vb6urqYtGiRXH44Yc3PyD+/vvvtxjyd8KECfH666+nfVl+991346WXXoqJEyc2tx199NHRt2/fePDBB9O2f/DBB2PfffeNcePGdcKeZZ/2HOuqqqqYMWNG9OrVK2655ZbdXly3bdvWYhjx+vr6+NWvfhUFBQWJ03N0V+053lu2bGnxeg888EBs2bIlvvzlLze3Obf/qj3Hu8nzzz8fO3bs2O0v1En/X3bu3Bn33ntv9OvXr8WocHz8JaGysjKt6/SECRNi8+bNsXz58ua2LVu2xFNPPRXHHXdcc5emESNGxLBhw+Khhx5Ku6488MADsc8++7QYcKunSzrWNTU1cfXVV8emTZvi5ptvbvHMeZPq6uoWXcgaGxtj3rx5ERGJk6D3dEnHO+kasWLFili9enUce+yxzW3O7b2XdLyb7Glka99NPtbQ0BD/3//3/8Wrr74a1113XXz+859PXK87XrcNepPjDj/88Jg0aVLMmTMntmzZEgcddFA8+uijsXHjxrRnLL7//e/HypUr007U008/PR5++OGYOXNmnHPOOZGXlxf33HNP7L///nHOOec0r1dUVBQXXXRR/OhHP4pZs2bFscceG3/84x/j8ccfj0suuST69u3bpfucKe051ldddVWsX78+zj333KioqIiKiormZfvvv3/zl4lnn3025s2bFxMmTIghQ4bE9u3bY8mSJbF27dq49NJLe1Q3m/Yc72nTpsXkyZNj5MiRUVhYGBUVFfHkk0/GqFGjWswz6Nz+WHuOd5MlS5ZEYWHhbj/Q7r///njmmWfiuOOOi8GDB0dVVVUsWrQo3n///fjud7+bOOhOd3bffffFjh07mrsePfvss/HnP/85IiLOPPPM6N27d8yZMyceffTRmD9/fgwZMiQiPg739957b9x4443xzjvvRL9+/eKBBx6IXbt2tRipb/r06XHNNdfEjBkz4qtf/Wq8/fbbsWDBgjj11FNb/ct4d9DWY3399dfHa6+9FieffHJUVlam/VhSXFwc48ePj4iPv3Bfd9118bWvfS0OOuigqK2tjf/+7/+OioqKOO2003rcjyFtPd6XXXZZfO5zn4uysrIoKSmJN954IxYtWhSDBg2K888/P+09nNt/1dbj3WRP3VF9N/nYv//7v8ezzz4bxx13XGzfvj0ef/zxtOVTpkyJiOiW122BsRu49tprY/DgwfHYY4/Fjh07YuTIkXHTTTfF2LFjP3W7/fbbL2677bb46U9/GvPmzYtdu3bFUUcdFd/61rda3AE7/fTTIz8/P+bPnx/PPvtsDBo0KL71rW+1GI2yu2vrsW6aw+43v/lNi2Vjx45tDowjR46M4cOHx5IlS2LLli2Rn58fo0aNiuuuuy4mTZrU4fuT7dp6vE844YR45ZVX4umnn466uroYPHhwnHvuuXHBBRfEvvvum7auc/uv2nq8Iz6+w7JixYr4u7/7u+jdu3fiOmPGjIlXXnklHn744di2bVvsu+++MXr06Jg5c2aLESd7gvnz58fGjRub/16+fHlzEJ8yZcpuj2NeXl7cfPPNcfvtt8d9990XtbW1cdhhh8U111wTw4YNS1v3uOOOixtuuCHmzp0bt912W/Tr1y/OO++8uPDCCzttv7JRW49107V70aJFsWjRorRln/nMZ5oD4+DBg+MLX/hCLF++PDZv3hy9evWK4cOHx4wZM9J+pOop2nq8J0+eHM8//3z8/ve/j48++ihKS0vjtNNOiwsvvDAGDBiQtq5z+6/aerwj/jqy9ec+97kW148mvpt8rOl68Nxzz8Vzzz3XYnlTYEyS69ftfRobGxsz9u4AAABkLc8wAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAZLHGxsa46qqr4itf+Uo8+eSTrV4GAB1BYASALLbPPvvENddcE/vvv3/ceuutsXHjxuZlv/3tb+N//ud/YurUqfHVr341g1UC0F0JjACQ5QYMGBDXXnttVFdXx+zZs6OhoSHWrFkTP//5z+Pggw+OK6+8MtMlAtBN7dPY2NiY6SIAgD37yU9+Er/97W/jnHPOieeeey7Wr18fd9xxR5SVlWW6NAC6KYERAHJEXV1dXHbZZbFmzZqIiPiXf/mX+OY3v5nhqgDoznRJBYAcUVhYGF/+8peb//vUU0/NcEUAdHcCIwDkiFWrVsVvfvOb6NevX9TV1cWtt96a6ZIA6OYERgDIATt37ozZs2dHXl5e3HbbbTFhwoR46qmn4pFHHsl0aQB0YwIjAOSAH/7wh7F+/fqYPn16jBw5Mq6++uoYNGhQ/PjHP45169ZlujwAuimBEQCy3OOPPx6PP/54HHfccXHGGWdERESfPn3ie9/7XtTW1sbs2bOjvr4+w1UC0B0JjACQxdavXx8/+tGPorS0NL7zne+kLRs7dmz8wz/8Q6xevTrmzJmToQoB6M5MqwEAAEAidxgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgET/P55rF7veRCUhAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b72e6a4",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a3928207",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:22.014715Z",
     "iopub.status.busy": "2022-10-04T19:16:22.014226Z",
     "iopub.status.idle": "2022-10-04T19:16:23.056959Z",
     "shell.execute_reply": "2022-10-04T19:16:23.056265Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:16:22 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">92</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:16:22\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=499652;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=491537;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#92\u001b\\\u001b[2m92\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=604517;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=979087;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.8 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(2 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.8 +/- 0.8) x 10^-1   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b      (2 +/- 7) x 10^-2  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140578315830272\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>28.672669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>28.672669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          28.672669\n",
       "total         28.672669"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>61.600657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.169384</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             61.600657\n",
       "BIC             65.169384"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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N998s6HN6XTqxRdfND13x/t3kzfffFNFRUUaNWqULrzwQpWXl2vJkiV64IEH9MorrygnJ6fRvlF/3vYjqm3dutU/fPhw/5tvvhloO3HihP/OO+/0//SnPz1j3zfeeMM/fPhw/7Zt2wJt+/bt848cOdL/5z//2fB8N998s/+pp54y9J85c6Z/9OjR/qqqqlZ6N5GtJcf6q6++CmorLCz0Dx8+3P/+++8b2idOnBh0rONRS47366+/7h8+fLj/2LFjZ9yPz/ZpLTneZubNm+cfPny4f8uWLYb24cOH+3/729+2eLzRzuVy+cvKyvx+v9+/fft2//Dhw/3Lly9vUt/Vq1f7hw8f7v/4448DbceOHfOPGTPG/8wzzxj2vffee/3/9//+X7/H4wm0zZ0713/NNdf49+3b1/I3EgVacqw3bdrk9/l8QW3Dhw/3z50719D+6KOP+u+7777WGXQUa8nxXr58uX/48OH+7du3n3VfPtsnteR4m/nwww/9w4cP969cudLQzncTv3/Lli1+t9ttaPv222/91157rX/mzJln7Bvt523WMEa5devWyWKxKD8/P9Bmt9s1duxYbd26VYcPH26079q1a3XxxRerX79+gbZevXrpsssuM0xD+Oqrr1RZWalbbrnF0H/8+PFyOp3auHFj672hCNaSYz148OCgtrqpefv27TPt4/F4gq7axJOWHO/6HA6H/H6/6TY+26e11vGu89FHHykrK0sDBgww3e5yueRyuVo05miWlJTU7CtP69atU+fOnQ3Tezt27KhRo0bpk08+kdvtlnTy3LJv3z6NGzfOMI1p/Pjx8vv9Wrt2bYveQ7RoybEeNGhQ0MyEQYMGKS0tTSUlJaZ9vF6vampqmvV6saAlx7u+mpoa+Xw+0218tk9rreNdZ9WqVUpOTtYPfvAD0+3x/N1kwIABstlshrbs7GxdcMEFjZ4P6kT7eZvAGOV27dqlHj16KDU11dBeFwJ3795t2q+2tlZ79uzRxRdfHLStX79++ve//x34hbdr1y5JCto3NzdXiYmJ2rlzZ4vfRzRo7rFuTHl5uaSTJ4yGvvrqK40ePVo33HCDbr/9dr399tvNG3QUa43jfccdd2jMmDG68cYbNWvWLB09ejToNSQ+21Lrfr537typkpISXXfddabbV6xYodGjR+v666/Xvffeq1WrVjV/4HFo586d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+OADTZ06VXfeeacsFosWLVqkTp066c477wzsZ7fbdf/99+ull17SjBkzNHToUP3rX//SypUr9eCDDyotLS2k7zlcWnKsn3zySR08eFB33XWXioqKVFRUFNjWqVOnwJeJDRs2aP78+RoxYoSysrJUXV2tVatWae/evXrooYfiappNS473xIkTlZeXp5ycHCUlJamoqEirV69W3759g+4zyGf7pJYc7zqrVq1SUlJSo7/QFi9erE8++URXXXWVMjMzVV5eruXLl+vw4cN6+umnTYvuxLJ3331Xx48fD0w92rBhg7777jtJ0oQJE9S+fXvNnTtXK1as0MKFC5WVlSXpZLh/55139Oyzz2rfvn1KT0/X0qVLVVtbG1Spb/LkyZo2bZqmTJmia6+9Vnv27NGSJUt08803N/kv47Ggucd61qxZ2r59u2666SaVlJQY/liSnJys4cOHSzr5hfuZZ57Rddddp+7du8vlcul///d/VVRUpHHjxsXdH0Oae7wffvhhXXTRRcrNzVVqaqp27typ5cuXq2vXrrr33nsNr8Fn+7TmHu86Z5uOyneTk/74xz9qw4YNuuqqq1RdXa2VK1cato8ePVqSYvK8TWCMAdOnT1dmZqY+/PBDHT9+XDk5OXruuec0aNCgM/ZLSUnRnDlz9Ic//EHz589XbW2tBg8erEceeSToCtj48eNltVq1cOFCbdiwQV27dtUjjzwSVI0y1jX3WNfdw+6tt94K2jZo0KBAYMzJyVGvXr20atUqVVRUyGq1qm/fvnrmmWc0atSoVn8/ka65x/v666/X119/rXXr1sntdiszM1N33XWX7rvvPrVr186wL5/t05p7vKWTV1g2btyo73//+2rfvr3pPgMGDNDXX3+tDz74QFVVVWrXrp369eunqVOnBlWcjAcLFy5UaWlp4PH69esDQXz06NGNHkeLxaLnn39eL7/8st599125XC5dfPHFmjZtmnr27GnY96qrrtLs2bM1b948zZkzR+np6brnnns0adKkNntfkai5x7ru3L18+XItX77csO38888PBMbMzEx973vf0/r163X06FElJiaqV69emjJliuGPVPGiucc7Ly9Pn332mT7//HOdOHFCGRkZGjdunCZNmqTOnTsb9uWzfVpzj7d0urL1RRddFHT+qMN3k5PqzgeffvqpPv3006DtdYHRTLSftxP8fr8/bK8OAAAAAIhYrGEEAAAAAJgiMAIAAAAATBEYAQAAAACmCIwAAAAAAFMERgAAAACAKQIjAAAAAMAUgREAAAAAYIrACAAAAAAwRWAEAAAAAJgiMAIAAAAATBEYAQAAAACmCIwAAAAAAFMERgAAIpjf79eTTz6pa665RqtXr27yNgAAWgOBEQCACJaQkKBp06apU6dOevHFF1VaWhrY9vbbb+sf//iHxowZo2uvvTaMowQAxCoCIwAAEa5z586aPn26HA6HZs6cKZ/Pp127dunPf/6zevTooccffzzcQwQAxKgEv9/vD/cgAADA2f3+97/X22+/rTvvvFOffvqpDh48qFdeeUW5ubnhHhoAIEYRGAEAiBJut1sPP/ywdu3aJUn66U9/qrvvvjvMowIAxDKmpAIAECWSkpJ05ZVXBv598803h3lEAIBYR2AEACBKbNu2TW+99ZbS09Pldrv14osvhntIAIAYR2AEACAK1NTUaObMmbJYLJozZ45GjBihjz/+WMuWLQv30AAAMYzACABAFPjtb3+rgwcPavLkycrJydFTTz2lrl276ne/+532798f7uEBAGIUgREAgAi3cuVKrVy5UldddZVuvfVWSVKHDh30i1/8Qi6XSzNnzpTX6w3zKAEAsYjACABABDt48KBeeuklZWRk6Oc//7lh26BBg/TDH/5QxcXFmjt3bphGCACIZdxWAwAAAABgiiuMAAAAAABTBEYAAAAAgCkCIwAAAADAFIERAAAAAGCKwAgAAAAAMEVgBAAAAACYIjACAAAAAEwRGAEAAAAApgiMAAAAAABTBEYAAAAAgCkCIwAAAADAFIERAAAAAGCKwAgAAAAAMPX/B1+FHMk1KdgzAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32e2a551",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "863e0e65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:23.060402Z",
     "iopub.status.busy": "2022-10-04T19:16:23.059694Z",
     "iopub.status.idle": "2022-10-04T19:16:23.070892Z",
     "shell.execute_reply": "2022-10-04T19:16:23.070299Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e99257ec",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "50716790",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:16:23.073742Z",
     "iopub.status.busy": "2022-10-04T19:16:23.073530Z",
     "iopub.status.idle": "2022-10-04T19:17:26.980530Z",
     "shell.execute_reply": "2022-10-04T19:17:26.979880Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "840a8542c31f470b8d8c0fd1de058240",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "532f0930",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d5dafe15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:26.984357Z",
     "iopub.status.busy": "2022-10-04T19:17:26.983810Z",
     "iopub.status.idle": "2022-10-04T19:17:26.990555Z",
     "shell.execute_reply": "2022-10-04T19:17:26.990007Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.169), ('data', 0.169)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e8ca5b4",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a6ae7fe9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:26.993308Z",
     "iopub.status.busy": "2022-10-04T19:17:26.993092Z",
     "iopub.status.idle": "2022-10-04T19:17:27.798285Z",
     "shell.execute_reply": "2022-10-04T19:17:27.797704Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:17:26 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:17:26\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=2039;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=710065;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:17:27 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:17:27\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=901356;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=69860;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=249961;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=669299;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=70519;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=723474;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=256805;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=26191;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=281709;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=808382;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=406023;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=780435;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=324663;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=861783;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=138772;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=466279;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">484</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=139515;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=189199;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#484\u001b\\\u001b[2m484\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">485</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=61112;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=362533;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#485\u001b\\\u001b[2m485\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">486</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=539835;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=815315;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#486\u001b\\\u001b[2m486\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40efdc28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:27.801056Z",
     "iopub.status.busy": "2022-10-04T19:17:27.800845Z",
     "iopub.status.idle": "2022-10-04T19:17:28.333212Z",
     "shell.execute_reply": "2022-10-04T19:17:28.332500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6IAAAMSCAYAAABwMnnyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB7bUlEQVR4nOzdeXxU1f3/8fedCZOQCQgEjJRGIkRALAIipYIg6KgssrR+XdDvt4IaWxXEpUWli6gUW7S1GKutLZJqH61SxQVFxUEBC4gV9QcKBFwSAUsIyJJJyEwyc39/UFJpZibL3Jk7M3k9H488Su45c89nInV855x7jmGapikAAAAAABLEYXcBAAAAAIC2hSAKAAAAAEgogigAAAAAIKEIogAAAACAhCKIAgAAAAASiiAKAAAAAEgogigAAAAAIKEIogAAAACAhCKIJpHa2lqVlpaqtrbW7lIAAAAAIG4IokmkvLxcRUVFKi8vt7sUAAAAAIibDLsLaOu8Xq+8Xq8kyefz2VwNAAAAAMQfQdRmHo9HHo9HklRaWqqioiKbKwIAAACA+GJpLgAAAAAgoZgRBQAAAFJAKBRSfX29QqGQ3aUgDTidTmVkZMgwDFvGZ0YUAAAASHI+n0+HDx9WfX293aUgTfj9fh06dEimadoyPjOiAAAAQBI7NgvaqVMnu0tBmvH5fKqvr1e7du0SPjYzogAAAEASq6+vl8vlsrsMpKGMjAwFg0FbxiaIAgAAAAASiiAKAAAAAEgonhG1mdfrldfrlXR0jTYAAACQ7CZPnixJqqur0+eff64+ffpIkk455RT99re/bdR/69at+uyzzzRhwoQm771r1y5NmTJF7733nqU1I7kQRG3m8Xjk8XgkSaWlpSoqKrK5IgAAACC6F198UdJ/QuOx7yPZunWrvF5vs4Io2gaCKAAAAJBCTNOUvyYQ1zEys12tOl/yhRde0KJFiyRJ3bt313333aeMjAw9/PDDqqqq0uTJkzVw4EDde++9uv322/X555+rrq5O3bt31y9+8Qt169bN6reCJEUQBQAAAFKIvyagqZ3mxHWMvx2cryx3Zotes337dj3wwANaunSp8vLy9Nhjj+knP/mJ/vSnP+nmm2+W1+vVo48+2tD/Jz/5ibp06SJJevzxx1VcXKx7773X0veB5EUQBQAAABCzDRs2aOTIkcrLy5MkXXnllfrd734X8XiQZcuW6cUXX1QgEJDf71fnzp0TWS5sRhAFAAAAUkhmtkt/Ozg/7mPEKtrS3vfee09PPfWUnnnmGeXm5mrlypV6+OGHYx4TqYMgCgAAAKQQwzBavGw2EYYNG6bf//73qqioUF5enp5++mmdffbZcjqdysnJUVVVVUPfw4cPy+12q1OnTgoEAnrmmWdsrBx2IIgCAAAAiFmfPn304x//WNddd52ko5sVzZs3T5J09tln64knntDEiRM1ePBg/exnP9NLL72ksWPHqlOnTho+fLgqKirsLB8JZpimadpdBI46dnzLH//4R/Xt29fucgAAAJAEamtrJUlZWVk2V4J0Y+ffLUfCRwQAAAAAtGkszbWZ1+uV1+uVJPl8PpurAQAAAID4I4jazOPxyOPxSPrP0lwAAAAASGcszQUAAAAAJBRBFAAAAACQUARRAAAAAEBCEUQBAAAAAAlFEAUAAADQYitWrND3vvc9TZ48WWPHjtX3v/99hUKhVt/vvPPO09atW1v8uu9973vasGFDk/3uvPNOjRw5UpMnT9bEiRN11VVX6dNPP21NqZKkXbt26ayzzmr16xOpurpaffv2tbuM47BrLgAAAIAW2bt3r372s59p6dKl6tGjhyTp448/lmEYNlcW3bXXXqtp06ZJkh5//HEtXLhQDz/8sG31HAvuDkfbmx8kiAIAAAApZslnm1RTXxe3+2dntNNlvc6I2L5//345nU6dcMIJDddOP/30hj9/+umnmj9/vvbu3StJuvLKKzV16lQtXrxYL7/8surr65WRkaGf/vSnGjx4cKP7V1ZWat68edq9e7f8fr/OO+883XrrrZKk999/X/fcc4+CwaAGDBigYDDY4vdnmqZ8Pl9D/fX19frBD36gAwcOyO/3q1+/frrvvvuUnZ0tSXruuef05JNPyjRNZWRkNAqvgUBAc+bMUXZ2tu6++27t379fd955p/bs2aOTTjpJJ5xwgnr16qWZM2equLhY27dvV01Njf71r39p8eLFWr9+vRYtWiRJ6t69u+677z7l5eVp6dKl8nq9evTRRyVJb731lp544gk99dRT2rBhg+677z6dddZZev/99xUMBvXLX/5SAwYMkCQ9/fTTeuKJJ5Sdna0LLrigxT+jeCOIAgAAACmmpr5O1fUB28bv27evhgwZovPOO09Dhw7V4MGDNXHiROXl5am+vl433nijZs6cqYsvvliS9NVXX0mSJk+erOnTp0uSPvzwQ91555167bXXGt3/zjvv1A9+8AN9+9vfbgiJr776qs4//3zdeuutuv/++zV8+HD94x//0NKlS5td96JFi/T888/rq6++ktPp1F/+8hdJktPp1IMPPqjOnTvLNE3NnTtXf/nLX3T99ddrw4YN+t3vfqenn35aJ554oo4cOSLpaBiXpMOHD2vGjBkaPny4fvjDH0qS5s2bp0GDBunmm29WZWWlpkyZol69ejXU8cEHH+iFF15Q165dtX37dj3wwANaunSp8vLy9Nhjj+knP/mJ/vSnPzX5fj777DP94he/0Ny5c/W3v/1Nv/3tb7Vo0SJt375dxcXFev7553XiiSfqN7/5TbN/RolCEAUAAABSTHZGO1vv73A4VFxcrE8//VT//Oc/tWbNGv3+97/Xc889p0AgIL/f3xBCJalLly6SpC1btuj3v/+9Dh48KKfTqc8//1y1tbXKyspq6FtTU6P169dr3759x137/PPP9dlnn8npdGr48OGSpHPOOUf5+fnNfl9fX5r73HPP6eabb9bSpUtlmqZKSkq0evVqBYNBVVVVNczUrlq1SpMnT9aJJ54oSWrfvn3D/erq6jR16lQVFRVpypQpDdffeecd3XHHHZKkbt26afTo0cfVce6556pr166SpA0bNmjkyJHKy8uTdHT2+He/+12zZnpPPvlkDRw4UJI0ePBgPfHEEw3jjxo1qqHmqVOn6g9/+EOzf06JQBAFAAAAUky0ZbOJ1Lt3b/Xu3VtXXHGFrr32Wr355ps655xzwvYNBAKaOXOm/vznP+uMM86Qz+fTkCFDFAgEjguipmlKkpYsWaLMzMzj7rFt27ZG923tc6njx4/XnDlz9NVXX+ntt9/Whg0b9Je//EU5OTl68skn9c477zR5j4yMDA0ZMkRvvvmmJkyYoHbtwgf4/67x2JLfpvo6nc7jNoDy+/3H9f36z8fhcEQMr8n47G7beyo2yXi9Xt1555268847VVxc3GT/ZQvXJKAqAAAAILKKigpt3Lix4ftDhw5p165dys/P1ymnnKKsrCy9/PLLDe1fffWVAoGA6urq9I1vfEOS9NRTT4W9t9vt1rBhw/T4448fN96ePXvUq1cvBYPBhpC4bt06ffHFF616D+vXr1fnzp3VqVMnHT58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amq0fv16nXfeeXrooYf0hz/8QT179tTy5cutGA4AkMImzhxldwmIwF8TaFYIbcq2dWVNzqoCANo2S2ZEDx8+rC5dujR8v2nTJgWDQZ1//vlHB8nI0FlnnaU33njDiuEAACls4iyCaCpYvHuustyusG0zByxQ8ebZja7XVgc0vcfcOFcGAEgHlgRRt9utw4cPN3z/wQcfyOFwaODAgf8ZKCNDtbW1VgwHAIizmvqASrZvDNvmq4vcJkntnE4N65avwo658SoPCZDldinLnRm2zXAYEdsAAGgOS5bmnnzyyVq3bp0OHTqkqqoqeb1e9enT57hnRvfs2aPOnTtbMRwAIE7a/XtDOVNSdX0g7JcpM2JbdX1AB/1HtKFyp71vBAAAJDVLZkQvueQS3X333brkkksaZj6vu+664/ps2bJFffr0sWI4AECcDOuWrw2VO1UXDEbsY8iQOyP8ks2a+oBMKerrAQAALAmio0eP1q233qpXXnlFknTeeedp3LhxDe0ffvihqqur9e1vf9uK4QAAcVLYMbfJJbULNq3WtD5DwraVbN+o6no2qQEAANFZEkQlacqUKZoyZUrYtkGDBrFjLgAAAABAkkXPiKazgwcPavbs2brwwgt11VVXaePGyBt0AAAAAACaRhBtwkMPPaQuXbropZde0g033KC77777uB2CAQAAAAAtQxCNoqamRm+//bauueYaZWVl6ZxzzlGvXr30j3/8w+7SAAAAACBlWfaMaDKoqanR008/rS1btmjr1q2qqqrSXXfdddzGSccEAgEtWrRIK1asUFVVlXr37q3rrrtOQ4cObeiza9cutW/fXieeeGLDtV69eunzzz9PyPsBAAAAgHSUVjOihw4dUklJicrLy1VYWBi17/33368lS5boggsu0M033yyHw6HZs2dr06ZNDX2OHDkit9t93OvcbreOHDkSl/oBAGiOiTNHNdmntjqg2mp/2C8zZEZoY8djAEBipNWMaG5urp5//nnl5uZq27Ztuv7668P227Jli1auXKkbbrhBU6dOlSRddNFFmjZtmh577DE99thjkqT27dururr6uNdWV1erffv28X0jAIC0traiTCPyClr9+omzmg6i03vMjdo+tdOcVo+P2C1buKZZ/xwBIF2l1Yyoy+VSbm708+8kafXq1XI6nZo0aVLDtczMTE2YMEEff/yxKioq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XV193PUtW7Y0tAMAAAAA7JN2QXT06NEKBoN66aWXGq4FAgEtX75c/fv3bzi6BbCLx+Oxu4SklU4/m2R+L3bWlsix4z2W1fdP5r8zSD78fYksnX42yfxe+CxJzvsn89+Z/5ZSmxU999xz8vl82r9/v1544QWNGjVKp556qiTpkksuUU7O0V3F7r77bq1Zs0aXXXaZevTooddee01bt27VQw89pEGDBtn4DqIrLS1VUVGR/vjHPybtMgwAQHLjswQAEKtEfJak1DOizzzzjPbs2dPw/Zo1a7RmzRpJ0oUXXtgQROfMmaO8vDy9/vrr8vl86tWrl371q18ldQgFAAAAgLYipYLokiVLmtUvMzNTN954o2688cY4VwQAAAAAaKm0e0Y0leXm5mratGnKzc21uxQAQIriswQAEKtEfJak1DOiAAAAAIDUx4woAAAAACChCKIAAAAAgIQiiAIAAAAAEoogCgAAAABIKIIoAAAAACChCKIAAAAAgIQiiAIAAAAAEoogCgAAAABIKIIoAAAAACChCKIAAAAAgIQiiAIAAAAAEirD7gLQMi+88IKWLVumzz77TP/3f/+na665xu6SAAApJBAI6De/+Y3ee+89+Xw+FRQUaMaMGfrWt75ld2kAgBTywAMPaO3ataqtrVVeXp6uv/56jRgxotmvN0zTNONYHyz29ttvyzAMeb1enXzyyQRRAECLHDlyRM8884zGjRunbt266a233tJvf/tbPfPMM8rOzra7PABAiigvL1f37t3lcrm0detW3XbbbXr66ad1wgknNOv1LM1NMSNHjtQ555yjnJwcu0sBAKSg9u3ba9q0acrLy5PD4dD555+vjIwM7dy50+7SAAAppGfPnnK5XJIkwzBUV1enffv2Nfv1LM2No5qaGj399NPasmWLtm7dqqqqKt11110aN25co76BQECLFi3SihUrVFVVpd69e+u6667T0KFDbagcAJAs4v1ZsnPnTlVVValHjx7xfBsAABvF67PkN7/5jZYvX65AIKDvfOc76tWrV7NrYkY0jg4dOqSSkhKVl5ersLAwat/7779fS5Ys0QUXXKCbb75ZDodDs2fP1qZNmxJULQAgGcXzs8Tv92vevHm66qqrWGkDAGksXp8lt912m15//XU99NBDGjp0qAzDaHZNBNE4ys3N1fPPP6+///3vuuGGGyL227Jli1auXKnrr79eN954oyZNmqTf/va3Oumkk/TYY48lsGIAQLKJ12dJfX29fv7zn6tHjx6aNm1aHN8BAMBu8cwlTqdTQ4YM0caNG7V+/fpm10QQjSOXy6Xc3Nwm+61evVpOp1OTJk1quJaZmakJEybo448/VkVFRTzLBAAksXh8loRCIc2bN0+GYWjOnDkt+g02ACD1JCKXBINB7d69u9k1EUSTwI4dO/TNb35Tbrf7uOunnXaaJOmTTz5puFZfXy+/369QKKRgMCi/369gMJjQegEAyaclnyUPPvig9u/fr3vuuUcZGWwXAQA4qrmfJT6fT2+88YZqampUX1+vt956Sx988IEGDhzY7LH49EkC+/fvD/sbimPXvr771JNPPqmSkpKG75966qmIDxoDANqO5n6W7NmzRy+//LJcLtdxv/FesGBBi/4DAgCQfpr7WWIYhl5++WU99NBDMk1TPXr00M9+9jOdeuqpzR6LIJoE/H6/2rVr1+j6se2Q/X5/w7VrrrmGs0MBAI0097PkpJNO0po1axJaGwAgNTT3s8TtdmvhwoUxjcXS3CSQmZmpurq6RtcDgUBDOwAA0fBZAgCIVSI/SwiiSSA3N1f79+9vdP3Yta5duya6JABAiuGzBAAQq0R+lhBEk0BhYaF27dql6urq465v2bKloR0AgGj4LAEAxCqRnyUE0SQwevRoBYNBvfTSSw3XAoGAli9frv79+ysvL8/G6gAAqYDPEgBArBL5WcJmRXH23HPPyefzNUxnr127Vnv37pUkXXLJJcrJyVH//v01ZswYPf744zp48KB69Oih1157TXv27NEdd9xhZ/kAgCTAZwkAIFbJ9llimKZpWnpHHOeyyy7Tnj17wrY988wz6t69u6SjO1AtWrRIK1askM/nU69evXTdddfp29/+diLLBQAkIT5LAACxSrbPEoIoAAAAACCheEYUAAAAAJBQBFEAAAAAQEIRRAEAAAAACUUQBQAAAAAkFEEUAAAAAJBQBFEAAAAAQEIRRAEAAAAACUUQBQAAAAAkFEEUAAAAAJBQBFEAANBgyZIlOu+88/Svf/2r4dqrr76qUaNG6dVXX7Wxsv94+eWXNXr0aH366ad2lwIAaCWCKAAgbf3rX//SqFGjon5ddtlldpeZNKqqqvTkk09q/Pjx6t69e1zHevfddzVq1CjdfvvtTfa99957NWrUKL3xxhuSpLFjxyovL0+PPfZYXGsEAMRPht0FAAAQbz169NAFF1wQti0nJyfB1SSvJUuW6PDhw5o6dWrcxzrrrLOUl5enjRs3qqKiQnl5eWH7+Xw+vf3228rJydGoUaMkSRkZGbrsssu0cOFCbd68WQMGDIh7vQAAaxFEAQBpr0ePHrrmmmvsLiOp1dfX6+WXX9aAAQPUo0ePuI/ncDg0btw4lZSU6LXXXtPVV18dtp/X65Xf79f48eOVmZnZcP3888/XI488ohdffJEgCgApiKW5AAB8zahRo3TzzTfrq6++0i9+8QtNnDhRHo9HP/zhD/XBBx+EfU1NTY2eeOIJff/735fH49H48eN1++23a9OmTY363nzzzRo1apT8fr/++Mc/6oorrtCYMWP0xBNPNPRZvXq1ioqK5PF4NHnyZC1YsEBVVVW67LLLjltKfN9992nUqFHasmVL2LoWLVqkUaNGyev1Nvm+3333Xe3fv1+jR49usu8xe/fu1dVXXy2Px6NVq1Y1XD9w4ICKi4s1depUnX/++Zo4caJ++tOf6rPPPjvu9ePHj5dhGHr11VdlmmbYMZYvXy5JmjBhwnHXO3XqpMGDB2vVqlWqqalpds0AgORAEAUA4L/4fD7ddNNNKisr04UXXqhRo0aptLRUP/rRjxqFqcOHD+uGG25QSUmJOnTooMmTJ2vUqFHavn27Zs2apbfffjvsGD/72c/02muvafDgwfqf//mfhmcyX3nlFf3sZz/Trl27dNFFF2ns2LH6+OOPddttt6m+vv64e0yaNKnhNf8tGAxq+fLlOuGEExqWtEazceNGSdLpp5/e9A9IUllZmW688Ubt3btXDzzwQEOA3b17t6677jr9/e9/1ze+8Q1973vf03e+8x29++67uuGGG44LzSeddJKGDBmiL7/8MmzI/+yzz7Rt2zadeuqp6tOnT6P2008/XYFAQB999FGzagYAJA+W5gIA0t7u3buPm3H8utNPP13Dhg077tonn3yiKVOm6JZbbpHDcfR3tmeeeaYWLFigpUuX6kc/+lFD39/+9rf6/PPPNXv2bF188cUN1w8cOKCioiI98MAD+va3v33cslJJ2r9/vxYvXqyOHTs2XKuqqtLDDz+s9u3b6/HHH1d+fr4kqaioSD/60Y9UWlqqk046qaH/wIEDVVBQoJUrV2rGjBlq3759Q9u7776ryspKXXrppXK5XE3+jDZv3iyHw6HCwsIm+3788ce64447lJGRoeLi4uNe84tf/EJfffWVHnzwQX37299uuP79739fRUVFWrBggUpKShquT5gwQe+9956WL1+uM88887hxIs2GHtO3b19J0kcffXTcWACA5MeMKAAg7e3evVslJSVhvzZs2NCof/v27fXDH/6wIYRKR3dqdTqd2rZtW8O1gwcP6q233tKZZ555XAiVpM6dO2vq1Kk6ePBgw2zj102fPv24ECpJ//jHP3TkyBGNHz++IYRKRzfnue6668K+t0mTJqmmpkYrV6487vrLL78sSZo4cWKkH8txKisrlZOT02RoXb9+vW699VZ16NBBjz766HEhdPv27froo4900UUXNQqG+fn5uvjii/XZZ58dN6s8cuRInXDCCVq9erWqq6sbrtfX12vFihVyuVwRN5rq0qWLpKNLhAEAqYUZUQBA2vv2t7+tBx98sNn9v/nNbyo7O/u4axkZGerSpYt8Pl/DtW3btikYDKquri7sjOuuXbskSeXl5Ro+fPhxbaeddlqj/sfOxTzjjDMatfXv319Op7PR9Ysuukh/+MMf9PLLLzeE4a+++krr1q3Tt771LRUUFDTxbo86fPiwunXrFrXPW2+9pX/+85/q3bu3HnjgAXXu3Pm49mPLbg8cOBD25/HFF180/G+vXr0kqSFoPvvss/J6vZo8ebIkae3atTp48KA8Ho86dOgQtp5j1w8dOtSs9wgASB4EUQAA/ovb7Q573el0KhQKNXx/+PBhSUeXtW7evDni/WpraxtdOzab93XHZgT/O+BJR3eZPeGEExpd79Chg8aMGaPXXntNn332mXr16qVXX31VwWCw2bOhkpSZmalAIBC1z8cff6xgMKgzzjgjbI3Hfh7r16/X+vXrI97nyJEjx30/YcIEPfvss1q+fHlDEG1qWa6khnqzsrKi1g0ASD4EUQAAWulYYL388st10003tei1hmFEvN+BAwcatYVCIR06dCjsrOXkyZP12muvadmyZZo1a5ZeeeUVud1ujRkzptn1nHDCCaqsrIza5/rrr9c//vEPPfvss3I6nY3e87H6Z82apUsuuaTZY/fu3Vv9+vXT1q1b9fnnn6tDhw5699131b1790bPjX7dseDbqVOnZo8FAEgOPCMKAEAr9evXT4Zh6OOPP7bkfr1795aksLOrW7duVTAYDPu6008/Xb1799Ybb7yhd999V7t27dIFF1zQopnCXr16KRAIqKKiImIfl8ulX/ziFzr77LP1zDPP6JFHHjmu/dhy49b8PI7NfL7yyit6/fXXFQwGG453ieTYUt9jy3wBAKmDIAoAQCvl5uZqzJgx+uijj/S3v/0t7FmYW7ZsCbs0N5xzzjlH7du31yuvvKLdu3c3XK+vr9eiRYuivnbSpEk6fPiwfvnLX0pSo82TmjJo0KCGeqNxuVyaN2+ehg8friVLlqi4uLihrX///urfv79WrlzZaPMk6eis7ocffhj2vh6PR1lZWVqxYoWWL18uh8OhsWPHRq1l69atx9UOAEgdLM0FAKS9aMe3SNJVV13V6HiV5rrtttu0c+dOPfbYY3r99dd1+umnKycnR5WVldq2bZt27dql559/vlmzkx06dNCMGTP0wAMPqKioSOedd57cbrfeeecduVwude3aNeIM4YUXXqjf//732rdvn/r27Rv23M1ozjnnHP3ud7/Te++91+SS3nbt2um+++7Tz3/+c/3973+XaZq6+eabJUk///nPdcstt+iee+7Rs88+q1NPPVWZmZnau3evPvroIx06dEher7fRPd1ut84991y9/vrrOnjwoIYNG6a8vLyINZimqY0bN6pnz57H7TAMAEgNBFEAQNo7dnxLJJdeemmrg2jHjh316KOPaunSpXrzzTfl9XoVCoXUpUsXFRYW6uqrrw67yVAkEydOVIcOHfTUU0/ptddek9vt1ogRI/TDH/5Ql156qXr06BH2dW63WyNHjtSKFStaPBsqSd27d9fQoUO1atUqzZo1q8ljXI6F0bvvvlvPPvusTNPUrFmz9I1vfEOLFi3SM888o7fffluvvvqqHA6HcnNzNXDgQI0ePTriPSdMmKDXX39dkjR+/Pio4/+///f/VFFRoZkzZ7b4vQIA7GeY4dYRAQCApLJr1y5deeWVGjNmjO65556wfa6++mrt2bNHS5cujbjzbzQbN27Urbfeqp/+9Ke68MILYy05ru677z5t2LBBf/vb3yIe7wIASF48IwoAQBKpqqpqdIyK3+9v2Bho5MiRYV/3zjvv6PPPP5fH42lVCJWkIUOGaNiwYXryySePO6Ym2ezcuVNvvvmmvv/97xNCASBFsTQXAIAk8uGHH+pXv/qVhg4dqhNPPFGHDh3S+++/rz179ujMM8/Ueeedd1z/F154QXv37tXLL78sl8ulq666Kqbxb775Zr3xxhuqrKyM+oymnfbu3atp06bpu9/9rt2lAABa6f+3b8dEDMNAEEWXh8ZEVAqExxBMSqzMwKUaQwiAVG4uKd5DcO2fufWaCwB/5L7vzDlzXVee50mStNYyxshxHF9b1n3fs9bKtm05zzO99x9cDQDvCFEAAABK2YgCAABQSogCAABQSogCAABQSogCAABQSogCAABQSogCAABQSogCAABQSogCAABQSogCAABQ6gNEk0QemgKQ7AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "245fe7e6",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c007c76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.336923Z",
     "iopub.status.busy": "2022-10-04T19:17:28.336320Z",
     "iopub.status.idle": "2022-10-04T19:17:28.343020Z",
     "shell.execute_reply": "2022-10-04T19:17:28.342408Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6e400201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.345471Z",
     "iopub.status.busy": "2022-10-04T19:17:28.345271Z",
     "iopub.status.idle": "2022-10-04T19:17:28.348363Z",
     "shell.execute_reply": "2022-10-04T19:17:28.347778Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "53981170",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.350836Z",
     "iopub.status.busy": "2022-10-04T19:17:28.350514Z",
     "iopub.status.idle": "2022-10-04T19:17:28.450090Z",
     "shell.execute_reply": "2022-10-04T19:17:28.449492Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:17:28 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:17:28\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=322770;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=533671;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(4.4 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.59 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (4.4 +/- 0.6) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.59 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140578244488688\">\n",
       "<tr><td>1.00</td><td>0.43</td></tr>\n",
       "<tr><td>0.43</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.43\n",
       "0.43 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>199.32694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>199.32694</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake          199.32694\n",
       "total         199.32694"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>402.909199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>406.477925</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            402.909199\n",
       "BIC            406.477925"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7ba18787",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.452632Z",
     "iopub.status.busy": "2022-10-04T19:17:28.452401Z",
     "iopub.status.idle": "2022-10-04T19:17:28.561220Z",
     "shell.execute_reply": "2022-10-04T19:17:28.560629Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1043</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=711914;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=428241;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1043\u001b\\\u001b[2m1043\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.6 -0.4 +0.6</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-7.4 +/- 2.5) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(1.36 -0.35 +0.5) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                result  \\\n",
       "parameter                                                                \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K                 1.6 -0.4 +0.6   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index    (-7.4 +/- 2.5) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (1.36 -0.35 +0.5) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140578244517024\">\n",
       "<tr><td>1.00</td><td>0.87</td><td>-0.93</td></tr>\n",
       "<tr><td>0.87</td><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.93</td><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.87 -0.93\n",
       " 0.87  1.00 -0.86\n",
       "-0.93 -0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>188.366837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>188.366837</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         188.366837\n",
       "total        188.366837"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>383.255414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>388.469744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            383.255414\n",
       "BIC            388.469744"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d798df82",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac769fa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.564334Z",
     "iopub.status.busy": "2022-10-04T19:17:28.563727Z",
     "iopub.status.idle": "2022-10-04T19:17:28.569431Z",
     "shell.execute_reply": "2022-10-04T19:17:28.568757Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 1.4810705793631323e-06\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47d56f18",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "04e3af48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.572141Z",
     "iopub.status.busy": "2022-10-04T19:17:28.571932Z",
     "iopub.status.idle": "2022-10-04T19:17:28.575637Z",
     "shell.execute_reply": "2022-10-04T19:17:28.575022Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fc1af33",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7a46cf5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:17:28.578147Z",
     "iopub.status.busy": "2022-10-04T19:17:28.577950Z",
     "iopub.status.idle": "2022-10-04T19:19:58.054874Z",
     "shell.execute_reply": "2022-10-04T19:19:58.054226Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e16228a2a441483b84419510dc0b4774",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6408fc0c",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d7a78edb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:19:58.058753Z",
     "iopub.status.busy": "2022-10-04T19:19:58.058225Z",
     "iopub.status.idle": "2022-10-04T19:19:58.064496Z",
     "shell.execute_reply": "2022-10-04T19:19:58.063936Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277150c1",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ef8e5bcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:19:58.067683Z",
     "iopub.status.busy": "2022-10-04T19:19:58.067223Z",
     "iopub.status.idle": "2022-10-04T19:19:58.631429Z",
     "shell.execute_reply": "2022-10-04T19:19:58.630815Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ba70cc8",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "473c542c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-04T19:19:58.634581Z",
     "iopub.status.busy": "2022-10-04T19:19:58.634236Z",
     "iopub.status.idle": "2022-10-04T19:19:59.220773Z",
     "shell.execute_reply": "2022-10-04T19:19:59.220106Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2602b42",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "1a3006992e6f454288f5cf87f60de25b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2181d3b91c3b4ab3b3d5182ce0342995": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "3ce7fbeced36464aa5d1867e17469a6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_811abc8f37874a26aae1de4b331c5bde",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_55fc7fab9fe9492e91c253e28c46a3bc",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "3fef5a5da927408e82c88bf5dc06fc83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_93d66a5d07e448d9a2fb0705d2a353ab",
       "placeholder": "​",
       "style": "IPY_MODEL_aeb8dc5d849341e08801d22886a821cd",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:29&lt;00:00,  6.76it/s]"
      }
     },
     "4864d066cb8e478d8ea1d74f4576f0cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "55fc7fab9fe9492e91c253e28c46a3bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "666e910b1c234653a737ebd6531d5cd4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "68a31fb7666646e6b42fd0a0db3e3d42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e24b7a450b494ef6b156a446d759f053",
       "placeholder": "​",
       "style": "IPY_MODEL_bbc43c5b95804320a07a83312815e44f",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "7dfbfaa1a3924db1ba432c3fc323c4ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e576f4d25f21467ca8d9c0bf1e636b63",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4864d066cb8e478d8ea1d74f4576f0cd",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "811abc8f37874a26aae1de4b331c5bde": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "81f5665f20e040d98b0d3fdb54f812a1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f69a0e15a949491bab62e9efa1414b7b",
       "placeholder": "​",
       "style": "IPY_MODEL_1a3006992e6f454288f5cf87f60de25b",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:03&lt;00:00, 15.67it/s]"
      }
     },
     "840a8542c31f470b8d8c0fd1de058240": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ea9a08d50f254b85a4b1b365265c2102",
        "IPY_MODEL_3ce7fbeced36464aa5d1867e17469a6a",
        "IPY_MODEL_81f5665f20e040d98b0d3fdb54f812a1"
       ],
       "layout": "IPY_MODEL_caff62c74db542da8e1930a2813547de",
       "tabbable": null,
       "tooltip": null
      }
     },
     "93d66a5d07e448d9a2fb0705d2a353ab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aeb8dc5d849341e08801d22886a821cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bbc43c5b95804320a07a83312815e44f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "caff62c74db542da8e1930a2813547de": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "d4c28694677544c5a5b2838d2e2d8d9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e16228a2a441483b84419510dc0b4774": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_68a31fb7666646e6b42fd0a0db3e3d42",
        "IPY_MODEL_7dfbfaa1a3924db1ba432c3fc323c4ac",
        "IPY_MODEL_3fef5a5da927408e82c88bf5dc06fc83"
       ],
       "layout": "IPY_MODEL_2181d3b91c3b4ab3b3d5182ce0342995",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e24b7a450b494ef6b156a446d759f053": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e576f4d25f21467ca8d9c0bf1e636b63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ea9a08d50f254b85a4b1b365265c2102": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_666e910b1c234653a737ebd6531d5cd4",
       "placeholder": "​",
       "style": "IPY_MODEL_d4c28694677544c5a5b2838d2e2d8d9e",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "f69a0e15a949491bab62e9efa1414b7b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
