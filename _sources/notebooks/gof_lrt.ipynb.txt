{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "81d3c8db",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65088d7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:40.705430Z",
     "iopub.status.busy": "2022-09-28T12:10:40.704891Z",
     "iopub.status.idle": "2022-09-28T12:10:40.779927Z",
     "shell.execute_reply": "2022-09-28T12:10:40.778800Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c01a613c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:40.786408Z",
     "iopub.status.busy": "2022-09-28T12:10:40.786067Z",
     "iopub.status.idle": "2022-09-28T12:10:44.300078Z",
     "shell.execute_reply": "2022-09-28T12:10:44.298929Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f9e46b0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:44.304759Z",
     "iopub.status.busy": "2022-09-28T12:10:44.304335Z",
     "iopub.status.idle": "2022-09-28T12:10:44.338979Z",
     "shell.execute_reply": "2022-09-28T12:10:44.338162Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0d7af20",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6976fffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:44.343167Z",
     "iopub.status.busy": "2022-09-28T12:10:44.342568Z",
     "iopub.status.idle": "2022-09-28T12:10:45.980540Z",
     "shell.execute_reply": "2022-09-28T12:10:45.979512Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:10:44 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:10:44\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=225800;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=110101;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:10:45 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:10:45\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=762843;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=523852;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4wAAAMQCAYAAABsbuuaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAABW9ElEQVR4nO3dbXhU9Z0//o/kzhjuJAilghSUUrSxWKtdtIjQikUkV71B6666/rbqruxaH1Cl0F5ef9H+rF3dXrS7tUtry89t601VLBZQUURWi9vWSo2CoC1GuoiVIHchJpOQ/wOb2DEnEJKQmcm8Xo/I95wz85nDZHLec743hzU3NzcHAAAAfECfTBcAAABAdhIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjD3s3XffjQ0bNsS7776b6VIAAAD2S2DsYdXV1XHVVVdFdXV1pksBAADYL4ERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIFFhpgsAAKB3qlq6KRrqGqO4tDAqpo/KdDlAJwiMAAAcElXLN8Xe7fVxxKASgRFylC6pAAAAJBIYAQAASCQwAgAAkMgYRgAA+AsT9UA6gREAAP7CRD2QTpdUAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCLLagAAkHWshwjZQWAEACDrWA8RsoMuqQAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQozXUCSvXv3xr333hvr1q2L9evXx+7du2Pu3Lkxbdq0Ax775S9/OdauXZu4raCgIJ566qnWny+66KLYunVrm/0qKyvjK1/5SqfrBwAA6A2yMjDu3LkzFi1aFEOHDo3jjjsuXnjhhQ4fe9lll8W5556b1lZXVxd33HFHnHLKKW32HzNmTFx88cVpbcOHD+9c4QAAAL1IVgbG8vLyWLx4cZSXl8crr7wSV199dYePTQqFjz/+eEREnHXWWW22DR48OKZOndr5YgEAAHqprBzDWFxcHOXl5d32eCtWrIjS0tL4zGc+k7g9lUpFXV1dtz0fAABAb5CVdxi7044dO+K3v/1tTJkyJUpLS9ts/93vfhdTp06Npqam+NCHPhQzZ86MmTNnZqBSAACA7NLrA+OTTz4ZTU1Nid1RR48eHSeeeGKMGDEidu3aFcuXL4/vfve7sW3btrjmmms6/Zzbtm2LmpqaxG3V1dWdflygd6lauika6hqjuLQwKqaPynQ5AABt9PrA+MQTT8TAgQPjU5/6VJtt3/zmN9N+Puecc+L666+P+++/Py644IIYMmRIp55zyZIlsWjRok4dC+SPquWbYu/2+jhiUInACABkpV4dGLds2RIvv/xynH/++VFYeOCXethhh8VFF10Uv/71r2Pt2rWdngynsrIyTj/99MRt1dXVccstt3TqcQHID+4+A5AtenVgXLFiRUQkz47anpa7irt27er08w4ePDgGDx7c6eMByG/uPgOQLbJyltTu8sQTT8TRRx8dJ5xwQoeP2bJlS0REDBw48BBVBQAAkBtyOjBu27Ytqquro7Gxsc22jRs3RnV1dXzuc59LPHbXrl3R1NSU1tbY2Bg//elPo6ioKE466aRDUjMAAECuyNouqQ8++GDs2bOndbbRZ599Nv785z9HRMQFF1wQffv2jYULF8ajjz4a9913XwwbNizt+AN1R3322Wfj7rvvjkmTJsWwYcNi9+7dsWLFiti0aVNcffXV3boOJAAAQC7K2sB43333xdatW1t/Xr16daxevToiIqZOnRp9+/Zt99h9+/bFypUr46Mf/Wgcc8wxifuMHj06Ro4cGStWrIgdO3ZEYWFhjBkzJm666aaYPHly974YAACAHJS1gfH+++8/4D7z5s2LefPmtWnv06dPPPjgg/s9duzYsW2W1QAAAOB9OT2GEQAAgENHYAQAACCRwAgAAECirB3DCLynaummaKhrjOLSQgt4AwDQowRGyHJVyzfF3u31ccSgEoERAIAepUsqAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkKgw0wUAAGRC1dJN0VDXGMWlhVExfVSmywHISgIjAJCXqpZvir3b6+OIQSUCI0A7dEkFAAAgkcAIAABAIl1SyTnGnAAAQM8QGMk5xpwAAEDP0CUVAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAADdrr42Fam6xoiISNU1Rn1tKsMVAZ0hMAIA0K3qa1Ox5MY1kaprioiIVF1TLLlxjdAIOUhgBACgW21YuTl2vlmb1rbzzdrYsHJzhioCOktgBACgW9VU70puf2N3D1cCdJXACABAtyof2T+5/Zh+PVwJ0FUCIwAA3WrslBExYFhZWtuAYWUxdsqIDFXUMSbqgbYERgAAulVJWVFUzp8QRaUFERFRVFoQlfMnRElZUYYra5+JeiCZwAgAQLcrKSuKotLCiIgoKi3M6rAYYaIeaI/ACABA3jNRDyQTGAEAyHsm6oFkAiMAAHkvVyfqgUNNYAQAIO/l4kQ90BMERgAAiNybqAd6gsAIAEBWsR4iZA+BEQCArGE9RMguhZkuIMnevXvj3nvvjXXr1sX69etj9+7dMXfu3Jg2bdoBj12+fHnceuutidsWL14c5eXlaW3PPPNM/PjHP47q6uoYOHBgnHPOOXH55ZdHYWFWnhoAgF5tf+shnjhjdIaqgvyVlalo586dsWjRohg6dGgcd9xx8cILLxz0Y3zpS1+KYcOGpbX17ds37efnnnsuvva1r8X48ePjuuuuiz/+8Y9x9913xzvvvBOzZ8/u0muAfFa1dFM01DVGcWlhVEwflelyAMgh1kOE7JKVgbG8vLz1buArr7wSV1999UE/xqc//en42Mc+tt99vve978Wxxx4bd9xxR+sdxSOOOCJ+8pOfxIUXXhgjR47sVP2Q76qWb4q92+vjiEElAiMAB6V8ZP/4w6/ebNtuPUTIiKwcw1hcXNym62hn7N27N5qamhK3vf766/H666/HjBkz0rqfnnfeedHc3ByrVq3q8vMDAHBwrIcI2SUr7zB2h+uuuy7q6uqiqKgoTjnllPjnf/7nGDHi/Q+ajRs3RkTE2LFj044bPHhwHHXUUfHqq6/2aL0AHBq6SENuaVkP8d4vPxWpuibrIUKG9brAWFJSEtOmTYuTTjopysrKYsOGDXH//ffHrFmz4oc//GEMHTo0IiJqamoiIhLvZJaXl7du74xt27a1e3x1dXWnHxeAg6eLNOSelvUQ3wuM1kOETOp1gXHKlCkxZcqU1p8nTpwYp556alx77bXxX//1X/GVr3wlIiIaGhoi4r3urx9UXFwce/fu7XQNS5YsiUWLFnX6eAAAgGzQ6wJjkhNPPDGOP/74eP7551vbWoJiS3D8aw0NDVFSUtLp56usrIzTTz89cVt1dXXccsstnX5sAACAnpIXgTEiYsiQIfHGG2+0/tzSFbWmpqa1m2qLmpqaGDduXKefa/DgwTF48OBOHw8AAJANsnKW1ENhy5YtMXDgwNafx4wZExERGzZsSNtv27Zt8fbbb7duBwAAyFc5HRi3bdsW1dXV0djY2Nq2Y8eONvutWbMmNmzYEKeeempr26hRo+KYY46JRx55JG3pjYcffjgOO+ywmDRp0iGtHQAAINtlbZfUBx98MPbs2dM62+izzz4bf/7znyMi4oILLoi+ffvGwoUL49FHH4377rsvhg0bFhER11xzTXz0ox+NsWPHRllZWWzcuDGWLVsWQ4YMicsuuyztOWbNmhVz586N2bNnx2c/+9n44x//GIsXL45zzz03PvKRj/To6wUAAMg2WRsY77vvvti6dWvrz6tXr47Vq1dHRMTUqVOjb9++icdNmTIlnnvuufjNb34T7777bpSXl8eMGTPiiiuuiEGDBqXte9ppp8Utt9wSixYtigULFsSAAQPi0ksvjSuuuOKQvS4AAIBckbWB8f777z/gPvPmzYt58+altV111VVx1VVXdfh5Jk6cGBMnTjzo+gAAAHq7nB7DCAAAwKEjMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEaADKivTUWqrjEiIlJ1jVFfm8pwRQAAbQmMAD2svjYVS25cE6m6poiISNU1xZIb1wiNAEDWERgBetiGlZtj55u1aW0736yNDSs3Z6gisom7zwBkE4ERoIfVVO9Kbn9jd488f9XSTfH8A69G1dJNPfJ8dJy7zwBkG4ERoIeVj+yf3H5Mvx55/qrlm+KFh16LquUCY7Zx9xmAbCMwAvSwsVNGxIBhZWltA4aVxdgpIzJUEdki03efAeCDBEaAHlZSVhSV8ydEUWlBREQUlRZE5fwJUVJWlOHKyLRM330GgA8SGAEyoKSsKIpKCyMioqi0UFgkItx9BiD7CIwAkCXcfc4dJo8C8kVhpgsAAN7Xcvc5Vdfk7nMWq1q+KfZur48jBpVExfRRmS4H4JBxhxEAAIBEAiMAAACJdEmFLFZfm4pUXWNERKTqGqO+NqV7GsBfqVq6KRrqGqO4tFDXUIBDwB1GyFL1talYcuOaSNU1RUREqq4plty4JuprUxmuDCB7VC3fFC889FpULTf5DMChIDBCltqwcnPsfLM2rW3nm7WxYeXmDFUEAEC+ERghS9VU70puf2N3D1cCAEC+EhghS5WP7J/cfky/Hq4EAIB8JTBClho7ZUQMGFaW1jZgWFmMnTIiQxUBAJBvBEbIUiVlRVE5f0IUlRZERERRaUFUzp9gllQAAHqMZTUgi5WUFUVRaWGk6pqiqLRQWCRv5eLSCblYMwB8kMAIQNarWr4p9m6vjyMGleRM+MrFmgHgg3RJBQAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkKsx0AQDdpWrppmioa4zi0sKomD4q0+UAAOQ8gRHoNaqWb4q92+vjiEElAiMAQDfQJRUAAIBEAiMAAACJdEkFoEcYYwoAuUdgBAhhpicYY5r9/B4A8EECI/RiLv46TpgBvwcAtCUwQi/m4g8AgK4w6Q0AkHfqa1ORqmuMiIhUXWPU16YyXBFAdhIYAYC8Ul+biiU3rolUXVNERKTqmmLJjWuERoAEAiMAkFc2rNwcO9+sTWvb+WZtbFi5OUMVAWQvgREAyCs11buS29/Y3cOVAGQ/gZGcYswJAF1VPrJ/cvsx/Xq4EoDsJzCSM4w5IVtVLd0Uzz/walQt3ZTpUoAOGDtlRAwYVpbWNmBYWYydMiJDFQFkL4GRnGHMCdmqavmmeOGh16JqucAIuaCkrCgq50+IotKCiIgoKi2IyvkToqSsKMOVAWQfgZGcYcwJAN2lpKwoikrfW466qLRQWARoh8BIzjDmBAAAepbASM4w5gQAAHqWwEjOMOYEAIBMyddJ7gozXQAcjJYxJ6m6JmNOAADoMVXLN8Xe7fVxxKCSqJg+KtPl9Bh3GAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASWYcRAIBepWrppmioa4zi0sK8Wi8PDgWBEQCAXiVfF1iHQ0GXVAAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASFWa6gA/au3dv3HvvvbFu3bpYv3597N69O+bOnRvTpk074LHPP/98rFixIl588cV4++23Y9CgQfHJT34yvvSlL8XgwYPT9v3yl78ca9eubfMYp556atx+++3d9XIAAAByVtYFxp07d8aiRYti6NChcdxxx8ULL7zQ4WO///3vx65du+LMM8+MESNGxJYtW+Khhx6KNWvWxF133RXl5eVp+x911FHxj//4j2ltH9yH3qVq6aZoqGuM4tLCqJg+KtPlAABAVsu6wFheXh6LFy+O8vLyeOWVV+Lqq6/u8LH//M//HCeeeGL06fN+T9tTTz01vvzlL8dDDz0UV111Vdr+ffv2jalTp3Zb7WS/quWbYu/2+jhiUInACAAAB5B1YxiLi4s7fZdv/PjxaWGxpa1///5RXV2deExjY2Ps3bu3U88HAADQm2XdHcbutnfv3qirq4sBAwa02bZ58+Y4++yzI5VKxaBBg+Lcc8+NK664IgoLe/1pAQAgixg2Q7bq9cno5z//eaRSqZgyZUpa+4c//OE46aSTYvTo0fHuu+/GqlWr4u67747NmzfHTTfd1KXn3LZtW9TU1CRua+9OJwAA+cuwGbJVrw6Ma9eujUWLFsXkyZPj5JNPTtv21a9+Ne3ns88+O/71X/81HnnkkbjooovihBNO6PTzLlmyJBYtWtTp4wEAALJBrw2M1dXV8fWvfz1Gjx4dc+bM6dAxF198cTzyyCPx29/+tkuBsbKyMk4//fR267rllls6/dgAALmiYtqo1m6WQG7qlb+9b731VsyePTvKysritttuiyOOOKJDxw0ZMiQiInbv3t2l5x88eHCbdR8BAPKNrpWQ+3pdYNy5c2fMnj07UqlUfPvb3z6o4LZly5aIiBg4cOAhqg6AXGISCgDyXc4Gxm3btkVtbW0cffTRrbOa1tXVxQ033BDbtm2LBQsWxIgRIxKPra2tjaKioiguLm5ta25ujrvvvjsiIk455ZRD/wIAyHomoeBQ8EUEkEuyMjA++OCDsWfPntaZRp999tn485//HBERF1xwQfTt2zcWLlwYjz76aNx3330xbNiwiIi4+eabY/369XHOOedEdXV12oykpaWlMXHixIiI2LhxY9x0003xuc99Lo4++uior6+P//7v/46qqqqYMWNGjB07todfMQCQL3wRAeSSrAyM9913X2zdurX159WrV8fq1asjImLq1KnRt2/fxONee+21iIhYtmxZLFu2LG3bhz70odbAOHTo0PjEJz4Rq1evju3bt0efPn1i5MiRMXv27KisrDwULwkAgBxgoh5Il5W/Cffff/8B95k3b17MmzfvoI+LeG8Nxq6utQgAQO/jri+k65PpAgAAAMhOAiMAAACJBEYAAAASCYxAt6qvTUWqrjEiIlJ1jVFfm8pwRQAAdJbACHSb+tpULLlxTaTqmiIiIlXXFEtuXCM0AgDkKIER6DYbVm6OnW/WprXtfLM2NqzcnKGKAADoiqxcVgPITTXVu5Lb39jdw5XAe5K6SJeUFWW4KqAjrIcI2cEdRqDblI/sn9x+TL8ergR0kYZcVzF9VJx84RjrIkKGCYxAtxk7ZUQMGFaW1jZgWFmMnTIiQxWRz3SRBoCuExiBblNSVhSV8ydEUWlBREQUlRZE5fwJugCSEbpIA0DXCYxAtyopK4qiv4w3KSotFBbJGF2kAaDrBEYAeiVdpAGg6wRGAHolXaQBoOsERgB6LV2kAaBrLGwDAJAjqpZual2b0HITQE8QGAEAckTV8k2xd3t9HDGoRGCklS8SOJQERgAAyGG+SOBQMoYRAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBESCP1NemIlXXGBERqbrGqK9NZbgiACCbCYwAeaK+NhVLblwTqbqmiIhI1TXFkhvXCI0AQLsERoA8sWHl5tj5Zm1a2843a2PDys0ZqggAyHaFmS4AIF9VTBsVDXWNUVzaMx/FNdW7ktvf2N0jzw8A5B6BESBDKqaP6tHnKx/ZP/7wqzfbth/Tr0frAAByh8AIkCfGThkRG1b9Ka1b6oBhZTF2yogMVkWSnr77zMFJmjyqpKwow1UBHBrGMALkiZKyoqicPyGKSgsiIqKotCAq509woZuFKqaPipMvHNPjd6E5MJNHAflGYATIIyVlRVH0l7tWRaWFwiIcJJNHAflGXxcAIKOqlm5q7YKb7XdVTR4F5BuBkU7LpT/wAGSvquWbYu/2+jhiUMlB/T3JxFhCk0cB+UaXVDqtavmmeOGh16Jq+aZMlwJAnsnUWMKxU0bEgGFlaW0mjwJ6M4ERAMg5mRpLaPIoyLyqpZvi+Qdejaqlblr0BF1SAYCck8mxhC2TR6XqmkweBRnQ2W7sdI47jABAzikf2T+53VhCgG4lMAIAOcdYQoCeoUsqZLmKaaNaZ6MF4D0tYwnv/fJTf+kaaiwhmWcGeXojV6CQ5fzBId9lYumErsrFmnORsYRkG2Pr6I10SQUga2Vq6YSuyMWaAaA9AiMAWStTSyd0RS7WDADtERgByFqZXDqhs3KxZgBoj8AIQNbKxaUTcrHm7mAhbYDeSWAEIGvl4tIJuVhzd6havileeOi1qFouMAL0JgIjAFmrZemEotKCiIicWDohF2sGgPYIjABktZalEyIiZ5ZOyMWaASCJwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgUWGmCwDoDvW1qUjVNUZERKquMeprUxZLJy9VLd0UDXWNUVxaGBXTR2W6HABynDuMQM6rr03FkhvXRKquKSIiUnVNseTGNVFfm8pwZdDzqpZvihceei2qlm/KdCkA9AICI5DzNqzcHDvfrE1r2/lmbWxYuTlDFQEA9A66pAKJcqlbW031ruT2N3b3cCUAAL2LO4xAolzq1lY+sn9y+zH9ergS2pM0xhQAyH4CI5Dzxk4ZEQOGlaW1DRhWFmOnjOjQ8cLMoWWMaW7wewBAEoEReql8uvgrKSuKyvkToqi0ICIiikoLonL+hA7NkirMHHrGmGY/vwcAtEdghF4oHy/+SsqKoqj0vWHZRaWFHV5SQ5g59IwxzX5+DwBoj8AIvZCLv44TZg49Y0yzn98DANojMEIv5OKv44SZg1O1dFM8/8CrUbW045MhdXWMKYee3wMA2iMwQi/k4q/jhJmD05nZc7syxpSe4fcAgPYIjNALufjrOGGmZ3R2jCk9w+8BAO0RGKEXcvF3cIQZ8HsAQDKBEXopF389I5+WLwEA8k9hpgsAyFXtLV/ibi7khoppo6KhrjGKS10OAbTHJyRAJ+1v+ZITZ4zOUFVAR1VMH5XpEoA8UbV0U+sXVLn22SMwAnSS5UsAgI6oWr4p9m6vjyMGleRcYDSGEaCTLF8CAPR27jCSc4w5IVuMnTIiNqz6U1q3VMuXAEDvkzTJXb7MV+AOIzmnYvqoOPnCMTl3O5/ex/IlAND7tTfJXb7MjC4wAnSB5UsAoHfb3yR3+UBgBAAAaEe+T3InMAIAALQj3ye5y8pZQ/bu3Rv33ntvrFu3LtavXx+7d++OuXPnxrRp0zp0/O7du+P73/9+rF69Ourr62PcuHExa9asGDt2bJt9n3nmmfjxj38c1dXVMXDgwDjnnHPi8ssvj8LCrDw1AABAD8r3Se6y8g7jzp07Y9GiRVFdXR3HHXfcQR27b9++mDNnTjzxxBNx/vnnxz/90z/FO++8E9ddd11s3pzez/i5556Lr33ta9G3b9+47rrrYuLEiXH33XfHggULuvPlAAAAOSrfJ7nLytto5eXlsXjx4igvL49XXnklrr766g4fu2rVqnjppZdi/vz5ceaZZ0ZExJQpU+Jv//Zv48c//nHceOONrft+73vfi2OPPTbuuOOO1juKRxxxRPzkJz+JCy+8MEaOHNmtrwsAAMg9LZPcpeqa8m6Su07fYbz++utj9erV0dTU1J31REREcXFxlJeXd+rYp59+OgYNGhRnnHFGa9vAgQNj8uTJ8cwzz0RDQ0NERLz++uvx+uuvx4wZM9K6n5533nnR3Nwcq1at6tJrAAAAyHWdvsP461//On7zm9/EwIEDY9q0aTF9+vQYPnx4d9bWKRs3bowxY8ZEnz7pWXjcuHHxyCOPxObNm+PYY4+NjRs3RkS0Gdc4ePDgOOqoo+LVV1/tdA3btm2LmpqaxG3V1dWdflwAAPYvnxdYh0Oh04HxnnvuiUceeSQee+yx+NnPfhb33HNPjB8/PmbMmBFnnHFGFBVl5hdz+/bt8YlPfKJNe8sdy5qamjj22GNbA13Snczy8vJ2A19HLFmyJBYtWtTp4wEAOHjtLbCeT+PNoLt1OjB++MMfjn/8x3+MK6+8Mn71q1/F0qVL43/+539i7dq10a9fvzj77LPj3HPPjY985CPdWO6B1dfXR3FxcZv2lrb6+vqIiNauqe3tu3fv3k7XUFlZGaeffnriturq6rjllls6/dgAACTb3wLrJ84YnaGqILd1edKbgoKCmDhxYkycODG2bdsWy5Yti+XLl8cDDzwQDzzwQJxwwglx7rnnxpQpU6KkpKQ7at6vkpKS1jD411raWmpoCYrt7duVWgcPHhyDBw/u9PEAABy8fF9gHQ6Fbl1WY/DgwfG3f/u3cfXVV0d5eXk0NzfHSy+9FLfddltceOGFcc8998S+ffu68ynbGDRoUGJ30g92Qf3rLqpJ+3Z20h0AADIj3xdYh0Oh25bV2Lx5c/zyl7+Mxx57LHbs2BFFRUUxderU+PznPx8bN26MxYsXx3/+53/GO++8E7Nmzequp21jzJgx8eKLL8a+ffvSJr5Zv359HH744TFixIjW/SIiNmzYEMcff3zrftu2bYu33347KisrD1mNAAB0v3xfYB0OhS7dYayvr4/HHnssrr322rjsssvi3nvvjX79+sWsWbPioYceiq997Wtx8sknxyWXXBI/+clP4uMf/3g89thj3VV7bNu2Laqrq6OxsbG1bdKkSbF9+/ZYvXp1a9uOHTviqaeeitNOO621K+qoUaPimGOOiUceeSRtaZCHH344DjvssJg0aVK31QkAwKGX7wusw6HQ6TuM3/72t+OJJ56I2traKCwsjClTpkRlZWWMHz8+cf/i4uI49dRT46WXXurQ4z/44IOxZ8+e1i6jzz77bPz5z3+OiIgLLrgg+vbtGwsXLoxHH3007rvvvhg2bFhERJx55pnxwAMPxK233hqvv/56DBgwIB5++OHYt29f/MM//EPac8yaNSvmzp0bs2fPjs9+9rPxxz/+MRYvXpyRyXoAAOi6fF5gHQ6FTgfGhx9+OD784Q/HpZdeGtOmTYuBAwce8JiTTjop/v7v/75Dj3/ffffF1q1bW39evXp1613DqVOnRt++fROPKygoiG9961vxve99Lx588MGor6+Pj33sYzF37tw45phj0vY97bTT4pZbbolFixbFggULYsCAAXHppZfGFVdc0aEaAQDyQdXSTdFQ1xjFpYVRMX1UpssBelCnA+O//du/xcknn3xQx1RUVERFRUWH9r3//vsPuM+8efNi3rx5bdr79esXc+bMiTlz5hzwMVpmeAUAIFnV8k2xd3t9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QyxevDiee+65uOuuu6KkpCRt/zFjxsTFF1+c1jZ8+PBD8poAAID3WHc5d2Td/9C6deviySefjGuuuSYuueSSiIg4++yz44orrog777wz7rzzznaPnT9/fpx00klpbWPHjo3/+3//b6xYsSLOPffctG2DBw+OqVOndv+LoFfywQYA0D2su5w7sm4M49NPPx0FBQVRWVnZ2lZSUhLTp0+Pl19+Od566612j/1gWIyIOOOMMyIi4vXXX088JpVKRV1dXdeKJi9UTB8VJ184xgccAAB5I+tulbz66qsxfPjwKCsrS2sfN25cRES89tprMXTo0A4/Xk1NTUREDBw4sM223/3udzF16tRoamqKD33oQzFz5syYOXNm54v/i23btrU+7wdVV1d3+fEBAAB6QtYFxpqamigvL2/T3tK2bdu2g3q8n/3sZ1FQUBCTJk1Kax89enSceOKJMWLEiNi1a1csX748vvvd78a2bdvimmuu6fwLiIglS5bEokWLuvQYAAAAmZZ1gbG+vj6KioratBcXF7du76gVK1bE0qVL45JLLokRI0akbfvmN7+Z9vM555wT119/fdx///1xwQUXxJAhQzpR/XsqKyvj9NNPT9xWXV0dt9xyS6cfGwAAoKdkXWAsKSmJVCrVpr2hoaF1e0f8/ve/j9tuuy1OPfXUuOqqqw64/2GHHRYXXXRR/PrXv461a9d2aTKcwYMHx+DBgzt9PAAAQDbIuklvysvLE8f/tbR1JIi99tprMXfu3Bg9enTMnz8/Cgs7lotb7iru2rXrICoGAADonbIuMB533HHxpz/9KWpra9Pa161b17p9f/73f/83vvKVr8SRRx4Z3/rWt+KII47o8HNv2bIlIpInyAEAAMg3WRcYzzzzzGhqaoolS5a0tjU0NMSyZcvi+OOPb50h9a233moz42hNTU3Mnj07+vTpE7fffnu7wW/Xrl3R1NSU1tbY2Bg//elPo6ioKHF5DgCAXFYxbVScdP5xUTHN8lBAx2XdGMbjjz8+Jk+eHAsXLowdO3bE0UcfHY8++mhs3bo15syZ07rfN77xjVi7dm2sXr26te3666+PLVu2xCWXXBJVVVVRVVXVuu3II4+MU045JSIinn322bj77rtj0qRJMWzYsNi9e3esWLEiNm3aFFdffXXiLK0AALnMOsJAZ2RdYIyImDdvXgwdOjQee+yx2LNnT4wePTpuu+22GD9+/H6Pe+211yIi4p577mmzbfz48a2BcfTo0TFy5MhYsWJF7NixIwoLC2PMmDFx0003xeTJk7v99QAAAOSirAyMJSUlMWvWrJg1a1a7+3znO99p0/bXdxv3Z+zYsW2W1QAAACBd1o1hBAAAIDsIjAAAACTKyi6p9H4V00ZFQ11jFJd6CwIAQLZytU5GmKkNAACyny6pAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIFFhpgsAAADoCRXTRkVDXWMUl4pBHeVMAQAAeaFi+qhMl5BzdEkFAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBEYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQozXUC+qa+vj4iI6urqDFcCAADku5EjR8bhhx/e7naBsYdt3bo1IiJuueWWDFcCAADkux/84AcxduzYdrcf1tzc3NyD9eS9HTt2xK9//esYNmxYFBcXZ7qcqK6ujltuuSW+/vWvx8iRIzNdTq/nfPcc57pnOd89y/nuOc51z3K+e45z3bOy+Xy7w5hlBg4cGFOnTs10GW2MHDlyv98s0L2c757jXPcs57tnOd89x7nuWc53z3Gue1Yunm+T3gAAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJBMY8V15eHldccUWUl5dnupS84Hz3HOe6ZznfPcv57jnOdc9yvnuOc92zcvl8W4cRAACARO4wAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAIAAJBIYAQAACCRwAgAAEAigREAAIBEAiMAAACJCjNdAF3X0NAQd911Vzz++OOxe/fuOPbYY+PKK6+MU0455YDHvv322/Hv//7v8Zvf/Cb27dsXJ510Ulx77bXx4Q9/uM2+v/zlL+Pee++NrVu3xlFHHRUXXnhhXHDBBYfiJWWtzp7rp59+OlauXBmvvPJKbN++PYYMGRITJkyIv//7v49+/fql7XvRRRfF1q1b2zxGZWVlfOUrX+nW15PtOnu+f/SjH8WiRYvatBcXF8cTTzzRpt17+z2dPd/tvWcjIo4++ui45557Wn8+44wzEve7+uqr49JLL+188Tlm7969ce+998a6deti/fr1sXv37pg7d25MmzatQ8fv3r07vv/978fq1aujvr4+xo0bF7NmzYqxY8e22feZZ56JH//4x1FdXR0DBw6Mc845Jy6//PIoLMyPS4CunOvnn38+VqxYES+++GK8/fbbMWjQoPjkJz8ZX/rSl2Lw4MFp+375y1+OtWvXtnmMU089NW6//fbuejlZryvne/ny5XHrrbcmblu8eHGUl5enteX7ezuia+e7vfdsRERBQUE89dRTrT+7NolYv359PProo/HCCy/E1q1bo3///nHCCSfElVdeGSNGjDjg8bn8uZ0/v1G92K233hqrVq2KmTNnxvDhw2P58uVxww03xIIFC+LEE09s97i9e/fGddddF7W1tXHppZdGYWFh3H///XHttdfGj370oxgwYEDrvr/4xS/ijjvuiEmTJsXFF18cL774YixYsCDefffd+Lu/+7ueeJlZobPn+vbbb4/y8vKYOnVqDB06NP7whz/E4sWL47nnnou77rorSkpK0vYfM2ZMXHzxxWltw4cPPySvKZt19ny3mD17dpSWlrb+3KdP204V3tvv6+z5vvbaa6Ouri6tbevWrfHDH/4wMWx+6lOfis9//vNpbWPGjOmeF5Ejdu7cGYsWLYqhQ4fGcccdFy+88EKHj923b1/MmTMn/vCHP8QXv/jFGDBgQDz88MNx3XXXxQ9+8IO0C5fnnnsuvva1r8X48ePjuuuuiz/+8Y9x9913xzvvvBOzZ88+FC8t63TlXH//+9+PXbt2xZlnnhkjRoyILVu2xEMPPRRr1qyJu+66q02AOeqoo+If//Ef09o+uE9v15Xz3eJLX/pSDBs2LK2tb9++aT97b7+nK+f7sssui3PPPTetra6uLu64447Ez+58vzb52c9+FlVVVTF58uQ49thjo6amJhYvXhxXXnll3HnnnTF69Oh2j835z+1mctrLL7/cPHHixOaf/exnrW3vvvtu8xe/+MXmf/qnf9rvsT/96U+bJ06c2Lxu3brWttdff735zDPPbP7P//zPtMc799xzm2+44Ya04+fPn988derU5l27dnXTq8luXTnXv/vd79q0LV++vHnixInNjzzySFr7zJkz25zrfNSV833XXXc1T5w4sfmdd97Z737e2+/ryvlOsmjRouaJEyc2v/jii2ntEydObP63f/u3Lteb6+rr65u3bdvW3Nzc3Lx+/frmiRMnNi9btqxDxz755JPNEydObH7qqada2955553madOmNd90001p+1522WXN/+f//J/mVCrV2rZw4cLmM844o/n111/v+gvJAV051y+88EJzU1NTm7aJEyc2L1y4MK392muvbb788su7p+gc1pXzvWzZsuaJEyc2r1+//oD7em+/pyvnO8ljjz3WPHHixObHH388rd21SXPziy++2NzQ0JDW9sYbbzR/9rOfbZ4/f/5+j831z21jGHPc008/HQUFBVFZWdnaVlJSEtOnT4+XX3453nrrrXaPXbVqVXzsYx+LcePGtbaNHDkyPvnJT6Z1Q/jd734XO3fujC984Qtpx5933nlRV1cXa9as6b4XlMW6cq5POumkNm0tXfNef/31xGNSqVSbuzb5pCvn+6/V1tZGc3Nz4jbv7fd11/lu8cQTT8SwYcOioqIicXt9fX3U19d3qeZcVlxc3Ok7T08//XQMGjQorXvvwIEDY/LkyfHMM89EQ0NDRLz32fL666/HjBkz0roxnXfeedHc3ByrVq3q0mvIFV051+PHj2/TM2H8+PHRv3//qK6uTjymsbEx9u7d26nn6w26cr7/2t69e6OpqSlxm/f2+7rrfLdYsWJFlJaWxmc+85nE7fl8bVJRURFFRUVpbSNGjIiPfOQj7X4etMj1z22BMce9+uqrMXz48CgrK0trbwmBr732WuJx+/btiz/+8Y/xsY99rM22cePGxf/+7/+2/sF79dVXIyLa7Dt27Njo06dPbNy4scuvIxd09ly3p6amJiLe+8D4oN/97ncxderUOPvss+Oiiy6Kn//8550rOod1x/m++OKLY9q0afH5z38+br755ti+fXub54jw3o7o3vf3xo0bo7q6Oj73uc8lbn/00Udj6tSpcdZZZ8Vll10WK1as6HzheWjjxo0xZsyYNkFm3Lhx8e6778bmzZtb94uINuNjBg8eHEcddVTr+5+Ds3fv3qirq0sbttFi8+bNcfbZZ8fnP//5+MIXvhA//OEPo7GxMQNV5rbrrrsuPv/5z8fUqVPjq1/9aut7uoX39qGxY8eO+O1vfxuf+cxn0oZztHBt0lZzc3O88847iZ8Hfy3XP7eNYcxxNTU1id8stbRt27Yt8bhdu3ZFQ0PDAY895phjoqamJgoKCuLII49M26+oqCj69+/fGnx6u86e6/b87Gc/i4KCgpg0aVJa++jRo+PEE0+MESNGxK5du2L58uXx3e9+N7Zt2xbXXHNN519AjunK+e7Xr1+cf/75ccIJJ0RRUVG8+OKLsXjx4li/fn384Ac/aA1F3tvv6873d0sAPOuss9ps+/jHPx6TJ0+OYcOGRU1NTTz00ENx8803R21tbZs7vSTbvn17fOITn2jT3vJ/VVNT0zq+5q/bP7hvPr2/u9PPf/7zSKVSMWXKlLT2D3/4w3HSSSfF6NGj4913341Vq1bF3XffHZs3b46bbropQ9XmlpKSkpg2bVqcdNJJUVZWFhs2bIj7778/Zs2aFT/84Q9j6NChERHe24fIk08+GU1NTYmf3a5Nkq1YsSLefvvt+Id/+If97pfrn9sCY46rr69vc3s84r0uCi3b2zsuIjp0bH19fbuzMhUXF+dNt7LOnuskK1asiKVLl8Yll1zSZmatb37zm2k/n3POOXH99dfH/fffHxdccEEMGTKkE9Xnnq6c75kzZ6b9fOaZZ8a4cePi5ptvjsWLF7fOxum9/b7uen/v27cvVq5cGWPGjImPfOQjbbZ/73vfS/v5nHPOiSuvvDIWLlwY06ZNazMBFG3V19e3/r/8tQ/+X7V0cWpv33zuNtlZa9eujUWLFsXkyZPj5JNPTtv21a9+Ne3ns88+O/71X/81HnnkkbjooovihBNO6MlSc9KUKVPSgvjEiRPj1FNPjWuvvTb+67/+q3U2Tu/tQ+OJJ56IgQMHxqc+9ak221ybtFVdXR3f/va344QTTmgzkdsH5frnti6pOa6kpCRSqVSb9pY3XHsXXy3tHTm2pKSk3S41DQ0NeXOB19lz/UG///3v47bbbotTTz01rrrqqgPuf9hhh8VFF10UTU1N7U5/3Rt11/lucdZZZ8WgQYPi+eefT3sO7+33dNf5Xrt2bbz99tuJ31AnKSoqivPPPz/27NkTGzZs6HjBeaykpKT1/+WvffD/quWCo7198+n93R2qq6vj61//eowePTrmzJnToWNaZpT87W9/eyhL69VOPPHEOP7449M+u723u9+WLVvi5ZdfjilTpnRo6YZ8vTZpUVNTE3PmzImysrK4+eabo6CgYL/75/rntsCY49q7Pd3S9sF1olr0798/iouLO3RseXl5NDU1xTvvvJO2XyqVil27duXNlOGdPdd/7bXXXou5c+fG6NGjY/78+R1eT6flm7tdu3YdRMW5rTvO9wcNGTIk7Rx6b7+vu873ihUrok+fPu2OX0ySj+/vrhg0aNB+/69a3rd/3dUpad98en931VtvvRWzZ8+OsrKyuO222+KII47o0HEt7+3du3cfyvJ6vaTP7gjv7e60v6EE7cnXz+49e/bEDTfcEHv27Inbb7+9Q38fc/1zW2DMcccdd1z86U9/itra2rT2devWtW5P0qdPnxg9enS88sorbbatW7cuPvzhD7f+QWxZH+2D+77yyiuxb9++vFk/rbPnusX//u//xle+8pU48sgj41vf+laHLzgi3vvmLyJ5gpzeqqvn+4Oam5tj69ataefQe/t93XG+Gxoa4umnn47x48cfVKDPx/d3V4wZMyZeffXV2LdvX1r7+vXr4/DDD2/t5t7y/v3gndtt27bF22+/nVfv767YuXNnzJ49O1KpVIcvDlt4b3ePLVu2JH52e293nyeeeCKOPvrog+o6nY/v7/r6+taJmL75zW8mDr1Ikuuf2wJjjjvzzDOjqakplixZ0trW0NAQy5Yti+OPP751gPhbb73VZsrfSZMmxSuvvJJ2sfzGG2/ECy+8EGeeeWZr2yc/+cno379//OIXv0g7/he/+EUcfvjhMWHChEPwyrJPV851TU1NzJ49O/r06RO33357ux+uu3btajONeGNjY/z0pz+NoqKixOU5equunO8dO3a0ebyHH344duzYEZ/+9Kdb27y339eV893iueeeiz179rT7DXXS/8vevXvjgQceiAEDBrSZFY73LhKqq6vTuk5PmjQptm/fHqtXr25t27FjRzz11FNx2mmntXZpGjVqVBxzzDHxyCOPpH2uPPzww3HYYYe1mXAr3yWd67q6urjhhhti27Zt8a1vfavNmPMWtbW1bbqQNTc3x9133x0RkbgIer5LOt9JnxFr1qyJDRs2xKmnntra5r198JLOd4sDzWzt2uQ9TU1N8f/9f/9fvPzyy3HTTTfFxz/+8cT9euPntklvctzxxx8fkydPjoULF8aOHTvi6KOPjkcffTS2bt2aNsbiG9/4RqxduzbtjXreeefFL3/5y5gzZ0588YtfjIKCgrj//vvjyCOPjC9+8Yut+5WUlMSXvvSl+Pa3vx033nhjnHrqqfH73/8+Hn/88bjqqquif//+PfqaM6Ur5/r666+PLVu2xCWXXBJVVVVRVVXVuu3II49svZh49tln4+67745JkybFsGHDYvfu3bFixYrYtGlTXH311XnVzaYr53vmzJkxZcqUGD16dBQXF0dVVVU8+eSTMWbMmDbrDHpvv6cr57vFihUrori4uN0/aA899FA888wzcdppp8XQoUOjpqYmli1bFm+99VZ87WtfS5x0pzd78MEHY8+ePa1dj5599tn485//HBERF1xwQfTt2zcWLlwYjz76aNx3330xbNiwiHgv3D/wwANx6623xuuvvx4DBgyIhx9+OPbt29dmpr5Zs2bF3LlzY/bs2fHZz342/vjHP8bixYvj3HPP7fA3471BZ8/1zTffHOvXr49zzjknqqur074sKS0tjYkTJ0bEexfcN910U3zuc5+Lo48+Ourr6+O///u/o6qqKmbMmJF3X4Z09nxfc8018dGPfjTGjh0bZWVlsXHjxli2bFkMGTIkLrvssrTn8N5+X2fPd4sDdUd1bfKe//iP/4hnn302TjvttNi9e3c8/vjjadunTp0aEdErP7cFxl5g3rx5MXTo0Hjsscdiz549MXr06Ljtttti/Pjx+z3uiCOOiAULFsS///u/x9133x379u2Lk046Kf7lX/6lzR2w8847LwoLC+O+++6LZ599NoYMGRL/8i//0mY2yt6us+e6ZQ27e+65p8228ePHtwbG0aNHx8iRI2PFihWxY8eOKCwsjDFjxsRNN90UkydP7vbXk+06e77POuuseOmll+Lpp5+OhoaGGDp0aFxyySVx+eWXx+GHH562r/f2+zp7viPeu8OyZs2a+Ju/+Zvo27dv4j4VFRXx0ksvxS9/+cvYtWtXHH744TFu3LiYM2dOmxkn88F9990XW7dubf159erVrUF86tSp7Z7HgoKC+Na3vhXf+9734sEHH4z6+vr42Mc+FnPnzo1jjjkmbd/TTjstbrnllli0aFEsWLAgBgwYEJdeemlcccUVh+x1ZaPOnuuWz+5ly5bFsmXL0rZ96EMfag2MQ4cOjU984hOxevXq2L59e/Tp0ydGjhwZs2fPTvuSKl909nxPmTIlnnvuufjNb34T7777bpSXl8eMGTPiiiuuiEGDBqXt6739vs6e74j3Z7b+6Ec/2ubzo4Vrk/e0fB786le/il/96ldttrcExiS5/rl9WHNzc3PGnh0AAICsZQwjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAIJHACAAAQCKBEQAAgEQCIwAAAIkERgAAABIJjAAAACQSGAEAAEgkMAJAFmtubo7rr78+zjjjjHjyySc7vA0AuoPACABZ7LDDDou5c+fGkUceGXfccUds3bq1ddvPf/7z+J//+Z+YNm1afPazn81glQD0VgIjAGS5QYMGxbx586K2tjbmz58fTU1N8eqrr8Z//ud/xvDhw+O6667LdIkA9FKHNTc3N2e6CADgwL773e/Gz3/+8/jiF78Yv/rVr2LLli1x5513xtixYzNdGgC9lMAIADmioaEhrrnmmnj11VcjIuKf/umf4m//9m8zXBUAvZkuqQCQI4qLi+PTn/5067/PPffcDFcEQG8nMAJAjli3bl3cc889MWDAgGhoaIg77rgj0yUB0MsJjACQA/bu3Rvz58+PgoKCWLBgQUyaNCmeeuqpWLp0aaZLA6AXExgBIAf827/9W2zZsiVmzZoVo0ePjhtuuCGGDBkS3/nOd2Lz5s2ZLg+AXkpgBIAs9/jjj8fjjz8ep512Wpx//vkREdGvX7/4+te/HvX19TF//vxobGzMcJUA9EYCIwBksS1btsS3v/3tKC8vj69+9atp28aPHx9/93d/Fxs2bIiFCxdmqEIAejPLagAAAJDIHUYAAAASCYwAAAAkEhgBAABIJDACAACQSGAEAAAgkcAIAABAIoERAACARAIjAAAAiQRGAAAAEgmMAAAAJBIYAQAASCQwAgAAkEhgBAAAINH/D8/jVf7FcrRfAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ea99fa",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eae7bf98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:45.984682Z",
     "iopub.status.busy": "2022-09-28T12:10:45.983993Z",
     "iopub.status.idle": "2022-09-28T12:10:47.213385Z",
     "shell.execute_reply": "2022-09-28T12:10:47.212410Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=658073;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=703566;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=932290;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=515576;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.7 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(-2 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.7 +/- 0.8) x 10^-1   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b     (-2 +/- 7) x 10^-2  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140013846382576\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>23.979167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.979167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          23.979167\n",
       "total         23.979167"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>52.213652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>55.782379</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             52.213652\n",
       "BIC             55.782379"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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q6SkRJ06ddLAgQN19913KyMj45T1I/l9O3Z+o6LYk08+qXXr1mnSpEnq2bOn8vPz9eijj2ru3LkaNGhQo/Vqamr00EMPyeFw6LbbbpPVatXixYv1wAMP6M9//rOSk5P957799tt69tlnNXLkSN1000366quvNHfuXB09elQ/+clP2uJphoXmXutnnnlGKSkpGjNmjNLS0vTNN99o6dKl+uSTT/TKK6/IbrcHnJ+VlaWbbropoKxnz55n5DmFs+Ze73pTp05VYmKi/3Z8fPCgCl7bxzX3ej/wwANyOp0BZSUlJXr55ZeNYfPiiy/WNddcE1CWlZXVOk8iQlRUVGj+/PlKS0tTv379tHnz5ibXraur07Rp0/TNN9/o5ptvVnJyspYtW6aHHnpIL730UsAHl08++USPPfaYBg8erIceekjffvutFixYoCNHjmjq1Kln4qmFnZZc6xdffFGVlZUaNWqUMjIytH//fi1ZskSbNm3SK6+8EhRgzjrrLP3sZz8LKGt4TrRryfWud9dddyk9PT2grEOHDgG3eW0f05Lrffvtt+vaa68NKHM6nXr22WeN792x/tnktddeU0FBgUaPHq2+ffuqrKxMS5cu1d13360XXnhBmZmZjdaN+PdtHyLa1q1bfSNGjPC99tpr/rKjR4/6br75Zt/Pf/7zk9Z99dVXfSNGjPBt27bNX7Znzx7fqFGjfH/6058C7u/aa6/1PfroowH1Z82a5RszZoyvsrKylZ5NeGvJtf7iiy+CyvLz830jRozwvfPOOwHlkyZNCrrWsagl1/uVV17xjRgxwnfkyJGTnsdr+7iWXG+T+fPn+0aMGOH76quvAspHjBjh++1vf9vi9kY6l8vlKy0t9fl8Pt/27dt9I0aM8K1cubJJdT/44APfiBEjfB9++KG/7MiRI76xY8f6Hn/88YBzb7/9dt+//du/+dxut79s3rx5vssvv9y3Z8+elj+RCNCSa71582af1+sNKhsxYoRv3rx5AeUPPPCA74477midRkewllzvlStX+kaMGOHbvn37Kc/ltX1MS663yXvvvecbMWKEb/Xq1QHlfDbx+b766itfbW1tQNnevXt9V1xxhW/WrFknrRvp79vMYYxw69evl8ViUV5enr/Mbrdr/Pjx2rp1qw4ePNho3XXr1um8885T//79/WW9e/fWhRdeGDAM4YsvvlBF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evTocVpDp2Px9e1yufwLMf361782Tr0wifT3bQJjhBs1apS8Xq+WL1/uL6utrdXKlSs1YMAA/wTxgwcPBi35O3LkSO3YsSPgw/LevXu1efNmjRo1yl924YUXqlOnTnr77bcD6r/99ttq166dhg8ffgaeWfhpybUuKyvT1KlTFR8fr2eeeabRN9fKysqgZcQ9Ho9effVV2Ww24/Yc0aol17u8vDzo/pYtW6by8nJdcskl/jJe28e15HrX++STT1RdXd3oN9Smn0tNTY3efPNNJScnB60Kh2MfEoqLiwOGTo8cOVKHDx/Whg0b/GXl5eX68MMPdemll/qHNPXp00e9evXSO++8E/C+smzZMsXFxQUtuBXrTNfa6XTq0UcfVWlpqZ5++umgOef1HA5H0BAyn8+nBQsWSJJxE/RYZ7repveITZs2qbCwUMOGDfOX8do+fabrXe9UK1vz2eQYr9er//7v/9bWrVv1+OOP6/zzzzeeF43v2yx6E+EGDBig0aNHa968eSovL1ePHj20atUqlZSUBMyxeOKJJ7Rly5aAF+r111+vd999V9OmTdPNN98si8WixYsXq0uXLrr55pv959ntdt1111167rnnNHPmTA0bNkxffvmlVq9erXvuuUedOnVq0+ccKi251o888oj279+vW265RQUFBSooKPAf69Kli//DxMaNG7VgwQKNHDlS6enpqqqq0po1a1RUVKR77703pobZtOR6T5o0Sbm5ucrMzFRCQoIKCgr0wQcfKCsrK2ifQV7bx7Tketdbs2aNEhISGv2DtmTJEn300Ue69NJLlZaWprKyMq1cuVIHDx7UY489Zlx0J5q99dZbqq6u9g892rhxo77//ntJ0sSJE9WhQwfNmzdPq1at0qJFi5Seni7pWLh/88039eSTT2rPnj1KTk7WsmXLVFdXF7RS35QpUzR9+nRNnTpVV1xxhb799lstXbpU1157bZO/GY8Gzb3Ws2fP1vbt2zVu3DgVFxcHfFmSmJioESNGSDr2gfvxxx/XlVdeqR49esjlcunvf/+7CgoKNGHChJj7MqS51/u+++7Tueeeq+zsbCUlJWnnzp1auXKlunXrpttvvz3gMXhtH9fc613vVMNR+WxyzB//+Edt3LhRl156qaqqqrR69eqA42PGjJGkqHzfJjBGgRkzZigtLU3vvfeeqqurlZmZqaeeekqDBw8+ab327dtr7ty5+sMf/qAFCxaorq5OQ4YM0f333x/UA3b99dfLarVq0aJF2rhxo7p166b7778/aDXKaNfca12/h93rr78edGzw4MH+wJiZmanevXtrzZo1Ki8vl9VqVVZWlh5//HGNHj261Z9PuGvu9b7qqqv09ddfa/369aqtrVVaWppuueUW3XHHHWrXrl3Auby2j2vu9ZaO9bBs2rRJP/rRj9ShQwfjOTk5Ofr666/17rvvqrKyUu3atVP//v01bdq0oBUnY8GiRYtUUlLiv71hwwZ/EB8zZkyj19Fisejpp5/W888/r7feeksul0vnnXeepk+frl69egWce+mll2rOnDmaP3++5s6dq+TkZN1222268847z9jzCkfNvdb1790rV67UypUrA46dffbZ/sCYlpamCy64QBs2bNDhw4cVHx+v3r17a+rUqQFfUsWK5l7v3NxcffLJJ/rnP/+po0ePKiUlRRMmTNCdd96prl27BpzLa/u45l5v6fjK1ueee27Q+0c9PpscU/9+8PHHH+vjjz8OOl4fGE0i/X07zufz+UL26AAAAACAsMUcRgAAAACAEYERAAAAAGBEYAQAAAAAGBEYAQAAAABGBEYAAAAAgBGBEQAAAABgRGAEAAAAABgRGAEAAAAARgRGAAAAAIARgREAAAAAYERgBAAAAAAYERgBAAAAAEYERgAAwpjP59Mjjzyiyy+/XB988EGTjwEA0BoIjAAAhLG4uDhNnz5dXbp00bPPPquSkhL/sTfeeEP/+Mc/NHbsWF1xxRUhbCUAIFoRGAEACHNdu3bVjBkz5HA4NGvWLHm9Xu3atUt/+tOf1LNnTz300EOhbiIAIErF+Xw+X6gbAQAATu33v/+93njjDd188836+OOPtX//fr3wwgvKzs4OddMAAFGKwAgAQISora3Vfffdp127dkmSfv7zn+vWW28NcasAANGMIakAAESIhIQEXXLJJf5/X3vttSFuEQAg2hEYAQCIENu2bdPrr7+u5ORk1dbW6tlnnw11kwAAUY7ACABABKipqdGsWbNksVg0d+5cjRw5Uh9++KFWrFgR6qYBAKIYgREAgAjw29/+Vvv379eUKVOUmZmpRx99VN26ddPvfvc77du3L9TNAwBEKQIjAABhbvXq1Vq9erUuvfRS3XDDDZKkjh076le/+pVcLpdmzZolj8cT4lYCAKIRgREAgDC2f/9+Pffcc0pJSdEvf/nLgGODBw/WT37yExUWFmrevHkhaiEAIJqxrQYAAAAAwIgeRgAAAACAEYERAAAAAGBEYAQAAAAAGBEYAQAAAABGBEYAAAAAgBGBEQAAAABgRGAEAAAAABgRGAEAAAAARgRGAAAAAIARgREAAAAAYERgBAAAAAAYERgBAAAAAEYERgAAAACA0f8PfNQKt3dwz6cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49008edd",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "15a0800c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:47.217160Z",
     "iopub.status.busy": "2022-09-28T12:10:47.216736Z",
     "iopub.status.idle": "2022-09-28T12:10:47.224969Z",
     "shell.execute_reply": "2022-09-28T12:10:47.224251Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90d8bc80",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5026bb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:10:47.228512Z",
     "iopub.status.busy": "2022-09-28T12:10:47.228121Z",
     "iopub.status.idle": "2022-09-28T12:12:01.676435Z",
     "shell.execute_reply": "2022-09-28T12:12:01.675419Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "79f90627d85c4280939be4bf144156ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88b8ae37",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1cb26419",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:01.681058Z",
     "iopub.status.busy": "2022-09-28T12:12:01.680761Z",
     "iopub.status.idle": "2022-09-28T12:12:01.686714Z",
     "shell.execute_reply": "2022-09-28T12:12:01.685861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.491), ('data', 0.491)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b198e0da",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4bc4e257",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:01.692299Z",
     "iopub.status.busy": "2022-09-28T12:12:01.691565Z",
     "iopub.status.idle": "2022-09-28T12:12:02.928880Z",
     "shell.execute_reply": "2022-09-28T12:12:02.928140Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:12:01 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:12:01\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=34124;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=539000;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=255856;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=675175;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=816514;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=672709;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=686018;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=859946;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=689830;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=250171;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=109732;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=908231;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=802490;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=167508;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=766788;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=909304;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=240415;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=741474;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:12:02 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:12:02\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=752538;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=91434;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=954584;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=982049;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=987206;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=662033;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b79a65b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:02.932647Z",
     "iopub.status.busy": "2022-09-28T12:12:02.931996Z",
     "iopub.status.idle": "2022-09-28T12:12:03.556984Z",
     "shell.execute_reply": "2022-09-28T12:12:03.556155Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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DBmiiRMnKi8vT3V1dbrhhhs0Y8YMXXDBBZKk7777TpI0efJkXXHFFZKkjRs36o477tCbb77ZZPw77rhD1157rU477bSGkLh8+XKdc845uuWWW3TfffdpxIgR+uc//6nFixe3uO5FixbplVde0XfffSeHw6G//e1vkiSHw6EHH3xQXbt2lWmamjNnjv72t7/pmmuu0fr16/XHP/5Rzz//vI466igdPnxY0pEwLkmHDh3S9OnTNWLECF133XWSpLlz52rw4MG66aabVF5erilTpqhPnz4NdXz66ad69dVX1b17d23fvl0PPPCAFi9erLy8PD3++OP69a9/rb/85S/Nfj9fffWV7r33Xs2ZM0fPPfecHn74YS1atEjbt2/XwoUL9corr+ioo47S//zP/7T4ZxQvBFEAAAAgyWSnd7B1/LS0NC1cuFBffvmlPvroI61evVpPPPGEXn75Zfn9fvl8voYQKkndunWTJG3ZskVPPPGEKioq5HA49PXXX6umpkaZmZkNfaurq7Vu3Trt37+/0bOvv/5aX331lRwOh0aMGCFJOuOMM5Sfn9/i7+uHW3Nffvll3XTTTVq8eLFM01RxcbFWrVqlQCCgysrKhpXalStXavLkyTrqqKMkSVlZWQ3j1dbWaurUqSoqKtKUKVMann/wwQe6/fbbJUk9evTQmDFjGtVx5plnqnv37pKk9evXa9SoUcrLy5N0ZPX4j3/8Y4tWeo877jidfPLJkqQhQ4boqaeeaph/9OjRDTVPnTpVf/rTn1r8c4oHgigAAACQZCJtm42nvn37qm/fvvrpT3+qq666Su+++67OOOOMkH39fr9mzJihv/71rzrppJPk9Xo1dOhQ+f3+RkHUNE1J0osvvqiMjIxGY2zbtq3JuG19L3X8+PGaPXu2vvvuO73//vtav369/va3vyknJ0fPPPOMPvjgg2bHSE9P19ChQ/Xuu+9qwoQJ6tAhdID/vzXWb/ltrq/D4Wh0AJTP52vU94c/n7S0tLDhNRHf3W1/b8W2c0sXrLa7BAAAACS5srIybdiwoeHr77//Xrt371Z+fr6OP/54ZWZm6vXXX29o/+677+T3+1VbW6tjjjlGkvTss8+GHNvlcmn48OF68sknG823d+9e9enTR4FAoCEkrl27Vt98802bvod169apa9eu6tKliw4dOqQuXbooJydHXq9Xr7zy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gHaGba2Jy1ftb1EIbU79PaYAACQqS1dEKysrtWbNGo0dO9bKYQEAFkrlba2p5Ok9c5TpcoZsi/YeUwAA7GZpEC0rK9P9999PEAUAIEqZLmfYu0qT/R5TAABaFUTLysoitu/fvz+qYgAAAAAAqa9VQfSSSy6JePCBaZocjAAAAAAAiKhVQbRjx4666qqrNHjw4JDtO3fu1Jw5cywoCwAAAACQqloVRPv166fKykodf/zxIdsDgYBM07SkMAAAWuuLQwe0vnyXagOBiP28tX4Vb98Qtr2Dw6HhPfJV2CnX6hIBAIBaGUSnTJmimpqasO15eXm64447oi4KAIC2WF++SxW+w832M2Wqqi7C9SZ1R8YiiAIAEButCqKjR0c+8r9jx44aN25cVAUBANBW9SuhhqTs9NBXnxxpN+QK015d55f5g7EAAID1LL2+BQCARJCd7tS0fkPDts/ftCpse/H2DZFXSwEAQNTS7C4AANC+rCkrtbsEAABgs6iD6JgxY7Rr1y4ragEAtANrynbaXQIAALBZ1FtzOSUXAICmaqrCb+81g6Zqqnyt+kw85q+Xke3kXnAAQEzxjigAADFwRa85EdundpmdsPMPGFGgeSunE0YBADHDO6IAAFgkI9upASMKoh5nwIgCZWSHP/U31vNvW1sqXzUHNgEAYocVUQAALGIYhuatnN5siJsxaL4Wbp4Vtr2tW2Ojnb+myt/sSioAAFYgiAIAYCHDMJTpyojcJ635Psk6PwAALcHWXAAAAABAXBFEAQAAAABxFXUQveyyy9SpUycragEAIClMnDHa7hIAAEhqUb8jeu2111pRBwAASWPiTIIoAADRiOnWXNM0tWvXLpWVlcVyGgAAAABAErEkiK5atUr33nuvKisrG57961//0rRp0/Tf//3fuvTSSzVnzhwFAgErpouriooKzZo1S+edd54uv/xybdiwwe6SAABo15YuWG13CQCAKFkSRJcsWaIdO3aoY8eODc8effRRlZaWasiQIerbt69WrlypZcuWWTFdXD300EPq1q2bXnvtNV1//fW68847dejQIbvLAgCg3Vq6kCAKAMnOkiBaWlqqE044oeHr6upqrVu3TmeffbYeeugh/elPf1Lv3r2TLohWV1fr/fff15VXXqnMzEydccYZ6tOnj/75z3/aXRoAAAAAJK2oDyuSpEOHDqlbt24N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dtKkSTp06JDuv/9+SWpyeFJzBg8e3FBvJE6nU3PnztWIESP04osvauHChQ1tAwcO1MCBA7VixYomhydJR1Z1N27cGHJct9utzMxMvf3221q2bJnS0tI0duzYiLVs3bq1Ue0AgOTB1lwAQMqLdH2LJF1++eVNrldpqVtvvVW7du3S448/rrfeeksnnniicnJyVF5erm3btmn37t165ZVXWrQ62bFjR02fPl0PPPCAioqKdPbZZ8vlcumDDz6Q0+lU9+7dw64QnnfeeXriiSe0f/9+9e/fP+S9m5GcccYZ+uMf/6iPP/642S29HTp00D333KPf/e53+sc//iHTNHXTTTdJkn73u9/p5ptv1l133aWXXnpJP/rRj5SRkaF9+/bps88+0/fffy+Px9NkTJfLpTPPPFNvvfWWKioqNHz4cOXl5YWtwTRNbdiwQb179250wjAAIDkQRAEAKa/++pZwLr744jYH0U6dOumxxx7T4sWL9e6778rj8SgYDKpbt24qLCzUz3/+85CHDIUzceJEdezYUc8++6zefPNNuVwujRw5Utddd50uvvhi9erVK+TnXC6XRo0apbfffrvVq6GS1LNnTw0bNkwrV67UzJkzm73GpT6M3nnnnXrppZdkmqZmzpypY445RosWLdILL7yg999/X8uXL1daWppyc3N18skna8yYMWHHnDBhgt566y1J0vjx4yPO///+3/9TWVmZZsyY0ervFQBgP8MMtY8IAAAklN27d+uyyy7TWWedpbvuuitkn5///Ofau3evFi9eHPbk30g2bNigW265Rb/5zW903nnnRVtyTN1zzz1av369nnvuubDXuwAAEhfviAIAkEAqKyubXKPi8/kaDgYaNWpUyM998MEH+vrrr+V2u9sUQiVp6NChGj58uJ555plG19Qkml27dundd9/Vz372M0IoACQptuYCAJBANm7cqN///vcaNmyYjjrqKH3//ff65JNPtHfvXp1yyik6++yzG/V/9dVXtW/fPr3++utyOp26/PLLo5r/pptu0jvvvKPy8vKI72jaad++fZo2bZouvPBCu0sBALQRW3MBAEggu3bt0qJFi/TZZ5+poqJCktSrVy+dffbZ+ulPf9rkXdZLLrlE5eXlys/P13XXXacRI0bYUDUAAK1DEAUAAAAAxBXviAIAAAAA4oogCgAAAACIK4IoAAAAACCuCKIAAAAAgLgiiAIAAAAA4oogCgAAAACIK4IoAAAAACCuCKIAAAAAgLgiiAIAAAAA4ur/A/uPAa2YhKkMAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f50ad53",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "96443689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.561181Z",
     "iopub.status.busy": "2022-09-28T12:12:03.560435Z",
     "iopub.status.idle": "2022-09-28T12:12:03.568480Z",
     "shell.execute_reply": "2022-09-28T12:12:03.567712Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "02a9235f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.572116Z",
     "iopub.status.busy": "2022-09-28T12:12:03.571375Z",
     "iopub.status.idle": "2022-09-28T12:12:03.575210Z",
     "shell.execute_reply": "2022-09-28T12:12:03.574477Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1ffcbab5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.578458Z",
     "iopub.status.busy": "2022-09-28T12:12:03.578048Z",
     "iopub.status.idle": "2022-09-28T12:12:03.701609Z",
     "shell.execute_reply": "2022-09-28T12:12:03.700851Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:12:03 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:12:03\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=270198;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=200758;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(4.9 -0.5 +0.6) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.53 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (4.9 -0.5 +0.6) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.53 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140013786709632\">\n",
       "<tr><td>1.00</td><td>0.27</td></tr>\n",
       "<tr><td>0.27</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.27\n",
       "0.27 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>201.752539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>201.752539</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         201.752539\n",
       "total        201.752539"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>407.760397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>411.329124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            407.760397\n",
       "BIC            411.329124"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5039a6f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.705486Z",
     "iopub.status.busy": "2022-09-28T12:12:03.704784Z",
     "iopub.status.idle": "2022-09-28T12:12:03.851035Z",
     "shell.execute_reply": "2022-09-28T12:12:03.850311Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=913768;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=310964;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>(9.4 -1.9 +2.4) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.08 +/- 0.18</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(3.1 -1.0 +1.4) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                               result  \\\n",
       "parameter                                                               \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      (9.4 -1.9 +2.4) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index           -1.08 +/- 0.18   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc      (3.1 -1.0 +1.4) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140013715050064\">\n",
       "<tr><td>1.00</td><td>0.79</td><td>-0.88</td></tr>\n",
       "<tr><td>0.79</td><td>1.00</td><td>-0.83</td></tr>\n",
       "<tr><td>-0.88</td><td>-0.83</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.79 -0.88\n",
       " 0.79  1.00 -0.83\n",
       "-0.88 -0.83  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>197.187229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>197.187229</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         197.187229\n",
       "total        197.187229"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>400.896198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>406.110528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            400.896198\n",
       "BIC            406.110528"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "378516f7",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b713edd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.855121Z",
     "iopub.status.busy": "2022-09-28T12:12:03.854446Z",
     "iopub.status.idle": "2022-09-28T12:12:03.862085Z",
     "shell.execute_reply": "2022-09-28T12:12:03.861399Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.0013739509487277267\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3100a47",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "35d5726b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.865272Z",
     "iopub.status.busy": "2022-09-28T12:12:03.865017Z",
     "iopub.status.idle": "2022-09-28T12:12:03.870343Z",
     "shell.execute_reply": "2022-09-28T12:12:03.869703Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e368223",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "88ca90ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:12:03.873405Z",
     "iopub.status.busy": "2022-09-28T12:12:03.873159Z",
     "iopub.status.idle": "2022-09-28T12:14:56.854755Z",
     "shell.execute_reply": "2022-09-28T12:14:56.853762Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "df4ecf9d74994eef9469308088747114",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "163af784",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "95869b0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:14:56.861449Z",
     "iopub.status.busy": "2022-09-28T12:14:56.859865Z",
     "iopub.status.idle": "2022-09-28T12:14:56.867615Z",
     "shell.execute_reply": "2022-09-28T12:14:56.866912Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.003"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb49051a",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b8dffc98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:14:56.871292Z",
     "iopub.status.busy": "2022-09-28T12:14:56.870740Z",
     "iopub.status.idle": "2022-09-28T12:14:57.568988Z",
     "shell.execute_reply": "2022-09-28T12:14:57.568225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e47125d",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b53d4a45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T12:14:57.572502Z",
     "iopub.status.busy": "2022-09-28T12:14:57.571955Z",
     "iopub.status.idle": "2022-09-28T12:14:58.255266Z",
     "shell.execute_reply": "2022-09-28T12:14:58.254193Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a857435a",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "09b8a939338347b0a08cba71e244e05d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_77b0de3f14c5458da6d62f34817262a1",
       "placeholder": "​",
       "style": "IPY_MODEL_f834a938d61f43ed96dc244c1105f147",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "0c6b97f1af6d4ca0b94f05486d8f0111": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a547257e87a3495db4f8a0484581f3a6",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d0916ede933444a29f10d00ed9c0eb2d",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "1d1e7c220c03431cb860af71e13acdf4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1e67b590374e4f2badf9bbf2e2874f63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8b1eee8d2155462e94155ca14e2333f3",
       "placeholder": "​",
       "style": "IPY_MODEL_5c49b586906f485ba824f127ee5c5003",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "2889ffdcc087452ba2b39847d2f3b19d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e63b0bdfad841ceba91b2fd0c9976b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2889ffdcc087452ba2b39847d2f3b19d",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4fadd5d94ffb4102ae9b8b7668a01981",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "4b710669097b48eaa62265e6e4ce38e7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "4d4c9dd9d2614b95b209eecb8f74659f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4fadd5d94ffb4102ae9b8b7668a01981": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "5c49b586906f485ba824f127ee5c5003": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "634616baa50144de9baacac1f3de625c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6e739ff30d8e4e8d84082753e932a12a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "77b0de3f14c5458da6d62f34817262a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "79f90627d85c4280939be4bf144156ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1e67b590374e4f2badf9bbf2e2874f63",
        "IPY_MODEL_2e63b0bdfad841ceba91b2fd0c9976b8",
        "IPY_MODEL_861ae7868eb24198aeaa34ab6fec4d5d"
       ],
       "layout": "IPY_MODEL_4b710669097b48eaa62265e6e4ce38e7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "861ae7868eb24198aeaa34ab6fec4d5d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4d4c9dd9d2614b95b209eecb8f74659f",
       "placeholder": "​",
       "style": "IPY_MODEL_1d1e7c220c03431cb860af71e13acdf4",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:14&lt;00:00, 13.29it/s]"
      }
     },
     "8b1eee8d2155462e94155ca14e2333f3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a547257e87a3495db4f8a0484581f3a6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ab172da766754637a946e655e4a63270": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d0916ede933444a29f10d00ed9c0eb2d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "de11cacd38ae4d4b8625b86a55742dd2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ab172da766754637a946e655e4a63270",
       "placeholder": "​",
       "style": "IPY_MODEL_634616baa50144de9baacac1f3de625c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:52&lt;00:00,  5.77it/s]"
      }
     },
     "df4ecf9d74994eef9469308088747114": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_09b8a939338347b0a08cba71e244e05d",
        "IPY_MODEL_0c6b97f1af6d4ca0b94f05486d8f0111",
        "IPY_MODEL_de11cacd38ae4d4b8625b86a55742dd2"
       ],
       "layout": "IPY_MODEL_6e739ff30d8e4e8d84082753e932a12a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f834a938d61f43ed96dc244c1105f147": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
