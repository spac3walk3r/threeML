{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "39e6ae89",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d877f24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:35.748026Z",
     "iopub.status.busy": "2022-09-28T19:50:35.747693Z",
     "iopub.status.idle": "2022-09-28T19:50:35.827413Z",
     "shell.execute_reply": "2022-09-28T19:50:35.826389Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc710990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:35.831886Z",
     "iopub.status.busy": "2022-09-28T19:50:35.831192Z",
     "iopub.status.idle": "2022-09-28T19:50:39.300513Z",
     "shell.execute_reply": "2022-09-28T19:50:39.299222Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14aa8e17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:39.305907Z",
     "iopub.status.busy": "2022-09-28T19:50:39.305429Z",
     "iopub.status.idle": "2022-09-28T19:50:39.337205Z",
     "shell.execute_reply": "2022-09-28T19:50:39.336326Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c40a1cd",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2610fe2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:39.342272Z",
     "iopub.status.busy": "2022-09-28T19:50:39.341866Z",
     "iopub.status.idle": "2022-09-28T19:50:40.965727Z",
     "shell.execute_reply": "2022-09-28T19:50:40.964530Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:50:39 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:50:39\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=264683;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=40764;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:50:40 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:50:40\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=588172;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=176611;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c354ea3",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d27af1d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:40.970634Z",
     "iopub.status.busy": "2022-09-28T19:50:40.969732Z",
     "iopub.status.idle": "2022-09-28T19:50:42.169279Z",
     "shell.execute_reply": "2022-09-28T19:50:42.168347Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">89</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=964647;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=43654;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#89\u001b\\\u001b[2m89\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=442180;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=883574;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.2 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(9 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV2 s)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.2 +/- 0.8) x 10^-1   1 / (cm2 keV s)\n",
       "xyl.spectrum.main.Line.b      (9 +/- 7) x 10^-2  1 / (cm2 keV2 s)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139938019006688\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>25.468419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>25.468419</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          25.468419\n",
       "total         25.468419"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>55.192157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.760884</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             55.192157\n",
       "BIC             58.760884"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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eD1q1CgNHDhQc+bM0dKlS3X77bf7z2E2G9+61Wo95TVaoqCgwHC2VhzHL2EAgEiU3jtZX398ILictTIBRKmwC4w2m01ud/A4gPr6ev/203H11VfrT3/6kz777DN/YLTZbPJ4PIb719fXn/Y1Tpafn6/LL7/ccFtJSYnmzp3bpvMDAIDQyMnLVtG6bwO6pbJWJoBoFnaBMT09XYcOHQoqb+zimZGRcdrn7N69u6qrj3chSU9Pl9frVUVFRUC3VLfbrerqasMusacjIyOjVfUEAADhjbUyAcSasJsltX///vr222/lcAQOKN+2bZt/++nw+XwqLS0NWGZjwIABkqQdO3YE7Ltjxw41NDT4twMAAJysca1MSayVCSDqhV1gHDVqlLxerwoKCvxl9fX1WrFihQYNGuSfIfXgwYNBE8hUVlYGnW/ZsmWqrKzUpZde6i+78MILlZycrLfffjtg37fffltdunTR8OHD2/GOAAAAACAyhV2X1EGDBmn06NGaP3++Kisr1aNHD61atUqlpaWaPn26f7/HH39cW7Zs0YYNG/xlkydPVl5envr27Sur1arCwkJ98MEHGjBgQNC6jnfffbeeffZZzZo1S8OGDdMXX3yh1atX695771VycnKn3jMAAAAAhKOwC4ySNHPmTGVmZuq9995TbW2t+vbtqyeffFJDhgw55XFXX321vvrqK61fv1719fXKzMzUrbfeqjvvvFNdunQJ2HfixIkym81atGiRNm7cqO7du+sXv/hF0EyrAAAAABCrwjIw2mw2TZkyRVOmTGlynz/84Q9BZY888shpXWfChAmaMGHCadcPAAAAAGJB2I1hBAAAAACEBwIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREA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XzzvzsOz7lw8787F8+48POvOxfPuPDzrzhWJz5tJbwAAAAAAhgiMAAAAAABDBEYAAAAAgCECIwAAAADAEIERAAAAAGCIwBjj0tPTdddddyk9PT3UVYkJPO/Ow7PuXDzvzsXz7jw8687F8+48POvOFcnPm3UYAQAAAACGaGEEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIXOoK4C2q6+v18svv6zVq1erpqZG/fr10z333KNLLrmk2WMPHTqk5557Tv/5z3/U0NCgoUOH6oEHHtBZZ50VtO+7776r119/XaWlpTrjjDN04403atKkSR1xS2Grtc96/fr1Wrt2rXbs2KHDhw+re/fuGj58uH784x+ra9euAfvedNNNKi0tDTpHfn6+HnrooXa9n3DX2uf917/+VQsWLAgqt1qtev/994PKeW8f1drn3dR7VpJ69Oih1157zf/6iiuuMNzvvvvu0+233976ykeYuro6vf7669q2bZu2b9+umpoazZgxQ2PHjm3R8TU1Nfrzn/+sDRs2yOVyaeDAgZoyZYpycnKC9v3oo4/0t7/9TSUlJUpNTdV1112nO++8U2ZzbHwFaMuz/uyzz7RmzRp9+eWXOnTokNLS0nThhRfq7rvvVkZGRsC+Dz74oLZs2RJ0jmHDhunpp59ur9sJe2153itXrtQTTzxhuG3p0qVKT08PKIv197bUtufd1HtWkkwmkz788EP/a76bSNu3b9eqVau0efNmlZaWKjk5Weedd57uueceZWdnN3t8JH9ux87fqCj2xBNPaN26dZo8ebJ69uyplStX6pFHHtG8efM0ePDgJo+rq6vT1KlT5XA4dPvtt8tsNmvx4sV64IEH9Ne//lUpKSn+fd9++20988wzGjlypG6++WZ9+eWXmjdvno4cOaIf/ehHnXGbYaG1z/rpp59Wenq6xowZo8zMTH399ddaunSpPvnkE7388suy2WwB+w8YMEA333xzQFnPnj075J7CWWufd6Np06YpISHB/zo+PrhTBe/t41r7vB944AE5nc6AstLSUr300kuGYfPiiy/WtddeG1A2YMCA9rmJCFFVVaUFCxYoMzNT/fv31+bNm1t8bENDg6ZPn66vv/5at9xyi1JSUrRs2TJNnTpVL774YsAXl08++USPPvqohgwZoqlTp+qbb77RwoULVVFRoWnTpnXErYWdtjzrP//5z6qurtaoUaOUnZ2t/fv3a8mSJdq0aZNefvnloABzxhln6Gc/+1lA2cn7RLu2PO9Gd999t7KysgLKkpKSAl7z3j6qLc/7jjvu0Pjx4wPKnE6nnnnmGcPP7lj/bvLqq6+qsLBQo0ePVr9+/VReXq6lS5fqnnvu0QsvvKC+ffs2eWzEf277ENG2bt3qGzFihO/VV1/1lx05csR3yy23+P7rv/7rlMe+8sorvhEjRvi2bdvmL9uzZ49v1KhRvr/85S8B5xs/frzvkUceCTh+9uzZvjFjxviqq6vb6W7CW1ue9eeffx5UtnLlSt+IESN877zzTkD55MmTg551LGrL83755Zd9I0aM8FVUVJxyP97bx7XleRtZsGCBb8SIEb4vv/wyoHzEiBG+3//+922ub6RzuVy+srIyn8/n823fvt03YsQI34oVK1p07AcffOAbMWKE78MPP/SXVVRU+MaOHet77LHHAva94447fD/5yU98brfbXzZ//nzfFVdc4duzZ0/bbyQCtOVZb9682ef1eoPKRowY4Zs/f35A+QMPPOC7884726fSEawtz3vFihW+ESNG+LZv397svry3j2rL8zby3nvv+UaMGOFbvXp1QDnfTXy+L7/80ldfXx9QtnfvXt+VV17pmz179imPjfTPbcYwRrj169fLZDIpPz/fX2az2TRu3Dht3bpVBw8ebPLYdevW6dxzz9XAgQP9Zb1799aFF14Y0A3h888/V1VVla6//vqA4ydOnCin06lNmza13w2FsbY866FDhwaVNXbN27Nnj+Exbrc7qNUmlrTleZ/I4XDI5/MZbuO9fVx7Pe9G77//vrKyspSbm2u43eVyyeVytanOkcxqtba65Wn9+vVKS0sL6N6bmpqq0aNH66OPPlJ9fb2ko58te/bs0YQJEwK6MU2cOFE+n0/r1q1r0z1EirY86yFDhgT1TBgyZIiSk5NVUlJieIzH41FdXV2rrhcN2vK8T1RXVyev12u4jff2ce31vButWbNGCQkJ+uEPf2i4PZa/m+Tm5spisQSUZWdn6+yzz27y86BRpH9uExgj3K5du9SzZ0/Z7faA8sYQuHv3bsPjGhoa9M033+jcc88N2jZw4EB99913/n/wdu3aJUlB++bk5Cg+Pl47d+5s831EgtY+66aUl5dLOvqBcbLPP/9cY8aM0TXXXKObbrpJb7zxRusqHcHa43nffPPNGjt2rK699lrNmTNHhw8fDrqGxHtbat/3986dO1VSUqKrrrrKcPuqVas0ZswYXX311brjjju0Zs2a1lc8Bu3cuVMDBgwICjIDBw7UkSNHtG/fPv9+koLGx2RkZOiMM87wv/9xeurq6uR0OgOGbTTat2+frrnmGl177bW6/vrr9dJLL8nj8YSglpFt6tSpuvbaazVmzBj98pe/9L+nG/He7hiVlZX69NNP9cMf/jBgOEcjvpsE8/l8qqioMPw8OFGkf24zhjHClZeXG/6y1FhWVlZmeFx1dbXq6+ubPbZXr14qLy+XyWRSt27dAvazWCxKTk72B59o19pn3ZRXX31VJpNJI0eODCjv27evBg8erOzsbFVXV2vlypX64x//qLKyMt1///2tv4EI05bn3bVrV91www0677zzZLFY9OWXX2rp0qXavn27XnzxRX8o4r19XHu+vxsD4NVXXx207fzzz9fo0aOVlZWl8vJyLVmyRHPmzJHD4Qhq6YWxw4cP64ILLggqb/yzKi8v94+vObH85H1j6f3dnt544w253W7l5eUFlJ911lkaOnSo+vbtqyNHjmjdunVauHCh9u3bp8ceeyxEtY0sNptNY8eO1dChQ2W321VUVKTFixdrypQpeumll5SZmSlJvLc7yAcffCCv12v42c13E2Nr1qzRoUOH9NOf/vSU+0X65zaBMcK5XK6g5nHpaBeFxu1NHSepRce6XK4mZ2WyWq0x062stc/ayJo1a7R8+XLdeuutQTNr/fa3vw14fd111+nhhx/W4sWLNWnSJHXv3r0VtY88bXnekydPDng9atQoDRw4UHPmzNHSpUv9s3Hy3j6uvd7fDQ0NWrt2rQYMGKCzzz47aPvzzz8f8Pq6667TPffco/nz52vs2LFBE0AhmMvl8v+5nOjkP6vGLk5N7RvL3SZba8uWLVqwYIFGjx6tiy66KGDbL3/5y4DX11xzjX73u9/pnXfe0U033aTzzjuvM6sakfLy8gKC+IgRIzRs2DA98MAD+sc//uGfjZP3dsd4//33lZqaqosvvjhoG99NgpWUlOjZZ5/VeeedFzSR28ki/XObLqkRzmazye12B5U3vuGa+vLVWN6SY202W5Ndaurr62PmC15rn/XJvvjiCz355JMaNmyY7r333mb3j4uL00033SSv19vk9NfRqL2ed6Orr75aaWlp+uyzzwKuwXv7qPZ63lu2bNGhQ4cMf6E2YrFYdMMNN6i2tlZFRUUtr3AMs9ls/j+XE538Z9X4haOpfWPp/d0eSkpK9Ktf/Up9+/bV9OnTW3RM44ySn376aUdWLaoNHjxYgwYNCvjs5r3d/vbv36+tW7cqLy+vRUs3xOp3k0bl5eWaPn267Ha75syZI5PJdMr9I/1zm8AY4Zpqnm4sO3mdqEbJycmyWq0tOjY9PV1er1cVFRUB+7ndblVXV8fMlOGtfdYn2r17t2bMmKG+fftq9uzZLV5Pp/GXu+rq6tOocWRrj+d9su7duwc8Q97bx7XX816zZo3i4+ObHL9oJBbf322RlpZ2yj+rxvftiV2djPaNpfd3Wx08eFDTpk2T3W7Xk08+qcTExBYd1/jerqmp6cjqRT2jz26J93Z7OtVQgqbE6md3bW2tHnnkEdXW1urpp59u0b+Pkf65TWCMcP3799e3334rh8MRUL5t2zb/diPx8fHq27evduzYEbRt27ZtOuuss/z/IDauj3byvjt27FBDQ0PMrJ/W2mfd6LvvvtNDDz2kbt266amnnmrxFw7p6C9/kvEEOdGqrc/7ZD6fT6WlpQHPkPf2ce3xvOvr67V+/XoNGTLktAJ9LL6/22LAgAHatWuXGhoaAsq3b9+uLl26+Lu5N75/T265LSsr06FDh2Lq/d0WVVVVmjZtmtxud4u/HDbivd0+9u/fb/jZzXu7/bz//vvq0aPHaXWdjsX3t8vl8k/E9Nvf/tZw6IWRSP/cJjBGuFGjRsnr9aqgoMBfVl9frxUrVmjQoEH+AeIHDx4MmvJ35MiR2rFjR8CX5b1792rz5s0aNWqUv+zCCy9UcnKy3n777YDj3377bXXp0kXDhw/vgDsLP2151uXl5Zo2bZri4+P19NNPN/nhWl1dHTSNuMfj0SuvvCKLxWK4PEe0asvzrqysDDrfsmXLVFlZqUsvvdRfxnv7uLY870affPKJamtrm/yF2ujPpa6uTm+++aZSUlKCZoXD0S8JJSUlAV2nR44cqcOHD2vDhg3+ssrKSn344Ye67LLL/F2a+vTpo169eumdd94J+FxZtmyZ4uLigibcinVGz9rpdOqRRx5RWVmZnnrqqaAx540cDkdQFzKfz6eFCxdKkuEi6LHO6HkbfUZs2rRJRUVFGjZsmL+M9/bpM3rejZqb2ZrvJkd5vV795je/0datW/XYY4/p/PPPN9wvGj+3mfQmwg0aNEijR4/W/PnzVVlZqR49emjVqlUqLS0NGGPx+OOPa8uWLQFv1IkTJ+rdd9/V9OnTdcstt8hkMmnx4sXq1q2bbrnlFv9+NptNd999t5599lnNmjVLw4YN0xdffKHVq1fr3nvvVXJycqfec6i05Vk//PDD2r9/v2699VYVFhaqsLDQv61bt27+LxMbN27UwoULNXLkSGVlZammpkZr1qxRcXGx7rvvvpjqZtOW5z158mTl5eWpb9++slqtKiws1AcffKABAwYErTPIe/uotjzvRmvWrJHVam3yH7QlS5boo48+0mWXXabMzEyVl5drxYoVOnjwoB599FHDSXei2VtvvaXa2lp/16ONGzfq+++/lyRNmjRJSUlJmj9/vlatWqVFixYpKytL0tFw/+abb+qJJ57Qnj17lJKSomXLlqmhoSFopr4pU6ZoxowZmjZtmq688kp98803Wrp0qcaPH9/iX8ajQWuf9Zw5c7R9+3Zdd911KikpCfixJCEhQSNGjJB09Av3Y489pquuuko9evSQy+XS//7v/6qwsFATJkyIuR9DWvu877//fp1zzjnKycmR3W7Xzp07tWLFCnXv3l133HFHwDV4bx/X2ufdqLnuqHw3OepPf/qTNm7cqMsuu0w1NTVavXp1wPYxY8ZIUlR+bhMYo8DMmTOVmZmp9957T7W1terbt6+efPJJDRky5JTHJSYmat68eXruuee0cOFCNTQ0aOjQofrFL34R1AI2ceJEmc1mLVq0SBs3blT37t31i1/8Img2ymjX2mfduIbda6+9FrRtyJAh/sDYt29f9e7dW2vWrFFlZaXMZrMGDBigxx57TKNHj273+wl3rX3eV199tb766iutX79e9fX1yszM1K233qo777xTXbp0CdiX9/ZxrX3e0tEWlk2bNukHP/iBkpKSDPfJzc3VV199pXfffVfV1dXq0qWLBg4cqOnTpwfNOBkLFi1apNLSUv/rDRs2+IP4mDFjmnyOJpNJTz31lJ5//nm99dZbcrlcOvfcczVjxgz16tUrYN/LLrtMc+fO1YIFCzRv3jylpKTo9ttv11133dVh9xWOWvusGz+7V6xYoRUrVgRsO/PMM/2BMTMzUxdccIE2bNigw4cPKz4+Xr1799a0adMCfqSKFa193nl5efrkk0/0n//8R0eOHFF6eromTJigu+66S2lpaQH78t4+rrXPWzo+s/U555wT9PnRiO8mRzV+Hnz88cf6+OOPg7Y3BkYjkf65Hefz+XwhuzoAAAAAIGwxhhEAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAAAACGCIwAAAAAAEMERgAAAACAIQIjAAAAAMAQgREAAAAAYIjACAAAAAAwRGAEAAAAABgiMAIAAAAADBEYAQAIYz6fTw8//LCuuOIKffDBBy3eBgBAeyAwAgAQxuLi4jRjxgx169ZNzzzzjEpLS/3b3njjDf3rX//S2LFjdeWVV4awlgCAaEVgBAAgzKWlpWnmzJlyOByaPXu2vF6vdu3apb/85S/q2bOnpk6dGuoqAgCiVJzP5/OFuhIAAKB5f/zjH/XGG2/olltu0ccff6z9+/frhRdeUE5OTqirBgCIUgRGAAAiRH19ve6//37t2rVLkvRf//Vfuu2220JcKwBANKNLKgAAEcJqterSSy/1//f48eNDXCMAQLQjMAIAECG2bdum1157TSkpKaqvr9czzzwT6ioBAKIcgREAgAhQV1en2bNny2Qyad68eRo5cqQ+/PBDLV++PNRVAwBEMQIjAAAR4Pe//73279+vKVOmqG/fvnrkkUfUvXt3/eEPf9C+fftCXT0AQJQiMAIAEOZWr16t1atX67LLLtMNN9wgSeratat+9atfyeVyafbs2fJ4PCGuJQAgGhEYAQAIY/v379ezzz6r9PR0/fKXvwzYNmTIEP3oRz9SUVGR5s+fH6IaAgCiGctqAAAAAAAM0cIIAAAAADBEYAQAAAAAGCIwAgAAAAAMERgBAAAAAIYIjAAAAAAAQwRGAAAAAIAhAiMAAAAAwBCBEQAAAABgiMAIAAAAADBEYAQAAAAAGCIwAgAAAAAMERgBAAAAAIYIjAAAAAAAQ/8fy2SDU3MsrA8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fa629ec",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "281e0a75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:42.173104Z",
     "iopub.status.busy": "2022-09-28T19:50:42.172659Z",
     "iopub.status.idle": "2022-09-28T19:50:42.179993Z",
     "shell.execute_reply": "2022-09-28T19:50:42.179175Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1223abfb",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e3ca902a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:50:42.183782Z",
     "iopub.status.busy": "2022-09-28T19:50:42.183136Z",
     "iopub.status.idle": "2022-09-28T19:51:56.560471Z",
     "shell.execute_reply": "2022-09-28T19:51:56.559425Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b26006e9e35d45ab82c50e455fb92633",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74036af0",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "913d3635",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:56.564569Z",
     "iopub.status.busy": "2022-09-28T19:51:56.564275Z",
     "iopub.status.idle": "2022-09-28T19:51:56.569658Z",
     "shell.execute_reply": "2022-09-28T19:51:56.568862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.345), ('data', 0.345)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad17c2c1",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c1bc8481",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:56.573837Z",
     "iopub.status.busy": "2022-09-28T19:51:56.573571Z",
     "iopub.status.idle": "2022-09-28T19:51:57.530775Z",
     "shell.execute_reply": "2022-09-28T19:51:57.530009Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:51:56 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:51:56\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=565729;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=264287;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=537371;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=266295;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=797342;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=892510;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=698213;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=84723;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=295797;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=510512;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=446345;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=212997;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=398862;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=311070;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=967728;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=902806;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=629756;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=881826;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:51:57 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">469</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:51:57\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=452483;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=18371;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#469\u001b\\\u001b[2m469\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">470</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=509375;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=341820;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#470\u001b\\\u001b[2m470\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">471</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=972424;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=455807;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#471\u001b\\\u001b[2m471\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a17af5c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:57.534437Z",
     "iopub.status.busy": "2022-09-28T19:51:57.533697Z",
     "iopub.status.idle": "2022-09-28T19:51:58.191797Z",
     "shell.execute_reply": "2022-09-28T19:51:58.190653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec0cf4d6",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "56c76e33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.196313Z",
     "iopub.status.busy": "2022-09-28T19:51:58.195441Z",
     "iopub.status.idle": "2022-09-28T19:51:58.203822Z",
     "shell.execute_reply": "2022-09-28T19:51:58.203027Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "de5173f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.206809Z",
     "iopub.status.busy": "2022-09-28T19:51:58.206545Z",
     "iopub.status.idle": "2022-09-28T19:51:58.210225Z",
     "shell.execute_reply": "2022-09-28T19:51:58.209452Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "57c3a763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.213353Z",
     "iopub.status.busy": "2022-09-28T19:51:58.212972Z",
     "iopub.status.idle": "2022-09-28T19:51:58.340061Z",
     "shell.execute_reply": "2022-09-28T19:51:58.339318Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:51:58 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:51:58\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=832371;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=531847;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(4.3 -0.5 +0.6) x 10^-1</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.53 +/- 0.09</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (4.3 -0.5 +0.6) x 10^-1  1 / (cm2 keV s)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.53 +/- 0.09                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139937969214608\">\n",
       "<tr><td>1.00</td><td>0.25</td></tr>\n",
       "<tr><td>0.25</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.25\n",
       "0.25 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>209.358641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>209.358641</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         209.358641\n",
       "total        209.358641"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>422.972600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>426.541327</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            422.972600\n",
       "BIC            426.541327"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "17949590",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.343739Z",
     "iopub.status.busy": "2022-09-28T19:51:58.343004Z",
     "iopub.status.idle": "2022-09-28T19:51:58.488483Z",
     "shell.execute_reply": "2022-09-28T19:51:58.487713Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=122756;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=525714;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.8 -0.6 +0.9</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-5.4 +/- 3.2) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(1.17 -0.34 +0.5) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                result  \\\n",
       "parameter                                                                \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K                 1.8 -0.6 +0.9   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index    (-5.4 +/- 3.2) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (1.17 -0.34 +0.5) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (cm2 keV s)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139937910385968\">\n",
       "<tr><td>1.00</td><td>0.88</td><td>-0.96</td></tr>\n",
       "<tr><td>0.88</td><td>1.00</td><td>-0.89</td></tr>\n",
       "<tr><td>-0.96</td><td>-0.89</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.88 -0.96\n",
       " 0.88  1.00 -0.89\n",
       "-0.96 -0.89  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>199.014956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>199.014956</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         199.014956\n",
       "total        199.014956"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>404.55165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>409.76598</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             404.55165\n",
       "BIC             409.76598"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0427100",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d25d07e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.493700Z",
     "iopub.status.busy": "2022-09-28T19:51:58.492173Z",
     "iopub.status.idle": "2022-09-28T19:51:58.501095Z",
     "shell.execute_reply": "2022-09-28T19:51:58.500361Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 2.8239182350495666e-06\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dd5ac72",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "66cf6063",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.504824Z",
     "iopub.status.busy": "2022-09-28T19:51:58.504149Z",
     "iopub.status.idle": "2022-09-28T19:51:58.510109Z",
     "shell.execute_reply": "2022-09-28T19:51:58.509375Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1aa6b861",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "82203378",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:51:58.514829Z",
     "iopub.status.busy": "2022-09-28T19:51:58.513328Z",
     "iopub.status.idle": "2022-09-28T19:55:01.078994Z",
     "shell.execute_reply": "2022-09-28T19:55:01.077883Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8b00aff05e244eeba9fe1f3ae876cc3e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e7f8b6b",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6a50a761",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:55:01.084519Z",
     "iopub.status.busy": "2022-09-28T19:55:01.084233Z",
     "iopub.status.idle": "2022-09-28T19:55:01.091323Z",
     "shell.execute_reply": "2022-09-28T19:55:01.090618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9892e21",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "166165be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:55:01.094405Z",
     "iopub.status.busy": "2022-09-28T19:55:01.094149Z",
     "iopub.status.idle": "2022-09-28T19:55:01.803342Z",
     "shell.execute_reply": "2022-09-28T19:55:01.802462Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA48AAAMQCAYAAACHWVCZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAACMBElEQVR4nOzdeXiU1cH+8XtmsicEskAChARZRFABF9xQQR0BBaGKdam1qD+DivtatVpti0uVutQqiq+AS1vADUEl4LiA4goCymIUhAQICdmTyTaTmfn9gUxFkCSTSU5m8v1cl9eb55lnnrnDW01uznnOsfh8Pp8AAAAAADgIq+kAAAAAAICOj/IIAAAAAGgS5REAAAAA0CTKIwAAAACgSZRHAAAAAECTKI8AAAAAgCZRHgEAAAAATaI8AgAAAACaRHk0pL6+Xrm5uaqvrzcdBQAAAACaRHk0JC8vT9nZ2crLyzMdBQAAAEA72PnWIuX/d752vrXIdJSARJgOAAAAAACdQcFbi+UqLVNUSrJ6T5poOk6LMfIIAAAAAGgS5REAAAAA0CSmrXZQjY2NamxsNB0DB2Cz2RQRESGLxWI6CgAAANBuGHnsgGpqalRbW2s6Bn6Fy+VSWVmZPB6P6SgAAABAu2HksYPxer1yu93q1q2b6Sg4iLi4OJWVlSk5OZkRSAAAAHQKjDx2MI2NjYqKijIdA02wWCyKiYlhajEAAAA6DUYeOxiv1yurlU4fCmw2mzwejyIjI01HAQAAQAhIG3OmPDU1ssXHm44SEMpjBzd16lTl5+e3yb0zMzM1a9asNrk3AAAAgH1lXnSB6QitwhBXB5efn6+8vLyg3zcvL6/NSmlL7dixQ//973+NZjj99NO1adMmoxkAAACAjoyRxxCQlZWlnJycoN5z3LhxQb1fa+zcuVPz5s3TxRdf3O6f7fV62/0zAQAAgFBEeUSTBg0apJtuukkffPCBSktLdffdd2vLli1aunSpnE6n/va3v+n444+XJC1cuFAvvPCCJKlnz57629/+prS0NL3xxhtatGiRkpOT9cMPPygyMlJPPvmk+vTpo/vuu08FBQWaNGmSevbsqWeffVbbtm3Tgw8+qNLSUrlcLl144YX6/e9/v182l8ulxx9/XB9//LGsVqu6d++uF154Qbm5ubr//vtVX1+vhoYGTZgwQdOmTZMkPfXUU/r+++9VW1urXbt2ac6cOfvcMy8vT/fdd59KS0tltVp1/fXXy263t/GfMgAAANCxUR7RLHFxcXr11Vf12Wefadq0abr33nv1xhtvaMmSJXrkkUf0+uuv6/vvv9ejjz6qN954Q2lpaZo5c6b+9Kc/6f/+7/8kSd9++60WLlyoPn36aMaMGXr++ef117/+VX/5y1/04IMP6q233pIkeTwe3XLLLXr00UfVv39/1dXV6YILLtDQoUM1dOjQfXLNmjVL27Zt0xtvvKGoqCiVlZVJknr37q0XX3xRUVFRqq+v10UXXaSTTjpJw4cPlyStWbNGCxcuVGpq6n7f62233abJkyfroosu0rZt23ThhRdq8ODB6t27dxv+CQMAACDcfXVFtlylZYpKSdaI2c+bjtNilEc0y9lnny1JOuKII1RbW6vx48dLkoYOHep/JvOLL77QKaecorS0NEnS7373Oz399NPyeDySpOHDh6tPnz7+r1955ZUDftbWrVu1efNm3XLLLf5zNTU12rJly37l8cMPP9Rtt93m394kOTlZktTQ0KC//OUv+u6772SxWFRYWKhNmzb5y+OoUaMOWBydTqc2btzofwazb9++Ovroo7Vq1SrKIwAAADo1ymM7cjgccjgckvaUlFASHR0tSf5tRPYe792u4kAsFssB79HU+3w+n7p27eofiQzEY489pqSkJL355puKiIjQddddp4aGBv/rcXFxzb7XL78PAAAAoDNitdV2ZLfb9fDDD+vhhx/W9ddfbzpO0B1//PH6+OOPVVRUJEmaN2+eTjzxRNlstoO+LyEhQdXV1f7jQw45RAkJCXr99df95/Ly8lRRUbHfe08//XS99NJLcrlckuSftlpVVaX09HRFREToxx9/1MqVK5v1PSQkJGjIkCF64403/J+7evVqjRgxolnvBwAAAMIVI48hIC8vL+iro+bl5SkrKyuo9zz00EN1++2368orr5S0Z8Gc6dOnN/m+QYMGaeDAgZowYYIyMjL07LPP6rnnntODDz6ouXPnyuv1KikpSf/4xz/2e292drYef/xxnXvuuYqIiFCPHj30/PPP65prrtEdd9yhN998U5mZmTrhhBOa/X3MmDFD9913n1555RVZLBY98MAD6tWrV/P/IAAAAIAwZPH5fD7TITqj3NxcZWdn6/nnn9egQYP85+vr6yVJMTExkqSpU6e22X6MmZmZmjVrVpvcuzP45f+vAAAAgINhwRy0KcodAAAAgI6AZx4BAAAAAE2iPAIAAAAAmkR5BAAAAAA0iWceAQAAAKAdHHrzjfK63bJGRpqOEhDKIwAAAAC0g65HHmE6QqswbRUAAAAA0CRGHtGk008/XZGRkYqJiVF9fb0mT56sqVOnNvm+tWvX6t5775XNZtOtt96qU045Zb9r/vvf/2revHmSpF27dik6OlrJycmSpLvuuktJSUl64IEHVFFRIa/Xq+joaD300EM69NBDg/tNAgAAADgoyiOa5YknntDgwYNVVFSks88+WyeccIKGDh160Pe8+eabmjBhgq666qpfvebiiy/WxRdfLEm68847ddhhh+myyy7zvz5hwgTdeOONOvPMMyXtKZhRUVGt/4YAAACAdlb57Xr/M4+hOIWV8hgCdr61SAVvLW7yuvh+/TTknrv2Obdx+kOq+fHHA17fa9I56j1pYouypKWlqV+/ftq5c6eGDh2q4uJiTZ8+XTt37lRDQ4NOP/103XzzzZo1a5aWLFmi6Ohovfvuu3r55ZeVmJjYos+SpMLCQqWlpfmPe/bs2eJ7AAAAAB3B948/KVdpmaJSkjVi9vOm47QY5TEEeGrr5Cota/K66NTU/c41VlX96ns9tXUtzrJlyxZVVFTo+OOPl7RntPCqq67Scccdp8bGRl111VVasmSJpk6dqh9//HG/kcSWmjZtmv7whz9o2LBhGj58uMaOHashQ4YEfD8AAAAAgaE8hgBbXKyiUpKbvC7iACN7EYmJv/peW1xsszPcdNNNslqt2rp1q+666y4lJyertrZWn332mUpKSvzX1dbWauvWrc2+b1OuuOIKTZw4UZ9//rm++uorXXLJJXrggQd09tlnB+0zAAAAADSN8hgCek+a2OLppXv9chproPY+8/jpp5/q6quv1gknnKCMjAxJ0oIFCxQdHR2UzzmQ1NRUTZgwQRMmTFDv3r21aNEiyiM6nalTpyo/P3+/85mZmZo1a5aBRAAAoLNhqw60yEknnaSLL75YTzzxhOLj43X88cfv84trUVGRCgsLg/Z57733ntxutySpsbFRubm5yszMDNr9gVCRn5+vvLy8fc7l5eUdsFACAAC0BUYe0WLTpk3TmDFjtH79es2YMUMPPfSQJkyYIIvFotjYWP31r39Venr6Pu95//339cEH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\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "707e26d2",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "051179c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T19:55:01.807324Z",
     "iopub.status.busy": "2022-09-28T19:55:01.806737Z",
     "iopub.status.idle": "2022-09-28T19:55:02.542892Z",
     "shell.execute_reply": "2022-09-28T19:55:02.542080Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c4b1175",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0c9e328c3bdb47a8840850da1efec480": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "178e9fdb009c427e80bbb4dc6cd6972c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "1e98f1146bcf47ad88c196d9e2602430": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_577d38931d7046f5aa228af9a79bf275",
       "placeholder": "​",
       "style": "IPY_MODEL_b331af4e0ee840009a11e274d6da4626",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:13&lt;00:00, 13.45it/s]"
      }
     },
     "23cede24b74149ab8062de90bcd738ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cdd2dbc066744d87a2b0eeb2128a9faf",
       "placeholder": "​",
       "style": "IPY_MODEL_d62b774bc88749ad9a4ec4ae3843e537",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "47fc2dbc9683472db684c9d17aad8c03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "577d38931d7046f5aa228af9a79bf275": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "77112aa087ae4e23a5e96d2611378646": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7b8fed801ca645688e11858563d825b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "82c92dae0eb0421381b2ab6cc70bcec3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8b00aff05e244eeba9fe1f3ae876cc3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_23cede24b74149ab8062de90bcd738ca",
        "IPY_MODEL_a3b5fc48269147b1b7e5bfcc638ebd98",
        "IPY_MODEL_f09e3a8cfb274a87af218f13d2dd149d"
       ],
       "layout": "IPY_MODEL_0c9e328c3bdb47a8840850da1efec480",
       "tabbable": null,
       "tooltip": null
      }
     },
     "933876fcffd24eec98db325bedc30de9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_afc1784292db453ca9faa92a0f872e14",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_178e9fdb009c427e80bbb4dc6cd6972c",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "a3b5fc48269147b1b7e5bfcc638ebd98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_82c92dae0eb0421381b2ab6cc70bcec3",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_47fc2dbc9683472db684c9d17aad8c03",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "ad2855cd8ecf46309d86ac60dbaf174e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afc1784292db453ca9faa92a0f872e14": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b26006e9e35d45ab82c50e455fb92633": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f96c9467af0a4be98a609c9bff848a4f",
        "IPY_MODEL_933876fcffd24eec98db325bedc30de9",
        "IPY_MODEL_1e98f1146bcf47ad88c196d9e2602430"
       ],
       "layout": "IPY_MODEL_df50a17e8a83457a91f80852d9d3dd37",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b331af4e0ee840009a11e274d6da4626": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cdd2dbc066744d87a2b0eeb2128a9faf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d2c5cdfc41164e37bd5511ab5822d567": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d62b774bc88749ad9a4ec4ae3843e537": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "df50a17e8a83457a91f80852d9d3dd37": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "f09e3a8cfb274a87af218f13d2dd149d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ad2855cd8ecf46309d86ac60dbaf174e",
       "placeholder": "​",
       "style": "IPY_MODEL_77112aa087ae4e23a5e96d2611378646",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [03:02&lt;00:00,  5.66it/s]"
      }
     },
     "f96c9467af0a4be98a609c9bff848a4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b8fed801ca645688e11858563d825b2",
       "placeholder": "​",
       "style": "IPY_MODEL_d2c5cdfc41164e37bd5511ab5822d567",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
